diss-easter.tex:59: TIKZ%%%%% \usetikzlibrary{arrows} \tikzset{ treenode/.style = {align=center, inner sep=0pt, text centered, font=\sffamily}, arn_n/.style = {treenode, circle, black, font=\sffamily\bfseries, draw=black, fill=white, text width=1.5em},% arbre rouge noir, noeud noir arn_r/.style = {treenode, circle, red, draw=black, text width=1.5em, [very -> (use sparingly; try to use words that are strong in themselves for emphasis)] thick, minimum height=0.2em},% arbre rouge noir, noeud rouge arn_x/.style = {treenode, rectangle, draw=black, minimum width=0.5em, minimum height=0.7em},% arbre rouge noir, nil deep/.style = {treenode, circle, red, draw=Brown, minimum width=0.5em, minimum height=0.7em, fill=Brown}, node/.style = {treenode, circle, green, draw=Peach, minimum width=0.5em, minimum height=0.7em, fill=Peach}, digit/.style = {treenode, white, draw=Cerulean, minimum width=0.4em, minimum height=0.4em, fill=Cerulean}, leaf/.style = {treenode, white, draw = Cerulean, circle, minimum width = 0.4em, minimum height = 0.4em, fill=Cerulean} } \usepackage{tkz-graph} \tikzset{ LabelStyle/.style = { rectangle, rounded corners, draw, minimum width = 2em, fill = yellow!50, text = red, font = \bfseries }, VertexStyle/.append style = { inner sep=5pt, font = \Large\bfseries}, EdgeStyle/.append style = {->, bend left} } %%%%%%% END TIKS %%%%% \begin{document} \bibliographystyle{plain} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% % Title \pagestyle{empty} \hfill{\LARGE \bf Razvan Kusztos} \vspace*{60mm} \begin{center} \Huge {\bf Verified functional data structures in Agda} \\ \vspace*{5mm} Part II Project in Computer Science\\ \vspace*{5mm} Girton College \\ \vspace*{5mm} \today % today's date \end{center} \cleardoublepage %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% % Proforma, table of contents and list of figures \linespread{1.5} \setcounter{page}{1} \pagenumbering{roman} \pagestyle{plain} \chapter*{Proforma} {\large \begin{tabular}{ll} Name:

diss-easter.tex:149: Dr Timothy Griffin \\ \end{tabular} } \footnotetext[1]{This word count was computed by {\tt detex diss.tex | tr -cd '0-9A-Za-z $\tt\backslash$n' | wc -w} } \stepcounter{footnote} \newpage \section*{Declaration} I, Razvan Kusztos of Girton College, being a candidate for Part II of the Computer Science Tripos, hereby declare that this dissertation and the work described in it are my own work, unaided except as [may -> = Do not confuse with "can".] be specified below, and that the dissertation does not contain material that has already been used to any substantial extent for a comparable purpose.

diss-easter.tex:202: [There are -> (a dead phrase; rewrite the sentence and it will probably improve)] many paradigms used in industry that enforce this idea.

diss-easter.tex:202: [Most -> Do not use as substitute for "almost."] commonly, hard-coded tests are run against the program.

diss-easter.tex:202: In this project I will focus on formal verification, that is, checking that a program is correct under some formal, mathematical modeling, rather [than -> (examine sentences containing "than" to insure that they are not missing words: I love my father more than my mother. I love my father more than my mother loves my father. I love my father more than I love my mother)] through [its -> = "it is" or "its"?] behaviour.

diss-easter.tex:204: Formal verification has had successful application in areas such as cryptography (Cryptol)\footnote{http://cryptol.net/documentation.html}, hardware specification (The verification [system -> Frequently used without need.] in Verilog) or compiler construction (CompCert\cite{compcert}).

diss-easter.tex:205: Although the [principles -> (a "principle" is a rule, while a "principal" is a person, when used as a noun, or means "chief", when used as an adjective, and the adverb for both words is spelt "principally")] [they -> (do not use as substitute for "each, each one, everybody, every one, anybody, any one, somebody, some one")] use have been around for decades, their industrial application remains still niche (CompCert is an example project using Coq).

diss-easter.tex:205: Isabelle’s open archive of proofs contains mainly proofs concerned with mathematical objects, with [very -> (use sparingly; try to use words that are strong in themselves for emphasis)] few example of algorithms or data structures \footnote{https://www.isa-afp.org}.

diss-easter.tex:207: Languages [like -> Substitute by "as" before phrases or clauses: Our love was beautiful, as love was meant to be.] Agda\cite{agdatutorial} have been designed first and foremost as general programming languages, with formal verification capacities secondary.

diss-easter.tex:209: Functional Data Structures} In the context of data structures and algorithms, [there are -> (a dead phrase; rewrite the sentence and it will probably improve)] two main paradigms in use:

diss-easter.tex:213: In stateful code, functions [can -> (do not confuse with "may")] alter the [state -> (if used as a verb, restrict to the meaning of "express fully or clearly")] of the program and return different results at different times, even when fed the same arguments.

diss-easter.tex:213: In this context, verification has to be done separately, using specific [system -> Frequently used without need.] such as Hoare Logic.

diss-easter.tex:215: [They -> (do not use as substitute for "each, each one, everybody, every one, anybody, any one, somebody, some one")] have to always return the same result for a given argument, regardless of when and where the call occurs.

diss-easter.tex:215: This concept is re-becoming popular in the industry, [due to -> Synonym for "attributable to", often confused with "through, because of, owing to."] the advantages it brings in concurrent programming.

diss-easter.tex:217: The work of Okasaki \cite{okasaki}, namely his book,“Purely Functional Data Structures”, has gone a great way in solving the imbalance [between -> (choose "between" 2 options and "among" 3 or more)] functional data structures and the vast collection of efficient imperative structures.

diss-easter.tex:219: The main constraining property of functional data structure is that [they -> (do not use as substitute for "each, each one, everybody, every one, anybody, any one, somebody, some one")] are persistent.

diss-easter.tex:219: That is, any destructive operation, such as updating an element in a list is [expected -> Use "expect" for simple predictions and "anticipate" for more complex actions in advance of an event.] to preserve in memory both the previous version and the new version.

diss-easter.tex:219: This constraint is not de facto in imperative implementation ([consider -> Not followed by "as" when it means "believe to be".] updating an element in a C array).

diss-easter.tex:221: By working functionally, we need to work on top of this constraint, and techniques [like -> Substitute by "as" before phrases or clauses: Our love was beautiful, as love was meant to be.] implicit recursive slowdown [can -> (do not confuse with "may")] help achieve comparable run-times.

diss-easter.tex:223: [Most -> Do not use as substitute for "almost."] commonly this environment is pen and paper.

diss-easter.tex:223: Agda is part of a family of programming languages [which -> (use "that" if clause is restrictive)], alongside with Coq or Idris, is based on the theory of dependent types.

diss-easter.tex:225: The original paper presents an implementation of this data structure in Haskell and describes the main operations that such a data [type -> (do not use as synonym for "kind of")] must support.

diss-easter.tex:227: FingerTrees are a slight modification of a 2-3 tree \footnote{that is, a tree whose nodes [can -> (do not confuse with "may")] have either two or three children} [which -> (use "that" if clause is restrictive)] allows efficient appending at either end.

diss-easter.tex:227: [Its -> = "it is" or "its"?] abstract data [type -> (do not use as synonym for "kind of")] is that of a double-ended queue.

diss-easter.tex:227: Furthermore, the FingerTrees [can -> (do not confuse with "may")] be associated with a measurement function and an operator (described in section whatever) that allows the specialization to other abstract data types, such as Random Access Sequences, Priority Queues or Interval Trees.

diss-easter.tex:272: Example finger tree} \label{fig:ftex1} \end{figure} % picture of 2-3 tree alongside with a finger tree The work of implementing the Finger Tree in a dependent environment has been carried out by Matthiew Souzeau in his paper \cite{coq}, focused on introducing \textit{Russel}, a framework to [facilitate -> help] code writing in Coq.

diss-easter.tex:278: The goal of this dissertation is to see to what extent the same result [can -> (do not confuse with "may")] be achieved in Agda, experimenting with various patterns for proving correctness.

diss-easter.tex:285: In the implementation section I will present a dependent implementation of FingerTree [which -> (use "that" if clause is restrictive)] ensures correctness, as well as proofs [related -> (do not use as an intransitive verb: "I get along well with my advisor" instead of "I relate well to my advisor")] to this data structure.

diss-easter.tex:285: This [can -> (do not confuse with "may")] be seen as a software engineering approach using dependent types.

diss-easter.tex:288: In the evaluation section, I will analyze the run-time difference and [compare -> "Compare" to points out resemblances, "compare with" points out differences.] the effort of implementing a dependent data structure versus a non dependent [one -> When used as a pronoun, it  must be used consistently: One must manage one's money carefully.].

diss-easter.tex:290: Preparation} \section{Starting Point} Pink Book \section{Agda} Agda\cite{agdatutorial} is a dependently typed programming language based on the predicative Martin Lof [type -> (do not use as synonym for "kind of")] theory.

diss-easter.tex:299: It was introduced in Ulf Norell’s Phd thesis \cite{agdaphd}, as a bridge [between -> (choose "between" 2 options and "among" 3 or more)] practical programming and the world of well-established automated theorem provers ([like -> Substitute by "as" before phrases or clauses: Our love was beautiful, as love was meant to be.] Coq).

diss-easter.tex:301: I have chosen to implement this project in Agda for [a number of -> many, several] reasons:

diss-easter.tex:311: Dependent Types} In traditional functional programming languages such as SML, Ocaml or Haskell, [there is -> (a dead phrase; rewrite the sentence and it will probably improve)] a clear barrier [between -> (choose "between" 2 options and "among" 3 or more)] types and values.

diss-easter.tex:314: Careful use of this expressive power [can -> (do not confuse with "may")] aid the user by reducing much of the run-time checks needed to [ensure -> (use "assure" with people, "ensure" with things, and "insure" when talking about money)] proper execution of the program.

diss-easter.tex:316: Curry Howard Isomorphism} Traditionally, proofs about the programs are presented in a separate environment, [most -> Do not use as substitute for "almost."] commonly pen and paper.

diss-easter.tex:318: Since we allow types to depend on values, we [can -> (do not confuse with "may")] reason about both code and proofs in the same environment.

diss-easter.tex:319: The main mechanism employed in computer assisted proofs with dependent types is the observation ([due to -> Synonym for "attributable to", often confused with "through, because of, owing to."] Curry) that there exists a [one -> When used as a pronoun, it  must be used consistently: One must manage one's money carefully.]-to-[one -> When used as a pronoun, it  must be used consistently: One must manage one's money carefully.] correspondence [between -> (choose "between" 2 options and "among" 3 or more)] propositions in formal logic and types.

diss-easter.tex:319: The original example, given by Howard, is the bijection [between -> (choose "between" 2 options and "among" 3 or more)] the intuitionistic natural deduction and the simply typed lambda calculus.

diss-easter.tex:320: Using this [principle -> (a "principle" is a rule, while a "principal" is a person, when used as a noun, or means "chief", when used as an adjective, and the adverb for both words is spelt "principally")], the predicative quantifier $\forall$ (for all) corresponds to a dependent product, enabled by dependent types.

diss-easter.tex:327: [Type -> (do not use as synonym for "kind of")] [system -> Frequently used without need.] & Logic \\ \hline Simply Typed LC & Gentzen Natural Deduction (Gentzen) \\ [System -> Frequently used without need.] F & Second Order Propositional Calculus \\ CoC & Higher Order Predicate Logic \footnote{Without the ability to prove induction} \\ ITT & Higher Order Predicate Logic - basis of Agda \\ CiC & Higher Order Predicate Logic - basis of Coq \\ \hline \end{tabular} \caption{Curry Howard Relation [between -> (choose "between" 2 options and "among" 3 or more)] various systems} \end{table} Although a comparison [between -> (choose "between" 2 options and "among" 3 or more)] CiC (Calculus of Inductive Constructions) and ITT (Intuitionistic [Type -> (do not use as synonym for "kind of")] Theory) [would -> (use "should" if used as conditional statement in the first person or for "shall" in indirect quotation after a verb in past tense.  Consider omitting it for repeated actions)] be [interesting -> Avoid using "interesting" when introducing something. Simply introduce it.], I [could -> (do not confuse with "may")] not find any literature on this topic.

diss-easter.tex:339: A notable difference is that Coq’s sort [system -> Frequently used without need.] differentiates [between -> (choose "between" 2 options and "among" 3 or more)] Prop (the [type -> (do not use as synonym for "kind of")] of propositions) and [Type -> (do not use as synonym for "kind of")](i), whereas Agda [only -> Put "only" right before the word it modifies.] has a family Set(i).

diss-easter.tex:355: A) $→$ B\\ \hline \end{tabular} \caption{Curry Howard Relation in Agda} \end{table} The proof of a proposition in this logic is equivalent to building a term that has the corresponding [type -> (do not use as synonym for "kind of")].

diss-easter.tex:363: Proofs in Agda.} A [very -> (use sparingly; try to use words that are strong in themselves for emphasis)] important family of types in Agda is the propositional equality.

diss-easter.tex:369: AgdaKeyword{data} \AgdaDatatype{\_≡\_} \AgdaSymbol{\{}\AgdaBound{a}\AgdaSymbol{\}} \AgdaSymbol{\{}\AgdaBound{A} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaBound{a}\AgdaSymbol{\}} \AgdaSymbol{(}\AgdaBound{x} \AgdaSymbol{:} \AgdaBound{A}\AgdaSymbol{)} \AgdaSymbol{:} \AgdaBound{A} \AgdaSymbol{→} \AgdaPrimitiveType{Set} \AgdaBound{a} \AgdaKeyword{where}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaInductiveConstructor{refl} \AgdaSymbol{:} \AgdaBound{x} \AgdaDatatype{≡} \AgdaBound{x}\<% \\ \end{code} Having a single constructor, it corresponds to the proposition that two elements of the same [type -> (do not use as synonym for "kind of")] [can -> (do not confuse with "may")] [only -> Put "only" right before the word it modifies.] be equal if [they -> (do not use as substitute for "each, each one, everybody, every one, anybody, any one, somebody, some one")] are in fact the same element.

diss-easter.tex:376: Constructing a term of [type -> (do not use as synonym for "kind of")] \AgdaBound{a} \AgdaDatatype{≡} \AgdaBound{b} represents a statement that \AgdaBound{a} and \AgdaBound{b} are equivalent.

diss-easter.tex:378: Associativity of Natural Numbers.} [Consider -> Not followed by "as" when it means "believe to be".] proving some properties of the natural numbers, such as associativity:

diss-easter.tex:383: AgdaIndent{2}{}\<[2]% \>[2]\AgdaFunction{+assoc} \AgdaSymbol{:} \AgdaSymbol{∀} \AgdaSymbol{(}\AgdaBound{x} \AgdaBound{y} \AgdaBound{z} \AgdaSymbol{:} \AgdaDatatype{ℕ}\AgdaSymbol{)} \AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{x} \AgdaPrimitive{+} \AgdaSymbol{(}\AgdaBound{y} \AgdaPrimitive{+} \AgdaBound{z}\AgdaSymbol{))} \AgdaDatatype{≡} \AgdaSymbol{((}\AgdaBound{x} \AgdaPrimitive{+} \AgdaBound{y}\AgdaSymbol{)} \AgdaPrimitive{+} \AgdaBound{z}\AgdaSymbol{)}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaFunction{+assoc} \AgdaInductiveConstructor{zero} \AgdaBound{y} \AgdaBound{z} \AgdaSymbol{=} \AgdaInductiveConstructor{refl}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaFunction{+assoc} \AgdaSymbol{(}\AgdaInductiveConstructor{suc} \AgdaBound{x}\AgdaSymbol{)} \AgdaBound{y} \AgdaBound{z} \AgdaKeyword{rewrite} \AgdaFunction{+assoc} \AgdaBound{x} \AgdaBound{y} \AgdaBound{z} \AgdaSymbol{=} \AgdaInductiveConstructor{refl}\<% \\ \end{code} The [type -> (do not use as synonym for "kind of")] indicates what is being proved, whereas the definition consists of an example proof.

diss-easter.tex:395: Induction} As in the previous example, we [can -> (do not confuse with "may")] see that induction is a key means of proof.

diss-easter.tex:397: In this example, we [perform -> do] a structural induction on the possible constructor of \textit{z} as a natural number:

diss-easter.tex:402: AgdaKeyword{data} \AgdaDatatype{ℕ} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaKeyword{where}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaInductiveConstructor{zero} \AgdaSymbol{:} \AgdaDatatype{ℕ}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaInductiveConstructor{suc} \<[7]% \>[7]\AgdaSymbol{:} \AgdaDatatype{ℕ} \AgdaSymbol{→} \AgdaDatatype{ℕ}\<% \\ \end{code} In the second [case -> Avoid if used to describe the instance of a situation.], we also [perform -> do] a natural mathematical induction step.

diss-easter.tex:416: [Further -> "Farther" denotes distance, "further" denotes time or quantity.] Example - List reverse properties} [Consider -> Not followed by "as" when it means "believe to be".] the following implementation of reverse, using a helper function, \textit{rev'} as the reverse with accumulator:

diss-easter.tex:435: We first need to prove some helper statements about reverse, of which I have included the [type -> (do not use as synonym for "kind of")] declarations\footnote{full implementation is in the appendix} \begin{code} \\ \>\AgdaFunction{rev'-rev} \AgdaSymbol{:} \AgdaSymbol{∀} \AgdaSymbol{\{}\AgdaBound{A}\AgdaSymbol{\}}\<% \\ \>[0]\AgdaIndent{10}{}\<[10]% \>[10]\AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{xs} \AgdaSymbol{:} \AgdaDatatype{List} \AgdaBound{A}\AgdaSymbol{)}\<% \\ \>[0]\AgdaIndent{10}{}\<[10]% \>[10]\AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{ys} \AgdaSymbol{:} \AgdaDatatype{List} \AgdaBound{A}\AgdaSymbol{)}\<% \\ \>[0]\AgdaIndent{10}{}\<[10]% \>[10]\AgdaSymbol{→} \AgdaFunction{rev'} \AgdaBound{xs} \AgdaBound{ys} \AgdaDatatype{≡} \AgdaSymbol{(}\AgdaFunction{rev} \AgdaBound{xs}\AgdaSymbol{)} \AgdaFunction{++} \AgdaBound{ys}\<% \\ \end{code} \begin{code} \\ \>\AgdaFunction{rev-app-lemma} \AgdaSymbol{:} \AgdaSymbol{\{}\AgdaBound{A} \AgdaSymbol{:} \AgdaPrimitiveType{Set}\AgdaSymbol{\}}\<% \\ \>[2]\AgdaIndent{14}{}\<[14]% \>[14]\AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{xs} \AgdaSymbol{:} \AgdaDatatype{List} \AgdaBound{A}\AgdaSymbol{)}\<% \\ \>[2]\AgdaIndent{14}{}\<[14]% \>[14]\AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{ys} \AgdaSymbol{:} \AgdaDatatype{List} \AgdaBound{A}\AgdaSymbol{)}\<% \\ \>[2]\AgdaIndent{14}{}\<[14]% \>[14]\AgdaSymbol{→} \AgdaFunction{rev} \AgdaSymbol{(}\AgdaBound{xs} \AgdaFunction{++} \AgdaBound{ys}\AgdaSymbol{)} \AgdaDatatype{≡} \AgdaSymbol{(}\AgdaFunction{rev} \AgdaBound{ys}\AgdaSymbol{)} \AgdaFunction{++} \AgdaSymbol{(}\AgdaFunction{rev} \AgdaBound{xs}\AgdaSymbol{)}\<% \\ \end{code} Finally, the main proof is presented using the Equational Reasoning module, [which -> (use "that" if clause is restrictive)] aids writing more readable proofs.

diss-easter.tex:467: This is the format in which [most -> Do not use as substitute for "almost."] proofs are written throughout the dissertation.

diss-easter.tex:467: I have indented the code such that, in [between -> (choose "between" 2 options and "among" 3 or more)] \AgdaFunction{begin} ... \AgdaFunction{∎}, the extra-indented lines correspond to successive transformations of the left-hand side of our formula, using lemmas provided inside the triangular brackets.

diss-easter.tex:468: AgdaFunction{≡⟨} ... \AgdaFunction{⟩}) \begin{code} \\ \>\AgdaFunction{rev-lemma} \AgdaSymbol{:} \AgdaSymbol{\{}\AgdaBound{A} \AgdaSymbol{:} \AgdaPrimitiveType{Set}\AgdaSymbol{\}}\<% \\ \>[2]\AgdaIndent{10}{}\<[10]% \>[10]\AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{xs} \AgdaSymbol{:} \AgdaDatatype{List} \AgdaBound{A}\AgdaSymbol{)}\<% \\ \>[2]\AgdaIndent{10}{}\<[10]% \>[10]\AgdaSymbol{→} \AgdaFunction{rev} \AgdaSymbol{(}\AgdaFunction{rev} \AgdaBound{xs}\AgdaSymbol{)} \AgdaDatatype{≡} \AgdaBound{xs}\<% \\ \>\AgdaFunction{rev-lemma} \AgdaInductiveConstructor{[]} \AgdaSymbol{=} \AgdaInductiveConstructor{refl}\<% \\ \>\AgdaFunction{rev-lemma} \AgdaSymbol{(}\AgdaBound{x} \AgdaInductiveConstructor{∷} \AgdaBound{xs}\AgdaSymbol{)} \AgdaSymbol{=}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaFunction{begin}\<% \\ \>[2]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaFunction{rev} \AgdaSymbol{(}\AgdaFunction{rev'} \AgdaBound{xs} \AgdaSymbol{(}\AgdaBound{x} \AgdaInductiveConstructor{∷} \AgdaInductiveConstructor{[]}\AgdaSymbol{))}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaFunction{≡⟨} \AgdaFunction{cong} \AgdaFunction{rev} \AgdaSymbol{(}\AgdaFunction{rev'-rev} \AgdaBound{xs} \AgdaSymbol{(}\AgdaBound{x} \AgdaInductiveConstructor{∷} \AgdaInductiveConstructor{[]}\AgdaSymbol{))} \AgdaFunction{⟩}\<% \\ \>[2]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaFunction{rev} \AgdaSymbol{((}\AgdaFunction{rev} \AgdaBound{xs}\AgdaSymbol{)} \AgdaFunction{++} \AgdaBound{x} \AgdaInductiveConstructor{∷} \AgdaInductiveConstructor{[]}\AgdaSymbol{)}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaFunction{≡⟨} \AgdaFunction{rev-app-lemma} \AgdaSymbol{(}\AgdaFunction{rev} \AgdaBound{xs}\AgdaSymbol{)} \AgdaSymbol{(}\AgdaBound{x} \AgdaInductiveConstructor{∷} \AgdaInductiveConstructor{[]}\AgdaSymbol{)} \AgdaFunction{⟩}\<% \\ \>[2]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaBound{x} \AgdaInductiveConstructor{∷} \AgdaFunction{rev} \AgdaSymbol{(}\AgdaFunction{rev} \AgdaBound{xs}\AgdaSymbol{)}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaFunction{≡⟨} \AgdaFunction{cong} \AgdaSymbol{(λ} \AgdaBound{a} \AgdaSymbol{→} \AgdaBound{x} \AgdaInductiveConstructor{∷} \AgdaBound{a}\AgdaSymbol{)} \AgdaSymbol{(}\AgdaFunction{rev-lemma} \AgdaBound{xs}\AgdaSymbol{)} \AgdaFunction{⟩}\<% \\ \>[2]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaBound{x} \AgdaInductiveConstructor{∷} \AgdaBound{xs}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaFunction{∎}\<% \\ \end{code} It is worth emphas[izing -> (words ending in -izing tend suggest usage of American spelling)] the dual use of the typing [system -> Frequently used without need.], both for proving correctness and providing abstraction.

diss-easter.tex:512: The [type -> (do not use as synonym for "kind of")] declaration is many times [sufficient -> enough] for understanding the purpose of the implementation.

diss-easter.tex:520: In a mathematical sense}, this means that [they -> (do not use as substitute for "each, each one, everybody, every one, anybody, any one, somebody, some one")] must be defined for all inputs.

diss-easter.tex:520: [Consider -> Not followed by "as" when it means "believe to be".] the declaration of the head of a list.

diss-easter.tex:524: AgdaFunction{head} \AgdaSymbol{:} \AgdaSymbol{∀} \AgdaSymbol{\{}\AgdaBound{A}\AgdaSymbol{\}} \AgdaSymbol{→} \AgdaDatatype{List} \AgdaBound{A} \AgdaSymbol{→} \AgdaBound{A}\<% \\ \>\AgdaFunction{head} \AgdaSymbol{(}\AgdaBound{x} \AgdaInductiveConstructor{∷} \AgdaBound{xs}\AgdaSymbol{)} \AgdaSymbol{=} \AgdaBound{x}\<% \\ \end{code} This function doesn't [type -> (do not use as synonym for "kind of")] check in many languages; [however -> Means "in whatever way, to whatever extent" inside a sentence and "nevertheless" at the beginning of a sentence.] some languages [could -> (do not confuse with "may")] allow run-time errors to be thrown if a nonexistent [case -> Avoid if used to describe the instance of a situation.] is reached.

diss-easter.tex:532: In a computational sense} [however -> Means "in whatever way, to whatever extent" inside a sentence and "nevertheless" at the beginning of a sentence.], functions must also be strongly [terminating -> ending, stopping] on all the inputs.

diss-easter.tex:532: We trade off the Turing completeness for [ensuring -> (use "assure" with people, "ensure" with things, and "insure" when talking about money)] that all constructed terms correspond to valid proofs.

diss-easter.tex:534: [However -> Means "in whatever way, to whatever extent" inside a sentence and "nevertheless" at the beginning of a sentence.], [due to -> Synonym for "attributable to", often confused with "through, because of, owing to."] a well known result, [termination -> end] checking is an undecidable problem.

diss-easter.tex:534: [For this reason -> since, because], Agda (and Coq) have to use heuristics to determine [whether -> (avoid using "or not" after "whether," unless you mean "regardless of whether")] recursive calls will eventually [terminate -> end].

diss-easter.tex:536: The way Agda deals with this problem is by [ensuring -> (use "assure" with people, "ensure" with things, and "insure" when talking about money)] that with every call to the function in a recursion stack, [its -> = "it is" or "its"?] argument becomes structurally smaller \cite{foetus}.

diss-easter.tex:539: C is an inductive data [type -> (do not use as synonym for "kind of")] constructor.

diss-easter.tex:541: Sized types} [One -> When used as a pronoun, it  must be used consistently: One must manage one's money carefully.] [can -> (do not confuse with "may")] [very -> (use sparingly; try to use words that are strong in themselves for emphasis)] simply imagine operations that hide this structural [less -> Use "less" for quantities and "fewer" for numbers.]-[than -> (examine sentences containing "than" to insure that they are not missing words: I love my father more than my mother. I love my father more than my mother loves my father. I love my father more than I love my mother)] relation.

diss-easter.tex:543: [For this reason -> since, because], the concept of 'Sized types' has been introduced.

diss-easter.tex:543: Under this paradigm, the data structure should be indexed by a [type -> (do not use as synonym for "kind of")] \footnote{that is, depend on values of that [type -> (do not use as synonym for "kind of")]:

diss-easter.tex:545: The difficulty of using Size becomes apparent in the context of Finger Trees (this is particularly a problem with nested [type -> (do not use as synonym for "kind of")], [which -> (use "that" if clause is restrictive)] I am explaining the the Appendix \ref{app:termcheck}).

diss-easter.tex:545: [However -> Means "in whatever way, to whatever extent" inside a sentence and "nevertheless" at the beginning of a sentence.], it is worth noting here that the incompleteness \cite{certified} of the [termination -> end] checker is making programming unnecessarily hard [in some cases -> sometimes].

diss-easter.tex:556: If the [type -> (do not use as synonym for "kind of")] of the data structure ensures the invariants we want, both these propositions become true via the Curry Howard isomorphism.

diss-easter.tex:558: Sorting Lists.} [Consider -> Not followed by "as" when it means "believe to be".], for example, implementing a function that sorts lists.

diss-easter.tex:560: That is, the input is a [normal -> (weak definition)] list and the output should be a sorted list containing all the elements in the argument list.

diss-easter.tex:561: We [can -> (do not confuse with "may")] provide a [type -> (do not use as synonym for "kind of")] encoding of what it means to be a sorted list containing some set of elements.

diss-easter.tex:564: AgdaIndent{2}{}\<[2]% \>[2]\AgdaKeyword{data} \AgdaDatatype{SortedList} \AgdaSymbol{:} \AgdaSymbol{\{}\AgdaBound{n} \AgdaSymbol{:} \AgdaDatatype{ℕ}\AgdaSymbol{\}} \AgdaSymbol{→} \AgdaDatatype{Vec} \AgdaBound{A} \AgdaBound{n} \AgdaSymbol{→} \AgdaPrimitiveType{Set} \AgdaKeyword{where}\<% \\ \>[2]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaInductiveConstructor{[]} \AgdaSymbol{:} \AgdaDatatype{SortedList} \AgdaInductiveConstructor{[]}\<% \\ \>[2]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaInductiveConstructor{[\_]} \AgdaSymbol{:} \AgdaSymbol{(}\AgdaBound{x} \AgdaSymbol{:} \AgdaBound{A}\AgdaSymbol{)} \AgdaSymbol{→} \AgdaDatatype{SortedList} \AgdaSymbol{(}\AgdaBound{x} \AgdaInductiveConstructor{∷} \AgdaInductiveConstructor{[]}\AgdaSymbol{)}\<% \\ \>[2]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaInductiveConstructor{\_∷\_} \AgdaSymbol{:} \AgdaSymbol{∀} \AgdaSymbol{\{}\AgdaBound{n} \AgdaSymbol{:} \AgdaDatatype{ℕ}\AgdaSymbol{\}} \AgdaSymbol{\{}\AgdaBound{ys} \AgdaSymbol{:} \AgdaDatatype{Vec} \AgdaBound{A} \AgdaBound{n}\AgdaSymbol{\}} \AgdaSymbol{\{}\AgdaBound{zs}\AgdaSymbol{\}}\<% \\ \>[4]\AgdaIndent{10}{}\<[10]% \>[10]\AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{x} \AgdaSymbol{:} \AgdaBound{A}\AgdaSymbol{)}\<% \\ \>[4]\AgdaIndent{10}{}\<[10]% \>[10]\AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{xs} \AgdaSymbol{:} \AgdaDatatype{SortedList} \AgdaBound{ys}\AgdaSymbol{)}\<% \\ \>[4]\AgdaIndent{10}{}\<[10]% \>[10]\AgdaSymbol{→} \AgdaSymbol{(}\AgdaFunction{all} \AgdaSymbol{(λ} \AgdaBound{a} \AgdaSymbol{→} \AgdaBound{x} \AgdaFunction{≤} \AgdaBound{a}\AgdaSymbol{)} \AgdaBound{ys} \AgdaDatatype{≡} \AgdaInductiveConstructor{true}\AgdaSymbol{)}\<% \\ \>[4]\AgdaIndent{10}{}\<[10]% \>[10]\AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{x} \AgdaDatatype{ins} \AgdaBound{ys} \AgdaDatatype{≡} \AgdaBound{zs}\AgdaSymbol{)}\<% \\ \>[4]\AgdaIndent{10}{}\<[10]% \>[10]\AgdaSymbol{→} \AgdaSymbol{(}\AgdaDatatype{SortedList} \AgdaBound{zs}\AgdaSymbol{)}\<% \\ \end{code} Here, the \textit{all} function tests [whether -> (avoid using "or not" after "whether," unless you mean "regardless of whether")] a predicate holds in the entirety of a list, and the \textit{\_ins\_$\equiv$\_} operator should be read as:

diss-easter.tex:593: If x ins xs $\equiv$ ys, then I [can -> (do not confuse with "may")] insert x somewehre in xs to obtain ys.

diss-easter.tex:595: [In order to -> to] define a correct sorting function, we assign the following [type -> (do not use as synonym for "kind of")] signature \footnote{I have encoded the lists as length-indexed vectors [in order to -> to] [ensure -> (use "assure" with people, "ensure" with things, and "insure" when talking about money)] that the [termination -> end] checker accepts my definitions.

diss-easter.tex:595: It [would -> (use "should" if used as conditional statement in the first person or for "shall" in indirect quotation after a verb in past tense.  Consider omitting it for repeated actions)] not have worked by simply using Lists.} \begin{code} \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaFunction{sort} \AgdaSymbol{:} \AgdaSymbol{∀} \AgdaSymbol{\{}\AgdaBound{n} \AgdaSymbol{:} \AgdaDatatype{ℕ}\AgdaSymbol{\}} \AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{xs} \AgdaSymbol{:} \AgdaDatatype{Vec} \AgdaBound{A} \AgdaBound{n}\AgdaSymbol{)} \AgdaSymbol{→} \AgdaSymbol{(}\AgdaDatatype{SortedList} \AgdaBound{xs}\AgdaSymbol{)}\<% \\ \end{code} This definition [can -> (do not confuse with "may")] be read in two ways:

diss-easter.tex:604: From a \textbf{logical} point of view, it is a proof that all lists [can -> (do not confuse with "may")] be sorted.

diss-easter.tex:604: [However -> Means "in whatever way, to whatever extent" inside a sentence and "nevertheless" at the beginning of a sentence.], from a \textbf{computational} point of view, it represents the [type -> (do not use as synonym for "kind of")] signature of all sorting functions that [can -> (do not confuse with "may")] be coded in Agda.

diss-easter.tex:604: I have implemented, as an example, the selection sort [which -> (use "that" if clause is restrictive)] is present in the appendix} This example should prove the expressiveness that dependent typing makes available, as well as [its -> = "it is" or "its"?] capacity for abstraction.

diss-easter.tex:608: Nested Types} [In order to -> to] move on to the Finger Trees, I first have to introduce an [alternative -> Alternative refers to choosing the other of two possibilities. Alternate refers to another element of a set, without connoting choice.] way through which a certain family of invariants [could -> (do not confuse with "may")] be kept true, without using dependent types.

diss-easter.tex:612: Nested types\cite{nested}, also known as irregular types or polymorphic recursions, [can -> (do not confuse with "may")] aid in enforcing structure in data types, such as full binary trees, cyclic structures \cite{cyclic} or square matrices \cite{matrix}.

diss-easter.tex:612: The idea is that when declaring an inductive data structure, occurrences of the [type -> (do not use as synonym for "kind of")] on the right hand side are allowed to appear with different [type -> (do not use as synonym for "kind of")] parameters.

diss-easter.tex:616: List} is an example of a \textbf{regular} data [type -> (do not use as synonym for "kind of")].

diss-easter.tex:616: The recursive call to List is restricted to the [type -> (do not use as synonym for "kind of")] parameter A \begin{code} \\ \>\AgdaKeyword{data} \AgdaDatatype{List} \AgdaSymbol{(}\AgdaBound{A} \AgdaSymbol{:} \AgdaPrimitiveType{Set}\AgdaSymbol{)} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaKeyword{where}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaInductiveConstructor{[]} \AgdaSymbol{:} \AgdaDatatype{List} \AgdaBound{A}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaInductiveConstructor{\_∷\_} \AgdaSymbol{:} \AgdaBound{A} \AgdaSymbol{→} \AgdaDatatype{List} \AgdaBound{A} \AgdaSymbol{→} \AgdaDatatype{List} \AgdaBound{A}\<% \\ \end{code} A slight modification, [which -> (use "that" if clause is restrictive)] recursively calls Lists with the [type -> (do not use as synonym for "kind of")] parameter A x A is used to represent a full binary tree (this has been introduced as Nest \cite{nested}).

diss-easter.tex:634: AgdaKeyword{data} \AgdaDatatype{Nest} \AgdaSymbol{(}\AgdaBound{A} \AgdaSymbol{:} \AgdaPrimitiveType{Set}\AgdaSymbol{)} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaKeyword{where}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaInductiveConstructor{Nil} \AgdaSymbol{:} \AgdaDatatype{Nest} \AgdaBound{A}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaInductiveConstructor{Cons} \AgdaSymbol{:} \AgdaBound{A} \AgdaSymbol{→} \AgdaDatatype{Nest} \AgdaSymbol{(}\AgdaBound{A} \AgdaFunction{×} \AgdaBound{A}\AgdaSymbol{)} \AgdaSymbol{→} \AgdaDatatype{Nest} \AgdaBound{A}\<% \\ \end{code} \begin{code} \\ \>\AgdaFunction{example} \AgdaSymbol{:} \AgdaDatatype{Nest} \AgdaDatatype{ℕ}\<% \\ \>\AgdaFunction{example} \AgdaSymbol{=} \AgdaInductiveConstructor{Cons} \AgdaNumber{1} \AgdaSymbol{(}\AgdaInductiveConstructor{Cons} \AgdaSymbol{(}\AgdaNumber{2} \AgdaInductiveConstructor{,} \AgdaNumber{3}\AgdaSymbol{)} \AgdaSymbol{(}\AgdaInductiveConstructor{Cons} \AgdaSymbol{((}\AgdaNumber{4} \AgdaInductiveConstructor{,} \AgdaNumber{5}\AgdaSymbol{)} \AgdaInductiveConstructor{,} \AgdaSymbol{(}\AgdaNumber{6} \AgdaInductiveConstructor{,} \AgdaNumber{7}\AgdaSymbol{))} \AgdaInductiveConstructor{Nil}\AgdaSymbol{))}\<% \\ \end{code} \begin{figure} \caption{Full Binary Tree} \begin{center} \begin{tikzpicture} [scale = 0.7,level 1/.style = {sibling distance = 5cm, level distance = 1.5cm}, level 2/.style = {sibling distance = 3cm}] \node [arn_n] {1} child{ node [arn_n] {2} child{node [arn_n] {4}} child{node [arn_n] {5}} } child{node [arn_n] {3} child{node [arn_n] {6}} child{node [arn_n] {7}} }; \end{tikzpicture} \end{center} \end{figure} The same [principles -> (a "principle" is a rule, while a "principal" is a person, when used as a noun, or means "chief", when used as an adjective, and the adverb for both words is spelt "principally")] apply in the [case -> Avoid if used to describe the instance of a situation.] of Finger Trees, [which -> (use "that" if clause is restrictive)] is based on a full 2-3 tree, with labels in the leafs [only -> Put "only" right before the word it modifies.].

diss-easter.tex:673: As an aside, I believe that the presence of these nested types make [termination -> end] checking an even harder task [in many cases -> often].

diss-easter.tex:677: Trees} At the base of the FingerTree is a 2-3 tree, with a [further -> "Farther" denotes distance, "further" denotes time or quantity.] constraint that all the leaves must occur on the last level.

diss-easter.tex:679: Using the concept of nested types, presented in the previous section, we [can -> (do not confuse with "may")] encode this constraint in the [type -> (do not use as synonym for "kind of")] [system -> Frequently used without need.].

diss-easter.tex:682: Example 2-3 tree} \label{fig:23tree} \begin{center} \begin{tikzpicture} [scale = 0.7,level 1/.style = {sibling distance = 10cm, level distance = 1.5cm}, level 2/.style = {sibling distance = 4cm}, level 3/.style = {sibling distance = 1.5cm}] \node [node] {} child{ node [node] {} child{node [node] {} child{node [arn_n]{1}} child{node [arn_n]{2}} child{node [arn_n]{3}} } child{node [node] {} child{node [arn_n]{4}} child{node [arn_n]{5}} } child{node [node] {} child{node [arn_n]{6}} child{node [arn_n]{7}} } } child{node [node] {} child{node [node] {} child{node [arn_n]{8}} child{node [arn_n]{9}} child{node [arn_n]{10}}} child{node [node] {} child{node [arn_n]{11}} child{node [arn_n]{12}}} }; \end{tikzpicture} \end{center} \end{figure} Instead of using the pair ($\_\times\_$), we declare a new data [type -> (do not use as synonym for "kind of")] that [can -> (do not confuse with "may")] contain both two and three elements.

diss-easter.tex:722: AgdaKeyword{data} \AgdaDatatype{Node} \AgdaSymbol{(}\AgdaBound{A} \AgdaSymbol{:} \AgdaPrimitiveType{Set}\AgdaSymbol{)} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaKeyword{where}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaInductiveConstructor{Node2} \AgdaSymbol{:} \AgdaBound{A} \AgdaSymbol{→} \AgdaBound{A} \AgdaSymbol{→} \AgdaDatatype{Node} \AgdaBound{A}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaInductiveConstructor{Node3} \AgdaSymbol{:} \AgdaBound{A} \AgdaSymbol{→} \AgdaBound{A} \AgdaSymbol{→} \AgdaBound{A} \AgdaSymbol{→} \AgdaDatatype{Node} \AgdaBound{A}\<% \\ \end{code} To declare the tree, we use a nested [type -> (do not use as synonym for "kind of")].

diss-easter.tex:732: The constructor are called \textit{Zero} and \textit{Succ} in the original paper to signal the origin of the idea as Okasaki's numerical representations (see Appendix \ref{app:numrep}) \begin{code} \\ \>\AgdaKeyword{data} \AgdaDatatype{Tree} \AgdaSymbol{(}\AgdaBound{A} \AgdaSymbol{:} \AgdaPrimitiveType{Set}\AgdaSymbol{)} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaKeyword{where}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaInductiveConstructor{Zero} \AgdaSymbol{:} \AgdaBound{A} \AgdaSymbol{→} \AgdaDatatype{Tree} \AgdaBound{A}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaInductiveConstructor{Succ} \AgdaSymbol{:} \AgdaDatatype{Tree} \AgdaSymbol{(}\AgdaDatatype{Node} \AgdaBound{A}\AgdaSymbol{)} \AgdaSymbol{→} \AgdaDatatype{Tree} \AgdaBound{A}\<% \\ \end{code} As an example, Figure \ref{fig:23tree} [could -> (do not confuse with "may")] be written in Agda as follows (indented in an [attempt -> try] to clarity) \begin{code} \\ \>\AgdaFunction{test-tree} \AgdaSymbol{:} \AgdaDatatype{Tree} \AgdaDatatype{ℕ}\<% \\ \>\AgdaFunction{test-tree} \AgdaSymbol{=} \AgdaInductiveConstructor{Succ}\AgdaSymbol{(}\AgdaInductiveConstructor{Succ}\AgdaSymbol{(}\AgdaInductiveConstructor{Succ}\AgdaSymbol{(}\AgdaInductiveConstructor{Zero}\<% \\ \>[2]\AgdaIndent{14}{}\<[14]% \>[14]\AgdaSymbol{(}\AgdaInductiveConstructor{Node2}\<% \\ \>[14]\AgdaIndent{18}{}\<[18]% \>[18]\AgdaSymbol{(}\AgdaInductiveConstructor{Node3}\<% \\ \>[18]\AgdaIndent{20}{}\<[20]% \>[20]\AgdaSymbol{(}\AgdaInductiveConstructor{Node3} \AgdaNumber{1} \AgdaNumber{2} \AgdaNumber{3}\AgdaSymbol{)}\<% \\ \>[18]\AgdaIndent{20}{}\<[20]% \>[20]\AgdaSymbol{(}\AgdaInductiveConstructor{Node2} \AgdaNumber{4} \AgdaNumber{5}\AgdaSymbol{)}\<% \\ \>[18]\AgdaIndent{20}{}\<[20]% \>[20]\AgdaSymbol{(}\AgdaInductiveConstructor{Node2} \AgdaNumber{6} \AgdaNumber{7}\AgdaSymbol{))}\<% \\ \>[0]\AgdaIndent{18}{}\<[18]% \>[18]\AgdaSymbol{(}\AgdaInductiveConstructor{Node2}\<% \\ \>[18]\AgdaIndent{20}{}\<[20]% \>[20]\AgdaSymbol{(}\AgdaInductiveConstructor{Node3} \AgdaNumber{8} \AgdaNumber{9} \AgdaNumber{10}\AgdaSymbol{)}\<% \\ \>[18]\AgdaIndent{20}{}\<[20]% \>[20]\AgdaSymbol{(}\AgdaInductiveConstructor{Node2} \AgdaNumber{11} \AgdaNumber{12}\AgdaSymbol{))))))}\<% \end{code} \section{Finger Trees} Finger Trees are a data structure introduced by Ralph Hinze and Robert Patinsson, based on Okasaki's [principle -> (a "principle" is a rule, while a "principal" is a person, when used as a noun, or means "chief", when used as an adjective, and the adverb for both words is spelt "principally")] of implicit recursive slowdown.

diss-easter.tex:782: Initially designed as a double ended queue with constant amort[ized -> (words ending in -ized tend suggest usage of American spelling)] time append, their structure, together with the cached measurements, allow specialization to Random Access Sequences, or Priority Queues by simple instantiation.

diss-easter.tex:784: For efficient appending, the tree is surrounded by buffers at each level, [which -> (use "that" if clause is restrictive)] amort[ize -> (words ending in -ize tend suggest usage of American spelling)] the cost.

diss-easter.tex:786: Measurements and the Monoid} The generality of the Finger Tree as a data structures comes from [its -> = "it is" or "its"?] association with a set of measurements (\textit{V}).

diss-easter.tex:790: [Secondly -> second], we need the set V to be the carrier of a Monoid.

diss-easter.tex:793: V \times V) \to V \\ \intertext{And a element in V, [which -> (use "that" if clause is restrictive)] will be called the neutral element, such that the next axioms hold} \\ \forall x \in V, \epsilon \cdot x = x \tag{neutral-left}\\ \forall x \in V, x \cdot \epsilon = x \tag{neutral-right} \\ \forall x, y,z \in V.

diss-easter.tex:800: As the base [case -> Avoid if used to describe the instance of a situation.], an Empty tree should correspond to the neutral element, and leaves in the tree should be mapped using the measurement function.

diss-easter.tex:802: A [further -> "Farther" denotes distance, "further" denotes time or quantity.] consideration we need to make is that of the efficiency.

diss-easter.tex:802: Recomputing these values [would -> (use "should" if used as conditional statement in the first person or for "shall" in indirect quotation after a verb in past tense.  Consider omitting it for repeated actions)] incur a linear time cost for every operation.

diss-easter.tex:802: We [can -> (do not confuse with "may")] amort[ize -> (words ending in -ize tend suggest usage of American spelling)] this cost by keeping cached measurements in all the \textit{joints} of the tree, i.e.

diss-easter.tex:809: The measurements are correct\footnote{•} \end{item[ize -> (words ending in -ize tend suggest usage of American spelling)]} Working in Agda, a dependently typed language, [which -> (use "that" if clause is restrictive)] moreover allows the use of nested types, we [can -> (do not confuse with "may")] keep these invariants soley in the [type -> (do not use as synonym for "kind of")] signature of the Finger Tree.

diss-easter.tex:812: More specifically, \begin{item[ize -> (words ending in -ize tend suggest usage of American spelling)]} \item The nested typing will [ensure -> (use "assure" with people, "ensure" with things, and "insure" when talking about money)] fullness of the tree.

diss-easter.tex:815: Choosing measurements as the [type -> (do not use as synonym for "kind of")] index ensures their correctness.

diss-easter.tex:820: I have included all [related -> (do not use as an intransitive verb: "I get along well with my advisor" instead of "I relate well to my advisor")] implementations I [could -> (do not confuse with "may")] find and I do not guarantee [they -> (do not use as substitute for "each, each one, everybody, every one, anybody, any one, somebody, some one")] are the [only -> Put "only" right before the word it modifies.] ones.

diss-easter.tex:824: This version [can -> (do not confuse with "may")] be found on GitHub\footnote{•}.

diss-easter.tex:824: [Its -> = "it is" or "its"?] mentioned intention is to closely follow the original paper.

diss-easter.tex:824: It also uses introduces the idea of Sizing, although [only -> Put "only" right before the word it modifies.] in the [type -> (do not use as synonym for "kind of")] declaration (and constructors).

diss-easter.tex:824: Since the constraints are not present in functions that modify the data [type -> (do not use as synonym for "kind of")], [they -> (do not use as substitute for "each, each one, everybody, every one, anybody, any one, somebody, some one")] do not really aid correctness proofs.

diss-easter.tex:824: It has no proofs associated with it, and it didn't [type -> (do not use as synonym for "kind of")] [check on -> check] my machine.

diss-easter.tex:826: I have drawn great inspiration from that paper, and I was particularly drawn by a small caveat, [related -> (do not use as an intransitive verb: "I get along well with my advisor" instead of "I relate well to my advisor")] to [termination -> end] checking.\footnote{The respective section is called Dependency Hell} My dissertation proceeds in a similar manner, implementing the finger tree and tackling the invariants in the same way.

diss-easter.tex:828: In addition, I am also proving [further -> "Farther" denotes distance, "further" denotes time or quantity.] properties of the operations, as well as presented a working solution to the [termination -> end] issue.

diss-easter.tex:831: [However -> Means "in whatever way, to whatever extent" inside a sentence and "nevertheless" at the beginning of a sentence.], this implementation diverges from the original specification of the data structure, removing the nesting.

diss-easter.tex:831: The two invariants that I have mentioned are maintained explicitly, [due to -> Synonym for "attributable to", often confused with "through, because of, owing to."] the lack of dependent types.\\ The implementation of this data structure in both Coq and Isabelle, two established theorem provers [might -> (do not confuse with "may")] argue both for the complexity involved, and for [its -> = "it is" or "its"?] [interesting -> Avoid using "interesting" when introducing something. Simply introduce it.] particularities.

diss-easter.tex:836: Abstract Operations} \begin{table}[H] \label{tab:operations} \caption{Summary of operations} \begin{tabular}{c L{7cm} l} \hline Operation & Short Description & Properties \\ \hline cons & Appending an element at the left of the Finger Tree & \begin{tabular}{l} $\Vert x \triangleleft ft \Vert = \Vert x \Vert \cdot \Vert ft \Vert $ \\ $ toList(x \triangleleft ft) = x ∷ toList ft$ \\ \end{tabular}\\ \hline snoc & Appending an element at the right of the Finger Tree & \begin{tabular}{l} $\Vert x \triangleright ft \Vert = \Vert ft \Vert \cdot \Vert x \Vert $ \\ $ toList(x \triangleright ft) = toList ft ++ [ x ] $ \\ \end{tabular}\\ \hline viewL & Deconstructing a FingerTree into [its -> = "it is" or "its"?] first element and the rest of the elements reorgan[ized -> (words ending in -ized tend suggest usage of American spelling)] as a FingerTree & \begin{tabular}{l} $\Vert viewL ft \Vert = \Vert ft \Vert $ \\ $ toList(viewL ft) = toList ft$ \\ \end{tabular}\\ \hline viewR & Deconstructing a FingerTree into [its -> = "it is" or "its"?] last element and the rest of the elements reorgan[ized -> (words ending in -ized tend suggest usage of American spelling)] as a FingerTree & \begin{tabular}{l} $\Vert viewR ft \Vert = \Vert ft \Vert $ \\ $ toList(viewR ft) = toList ft$ \\ \end{tabular}\\ \hline foldL-ft & Similar to the same operation on Lists, equivalent to mentally replacing all the nodes with a call to a given function & \begin{tabular}{l} $ foldL-ft(i, f, ft) = foldl(i, f, toList ft) $ \\ $ foldL-ft(\epsilon, foldfun, ft) = \Vert ft \Vert $ \\ where \\ $ foldfun(a, b) = \Vert a \Vert \cdot b $ \\ \end{tabular}\\ \hline split & Extract an arbitrary element, given by a predicate function \textit{P} and reconstruct the left and right remaining element into two FingerTrees & \begin{tabular}{l} $ \Vert split (i, P, ft) \Vert = \Vert ft \Vert $ \\ \end{tabular}\\ \hline \end{tabular} \end{table} Some of the properties on the rightmost column are being presented in the implementation.

diss-easter.tex:890: [There are -> (a dead phrase; rewrite the sentence and it will probably improve)] properties [which -> (use "that" if clause is restrictive)] [could -> (do not confuse with "may")] not be proven [due to -> Synonym for "attributable to", often confused with "through, because of, owing to."] problems with the \textit{with} operator, [which -> (use "that" if clause is restrictive)] I am presenting in section \ref{sec:with}.

diss-easter.tex:892: The properties [related -> (do not use as an intransitive verb: "I get along well with my advisor" instead of "I relate well to my advisor")] to size ($\Vert\_\Vert$) are proven 'internally', as part of the implementation.

diss-easter.tex:894: Notes} \begin{item[ize -> (words ending in -ize tend suggest usage of American spelling)]} \item add the stuff about starting point, requirements and whatever everyone talks about.

diss-easter.tex:900: Implementation} \section{Finger Trees - Implementation} \subsection{Data [type -> (do not use as synonym for "kind of")] declaration} The Finger Tree is originally polymorphic in two types:

diss-easter.tex:915: [In order to -> to] to mimic Haskell's typeclasses, I have carried around, for each A and V, two constructs:

diss-easter.tex:919: A \rightarrow V$} \end{item[ize -> (words ending in -ize tend suggest usage of American spelling)]} \textbf{Node} corresponds to nodes in the underlying 2-3 tree implementation, having two constructors that contain two and respectively three items.

diss-easter.tex:923: Moreover, \textbf{Node}s [can -> (do not confuse with "may")] [only -> Put "only" right before the word it modifies.] be constructed if provided with a measurement tag and a correctness proof.

diss-easter.tex:927: AgdaKeyword{data} \AgdaDatatype{Node} \AgdaSymbol{\{}\AgdaBound{a}\AgdaSymbol{\}} \AgdaSymbol{(}\AgdaBound{A} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaBound{a}\AgdaSymbol{)(}\AgdaBound{V} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaBound{a} \AgdaSymbol{)}\<% \\ \>[0]\AgdaIndent{10}{}\<[10]% \>[10]\AgdaSymbol{⦃} \AgdaBound{mo} \AgdaSymbol{:} \AgdaRecord{Monoid} \AgdaBound{V} \AgdaSymbol{⦄}\<% \\ \>[0]\AgdaIndent{10}{}\<[10]% \>[10]\AgdaSymbol{⦃} \AgdaBound{m} \AgdaSymbol{:} \AgdaRecord{Measured} \AgdaBound{A} \AgdaBound{V} \AgdaSymbol{⦄} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaBound{a} \AgdaKeyword{where}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaInductiveConstructor{Node2} \AgdaSymbol{:} \AgdaSymbol{(}\AgdaBound{v} \AgdaSymbol{:} \AgdaBound{V}\AgdaSymbol{)}\<% \\ \>[2]\AgdaIndent{8}{}\<[8]% \>[8]\AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{x} \AgdaSymbol{:} \AgdaBound{A}\AgdaSymbol{)} \AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{y} \AgdaSymbol{:} \AgdaBound{A}\AgdaSymbol{)}\<% \\ \>[2]\AgdaIndent{8}{}\<[8]% \>[8]\AgdaSymbol{→} \<[11]% \>[11]\AgdaSymbol{(}\AgdaBound{v} \AgdaDatatype{≡} \AgdaField{∥} \AgdaBound{x} \AgdaField{∥} \AgdaField{∙} \AgdaField{∥} \AgdaBound{y} \AgdaField{∥}\AgdaSymbol{)}\<% \\ \>[2]\AgdaIndent{8}{}\<[8]% \>[8]\AgdaSymbol{→} \AgdaDatatype{Node} \AgdaBound{A} \AgdaBound{V}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaInductiveConstructor{Node3} \AgdaSymbol{:} \AgdaSymbol{(}\AgdaBound{v} \AgdaSymbol{:} \AgdaBound{V}\AgdaSymbol{)}\<% \\ \>[2]\AgdaIndent{8}{}\<[8]% \>[8]\AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{x} \AgdaSymbol{:} \AgdaBound{A}\AgdaSymbol{)} \AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{y} \AgdaSymbol{:} \AgdaBound{A}\AgdaSymbol{)} \AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{z} \AgdaSymbol{:} \AgdaBound{A}\AgdaSymbol{)}\<% \\ \>[2]\AgdaIndent{8}{}\<[8]% \>[8]\AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{v} \AgdaDatatype{≡} \AgdaField{∥} \AgdaBound{x} \AgdaField{∥} \AgdaField{∙} \AgdaField{∥} \AgdaBound{y} \AgdaField{∥} \AgdaField{∙} \AgdaField{∥} \AgdaBound{z} \AgdaField{∥}\AgdaSymbol{)}\<% \\ \>[2]\AgdaIndent{8}{}\<[8]% \>[8]\AgdaSymbol{→} \AgdaDatatype{Node} \AgdaBound{A} \AgdaBound{V}\<% \\ \end{code} \textbf{Digit}s were in presented in the original paper as lists, but this definition limits them to have [one -> When used as a pronoun, it  must be used consistently: One must manage one's money carefully.] to four elements.

diss-easter.tex:965: AgdaKeyword{data} \AgdaDatatype{Digit} \AgdaSymbol{\{}\AgdaBound{a}\AgdaSymbol{\}} \AgdaSymbol{(}\AgdaBound{A} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaBound{a}\AgdaSymbol{):} \AgdaPrimitiveType{Set} \AgdaBound{a} \AgdaKeyword{where}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaInductiveConstructor{[One -> When used as a pronoun, it  must be used consistently: One must manage one's money carefully.]} \<[8]% \>[8]\AgdaSymbol{:} \AgdaBound{A} \AgdaSymbol{→} \AgdaDatatype{Digit} \AgdaBound{A}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaInductiveConstructor{Two} \<[8]% \>[8]\AgdaSymbol{:} \AgdaBound{A} \AgdaSymbol{→} \AgdaBound{A} \AgdaSymbol{→} \AgdaDatatype{Digit} \AgdaBound{A}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaInductiveConstructor{Three} \AgdaSymbol{:} \AgdaBound{A} \AgdaSymbol{→} \AgdaBound{A} \AgdaSymbol{→} \AgdaBound{A} \AgdaSymbol{→} \AgdaDatatype{Digit} \AgdaBound{A}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaInductiveConstructor{Four} \<[8]% \>[8]\AgdaSymbol{:} \AgdaBound{A} \AgdaSymbol{→} \AgdaBound{A} \AgdaSymbol{→} \AgdaBound{A} \AgdaSymbol{→} \AgdaBound{A} \AgdaSymbol{→} \AgdaDatatype{Digit} \AgdaBound{A}\<% \\ \end{code} Finally, the \textbf{FingerTree} is a family of types, indexed by a measurement $\mu$.

diss-easter.tex:983: Note the nested [type -> (do not use as synonym for "kind of")] and the universal quantification over possible sizes for the recursive call.

diss-easter.tex:988: AgdaKeyword{data} \AgdaDatatype{FingerTree} \AgdaSymbol{\{}\AgdaBound{a}\AgdaSymbol{\}} \AgdaSymbol{(}\AgdaBound{A} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaBound{a}\AgdaSymbol{)(}\AgdaBound{V} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaBound{a}\AgdaSymbol{)}\<% \\ \>[2]\AgdaIndent{16}{}\<[16]% \>[16]\AgdaSymbol{⦃} \AgdaBound{mo} \AgdaSymbol{:} \AgdaRecord{Monoid} \AgdaBound{V} \AgdaSymbol{⦄}\<% \\ \>[2]\AgdaIndent{16}{}\<[16]% \>[16]\AgdaSymbol{⦃} \AgdaBound{m} \AgdaSymbol{:} \AgdaRecord{Measured} \AgdaBound{A} \AgdaBound{V} \AgdaSymbol{⦄} \AgdaSymbol{:}\<% \\ \>[2]\AgdaIndent{16}{}\<[16]% \>[16]\AgdaSymbol{\{}\AgdaBound{μ} \AgdaSymbol{:} \AgdaBound{V}\AgdaSymbol{\}} \AgdaSymbol{→} \AgdaPrimitiveType{Set} \AgdaBound{a} \AgdaKeyword{where}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaInductiveConstructor{Empty} \<[9]% \>[9]\AgdaSymbol{:} \<[12]% \>[12]\AgdaDatatype{FingerTree} \AgdaBound{A} \AgdaBound{V} \AgdaSymbol{\{}\AgdaField{ε}\AgdaSymbol{\}}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaInductiveConstructor{Single} \AgdaSymbol{:} \<[12]% \>[12]\AgdaSymbol{(}\AgdaBound{e} \AgdaSymbol{:} \AgdaBound{A}\AgdaSymbol{)} \AgdaSymbol{→} \AgdaDatatype{FingerTree} \AgdaBound{A} \AgdaBound{V} \AgdaSymbol{\{}\AgdaField{∥} \AgdaBound{e} \AgdaField{∥}\AgdaSymbol{\}}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaInductiveConstructor{Deep} \<[9]% \>[9]\AgdaSymbol{:} \<[12]% \>[12]\AgdaSymbol{\{}\AgdaBound{s} \AgdaSymbol{:} \AgdaBound{V}\AgdaSymbol{\}}\<% \\ \>[2]\AgdaIndent{10}{}\<[10]% \>[10]\AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{pr} \AgdaSymbol{:} \AgdaDatatype{Digit} \AgdaBound{A}\AgdaSymbol{)}\<% \\ \>[2]\AgdaIndent{10}{}\<[10]% \>[10]\AgdaSymbol{→} \AgdaDatatype{FingerTree} \AgdaSymbol{(}\AgdaDatatype{Node} \AgdaBound{A} \AgdaBound{V}\AgdaSymbol{)} \AgdaBound{V} \AgdaSymbol{\{}\AgdaBound{s}\AgdaSymbol{\}}\<% \\ \>[2]\AgdaIndent{10}{}\<[10]% \>[10]\AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{sf} \AgdaSymbol{:} \AgdaDatatype{Digit} \AgdaBound{A}\AgdaSymbol{)}\<% \\ \>[2]\AgdaIndent{10}{}\<[10]% \>[10]\AgdaSymbol{→} \AgdaDatatype{FingerTree} \AgdaBound{A} \AgdaBound{V} \AgdaSymbol{\{}\AgdaFunction{measure-digit} \AgdaBound{pr} \AgdaField{∙} \AgdaBound{s} \AgdaField{∙} \AgdaFunction{measure-digit} \AgdaBound{sf}\AgdaSymbol{\}}\<% \\ \end{code} \subparagraph{Smart Constructors} We also build smart constructors that fill in the measurement, provided with the appropriate [number of -> many, several] elements \begin{code} \\ \>\AgdaFunction{node2} \AgdaSymbol{:} \AgdaSymbol{∀} \AgdaSymbol{\{}\AgdaBound{a}\AgdaSymbol{\}} \AgdaSymbol{\{}\AgdaBound{A} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaBound{a}\AgdaSymbol{\}\{}\AgdaBound{V} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaBound{a} \AgdaSymbol{\}}\<% \\ \>[0]\AgdaIndent{8}{}\<[8]% \>[8]\AgdaSymbol{⦃} \AgdaBound{mo} \AgdaSymbol{:} \AgdaRecord{Monoid} \AgdaBound{V} \AgdaSymbol{⦄}\<% \\ \>[0]\AgdaIndent{8}{}\<[8]% \>[8]\AgdaSymbol{⦃} \AgdaBound{m} \AgdaSymbol{:} \AgdaRecord{Measured} \AgdaBound{A} \AgdaBound{V} \AgdaSymbol{⦄}\<% \\ \>[0]\AgdaIndent{8}{}\<[8]% \>[8]\AgdaSymbol{→} \AgdaBound{A} \AgdaSymbol{→} \AgdaBound{A} \AgdaSymbol{→} \AgdaDatatype{Node} \AgdaBound{A} \AgdaBound{V}\<% \\ \>\AgdaFunction{node2} \AgdaBound{x} \AgdaBound{y} \AgdaSymbol{=} \AgdaInductiveConstructor{Node2} \AgdaSymbol{(}\AgdaField{∥} \AgdaBound{x} \AgdaField{∥} \AgdaField{∙} \AgdaField{∥} \AgdaBound{y} \AgdaField{∥}\AgdaSymbol{)} \AgdaBound{x} \AgdaBound{y} \AgdaInductiveConstructor{refl}\<% \\ % \\ \>\AgdaFunction{node3} \AgdaSymbol{:} \AgdaSymbol{∀} \AgdaSymbol{\{}\AgdaBound{a}\AgdaSymbol{\}} \AgdaSymbol{\{}\AgdaBound{A} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaBound{a}\AgdaSymbol{\}\{}\AgdaBound{V} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaBound{a} \AgdaSymbol{\}}\<% \\ \>[0]\AgdaIndent{8}{}\<[8]% \>[8]\AgdaSymbol{⦃} \AgdaBound{mo} \AgdaSymbol{:} \AgdaRecord{Monoid} \AgdaBound{V} \AgdaSymbol{⦄}\<% \\ \>[0]\AgdaIndent{8}{}\<[8]% \>[8]\AgdaSymbol{⦃} \AgdaBound{m} \AgdaSymbol{:} \AgdaRecord{Measured} \AgdaBound{A} \AgdaBound{V} \AgdaSymbol{⦄}\<% \\ \>[0]\AgdaIndent{8}{}\<[8]% \>[8]\AgdaSymbol{→} \AgdaBound{A} \AgdaSymbol{→} \AgdaBound{A} \AgdaSymbol{→} \AgdaBound{A} \AgdaSymbol{→} \AgdaDatatype{Node} \AgdaBound{A} \AgdaBound{V}\<% \\ \>\AgdaFunction{node3} \AgdaBound{x} \AgdaBound{y} \AgdaBound{z} \AgdaSymbol{=} \AgdaInductiveConstructor{Node3} \AgdaSymbol{(}\AgdaField{∥} \AgdaBound{x} \AgdaField{∥} \AgdaField{∙} \AgdaField{∥} \AgdaBound{y} \AgdaField{∥} \AgdaField{∙} \AgdaField{∥} \AgdaBound{z} \AgdaField{∥}\AgdaSymbol{)} \AgdaBound{x} \AgdaBound{y} \AgdaBound{z} \AgdaInductiveConstructor{refl}\<% \\ \end{code} [Considering -> Not followed by "as" when it means "believe to be".] Figure, \ref{fig:ftex1}, I have colour-coded the nodes as follows:

diss-easter.tex:1089: [Firstly -> first], we index on the measurement [in order to -> to] verify the correctness of the measurement in operations such as appending an element or splitting.

diss-easter.tex:1089: [Secondly -> second], the index was chosen [in order to -> to] allow implementing a 'size' that depends on all elements in the finger tree.

diss-easter.tex:1091: [Consider -> Not followed by "as" when it means "believe to be".] a sizing that [would -> (use "should" if used as conditional statement in the first person or for "shall" in indirect quotation after a verb in past tense.  Consider omitting it for repeated actions)] take into account the shape of the tree [only -> Put "only" right before the word it modifies.] (as it is the [case -> Avoid if used to describe the instance of a situation.] of Size described previously).

diss-easter.tex:1105: Bigger Finger Tree} \label{fig:ftex2} \vspace{3mm} \begin{tikzpicture} [scale = 0.7,level 1/.style = {sibling distance = 2cm, level distance = 1.5cm}, level 2/.style = {sibling distance = 4cm, level distance = 1.5cm}, level 3/.style = {sibling distance = 2cm, level distance = 1.5cm}] \node [deep] {} child{node [digit] {+} } child{node [deep] {} child{node [node] {} child{node [digit] {+}} child{node [digit] {+}} } child{node [leaf] {}} child{node [node] {} child{node [digit] {+}} child{node [digit] {+}} } } child{node [digit] {+} }; \end{tikzpicture} \caption{Smaller finger Tree} \label{fig:ftex3} \end{figure} In Figures \ref{fig:ftex2} and \ref{fig:ftex3}, it is an ambiguous question [which -> (use "that" if clause is restrictive)] of the two trees should be [considered -> Not followed by "as" when it means "believe to be".] to have a bigger size.

diss-easter.tex:1132: Size} implements a partial order [between -> (choose "between" 2 options and "among" 3 or more)] data types, with no definite reference points, whereas here we are concerned with an absolute order.

diss-easter.tex:1133: As suggested by Matthew Souzeau \cite{coq}, a sizing that reflects the [number of -> many, several] elements is ideal.

diss-easter.tex:1133: We [can -> (do not confuse with "may")] use the already existing measurement index to achive this goal.

diss-easter.tex:1139: The implementation is straight [forward -> send (if used as verb)] if [there is -> (a dead phrase; rewrite the sentence and it will probably improve)] room in the left-[most -> Do not use as substitute for "almost."] digit.

diss-easter.tex:1141: Ultimately, for the correctness part, we are concerned [whether -> (avoid using "or not" after "whether," unless you mean "regardless of whether")] the output tree is a correct finger tree (enforced by the [type -> (do not use as synonym for "kind of")]) with a correct measurement.

diss-easter.tex:1143: That is, by inserting an element x,} \Vert x \triangleleft ft \Vert = \Vert x \Vert \cdot \Vert ft \Vert \end{align*} \begin{figure}[h!] \centering \subfloat[Before Cons] { \begin{tikzpicture} [scale = 0.7,level 1/.style = {sibling distance = 2cm, level distance = 1.5cm}, level 2/.style = {sibling distance = 2cm, level distance = 1.5cm}, level 3/.style = {sibling distance = 2cm, level distance = 1.5cm}] \node [deep] {} child{node [digit] {$|$1, 2, 3, 4$|$} } child{node [node] {} child {node [leaf] {5}} child {node [leaf] {6}} child {node [leaf] {7}} } child{node [digit] {$|$8$|$} }; \end{tikzpicture} } \qquad \subfloat[After Cons] { \begin{tikzpicture} [scale = 0.7,level 1/.style = {sibling distance = 2cm, level distance = 1.5cm}, level 2/.style = {sibling distance = 4cm, level distance = 1.5cm}, level 3/.style = {sibling distance = 1cm, level distance = 1.5cm}] \node [deep] {} child{node [digit] {$|$0, 1$|$} } child{node [deep] {} child{node [node] {} child{node [leaf] {2}} child{node [leaf] {3}} child{node [leaf] {4}} } child{node [node] {} child{node [leaf] {5}} child{node [leaf] {6}} child{node [leaf] {7}} } } child{node [digit] {$|$8$|$} }; \end{tikzpicture} } \caption{Recursive cons operation} \label{fig:ftex3} \end{figure} \begin{code} \\ \\ \\ \\ \\ \>\AgdaFunction{\_◁\_} \AgdaSymbol{:} \AgdaSymbol{∀} \AgdaSymbol{\{}\AgdaBound{a}\AgdaSymbol{\}} \AgdaSymbol{\{}\AgdaBound{A} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaBound{a}\AgdaSymbol{\}} \AgdaSymbol{\{}\AgdaBound{V} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaBound{a}\AgdaSymbol{\}}\<% \\ \>[2]\AgdaIndent{6}{}\<[6]% \>[6]\AgdaSymbol{⦃} \AgdaBound{mo} \AgdaSymbol{:} \AgdaRecord{Monoid} \AgdaBound{V} \AgdaSymbol{⦄}\<% \\ \>[2]\AgdaIndent{6}{}\<[6]% \>[6]\AgdaSymbol{⦃} \AgdaBound{m} \AgdaSymbol{:} \AgdaRecord{Measured} \AgdaBound{A} \AgdaBound{V} \AgdaSymbol{⦄}\<% \\ \>[2]\AgdaIndent{6}{}\<[6]% \>[6]\AgdaSymbol{\{}\AgdaBound{s} \AgdaSymbol{:} \AgdaBound{V}\AgdaSymbol{\}}\<% \\ \>[2]\AgdaIndent{6}{}\<[6]% \>[6]\AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{x} \AgdaSymbol{:} \AgdaBound{A}\AgdaSymbol{)}\<% \\ \>[2]\AgdaIndent{6}{}\<[6]% \>[6]\AgdaSymbol{→} \AgdaDatatype{FingerTree} \AgdaBound{A} \AgdaBound{V} \AgdaSymbol{⦃} \AgdaBound{mo} \AgdaSymbol{⦄} \AgdaSymbol{⦃} \AgdaBound{m} \AgdaSymbol{⦄} \AgdaSymbol{\{}\AgdaBound{s}\AgdaSymbol{\}}\<% \\ \>[2]\AgdaIndent{6}{}\<[6]% \>[6]\AgdaSymbol{→} \AgdaDatatype{FingerTree} \AgdaBound{A} \AgdaBound{V} \AgdaSymbol{⦃} \AgdaBound{mo} \AgdaSymbol{⦄} \AgdaSymbol{⦃} \AgdaBound{m} \AgdaSymbol{⦄} \AgdaSymbol{\{}\AgdaField{∥} \AgdaBound{x} \AgdaField{∥} \AgdaField{∙} \AgdaBound{s}\AgdaSymbol{\}}\<% \\ \end{code} Each [case -> Avoid if used to describe the instance of a situation.] in the definition is accompanied by a proof that the measurement of the output finger tree is correct [with respect to -> about] the topmost definition.

diss-easter.tex:1227: AgdaFunction{\_◁\_} \AgdaSymbol{\{}\AgdaBound{l}\AgdaSymbol{\}} \AgdaSymbol{\{}\AgdaBound{A}\AgdaSymbol{\}} \AgdaSymbol{\{}\AgdaBound{V}\AgdaSymbol{\}} \AgdaSymbol{⦃} \AgdaBound{mo} \AgdaSymbol{⦄} \AgdaBound{a} \AgdaInductiveConstructor{Empty}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaKeyword{rewrite} \AgdaSymbol{(}\AgdaField{Monoid.ε-right} \AgdaBound{mo}\AgdaSymbol{)} \AgdaField{∥} \AgdaBound{a} \AgdaField{∥}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaSymbol{=} \AgdaInductiveConstructor{Single} \AgdaSymbol{\{}\AgdaBound{l}\AgdaSymbol{\}\{}\AgdaBound{A}\AgdaSymbol{\}\{}\AgdaBound{V}\AgdaSymbol{\}} \AgdaBound{a}\<% \\ \>\AgdaFunction{\_◁\_} \AgdaSymbol{\{}\AgdaBound{l}\AgdaSymbol{\}} \AgdaSymbol{\{}\AgdaBound{A}\AgdaSymbol{\}} \AgdaSymbol{\{}\AgdaBound{V}\AgdaSymbol{\}} \AgdaSymbol{⦃} \AgdaBound{mo} \AgdaSymbol{⦄} \AgdaSymbol{⦃} \AgdaBound{m} \AgdaSymbol{⦄} \AgdaSymbol{\{}\AgdaSymbol{.(}\AgdaField{∥} \AgdaBound{e} \AgdaField{∥}\AgdaSymbol{)}\AgdaSymbol{\}} \AgdaBound{a} \AgdaSymbol{(}\AgdaInductiveConstructor{Single} \AgdaBound{e}\AgdaSymbol{)}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaKeyword{rewrite} \AgdaFunction{assoc-lemma1} \AgdaSymbol{⦃} \AgdaBound{mo} \AgdaSymbol{⦄} \AgdaSymbol{⦃} \AgdaBound{m} \AgdaSymbol{⦄} \AgdaBound{a} \AgdaBound{e}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaSymbol{=} \AgdaInductiveConstructor{Deep} \AgdaSymbol{(}\AgdaInductiveConstructor{[One -> When used as a pronoun, it  must be used consistently: One must manage one's money carefully.]} \AgdaBound{a}\AgdaSymbol{)} \AgdaInductiveConstructor{Empty} \AgdaSymbol{(}\AgdaInductiveConstructor{[One -> When used as a pronoun, it  must be used consistently: One must manage one's money carefully.]} \AgdaBound{e}\AgdaSymbol{)}\<% \\ \>\AgdaBound{a} \AgdaFunction{◁} \AgdaInductiveConstructor{Deep} \AgdaSymbol{(}\AgdaInductiveConstructor{[One -> When used as a pronoun, it  must be used consistently: One must manage one's money carefully.]} \AgdaBound{b}\AgdaSymbol{)} \AgdaBound{ft} \AgdaBound{sf}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaKeyword{rewrite} \AgdaField{∙-assoc} \AgdaSymbol{(}\AgdaField{∥} \AgdaBound{a} \AgdaField{∥}\AgdaSymbol{)} \AgdaSymbol{(}\AgdaField{∥} \AgdaBound{b} \AgdaField{∥}\AgdaSymbol{)} \AgdaSymbol{(}\AgdaFunction{measure-tree} \AgdaBound{ft} \AgdaField{∙} \AgdaFunction{measure-digit} \AgdaBound{sf}\AgdaSymbol{)}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaSymbol{=} \AgdaInductiveConstructor{Deep} \AgdaSymbol{(}\AgdaInductiveConstructor{Two} \AgdaBound{a} \AgdaBound{b}\AgdaSymbol{)} \AgdaBound{ft} \AgdaBound{sf}\<% \\ \>\AgdaBound{a} \AgdaFunction{◁} \AgdaInductiveConstructor{Deep} \AgdaSymbol{(}\AgdaInductiveConstructor{Two} \AgdaBound{b} \AgdaBound{c}\AgdaSymbol{)} \AgdaBound{ft} \AgdaBound{sf}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaKeyword{rewrite} \AgdaField{∙-assoc} \AgdaSymbol{(}\AgdaField{∥} \AgdaBound{a} \AgdaField{∥}\AgdaSymbol{)} \AgdaSymbol{(}\AgdaField{∥} \AgdaBound{b} \AgdaField{∥} \AgdaField{∙} \AgdaField{∥} \AgdaBound{c} \AgdaField{∥}\AgdaSymbol{)} \AgdaSymbol{(}\AgdaFunction{measure-tree} \AgdaBound{ft} \AgdaField{∙} \AgdaFunction{measure-digit} \AgdaBound{sf}\AgdaSymbol{)}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaSymbol{=} \AgdaInductiveConstructor{Deep} \AgdaSymbol{(}\AgdaInductiveConstructor{Three} \AgdaBound{a} \AgdaBound{b} \AgdaBound{c}\AgdaSymbol{)} \AgdaBound{ft} \AgdaBound{sf}\<% \\ \>\AgdaBound{a} \AgdaFunction{◁} \AgdaInductiveConstructor{Deep} \AgdaSymbol{(}\AgdaInductiveConstructor{Three} \AgdaBound{b} \AgdaBound{c} \AgdaBound{d}\AgdaSymbol{)} \AgdaBound{ft} \AgdaBound{sf}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaKeyword{rewrite} \AgdaField{∙-assoc} \AgdaSymbol{(}\AgdaField{∥} \AgdaBound{a} \AgdaField{∥}\AgdaSymbol{)} \AgdaSymbol{(}\AgdaField{∥} \AgdaBound{b} \AgdaField{∥} \AgdaField{∙} \AgdaField{∥} \AgdaBound{c} \AgdaField{∥} \AgdaField{∙} \AgdaField{∥} \AgdaBound{d} \AgdaField{∥}\AgdaSymbol{)} \AgdaSymbol{(}\AgdaFunction{measure-tree} \AgdaBound{ft} \AgdaField{∙} \AgdaFunction{measure-digit} \AgdaBound{sf}\AgdaSymbol{)}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaSymbol{=} \AgdaInductiveConstructor{Deep} \AgdaSymbol{(}\AgdaInductiveConstructor{Four} \AgdaBound{a} \AgdaBound{b} \AgdaBound{c} \AgdaBound{d}\AgdaSymbol{)} \AgdaBound{ft} \AgdaBound{sf}\<% \\ \>\AgdaBound{a} \AgdaFunction{◁} \AgdaInductiveConstructor{Deep} \AgdaSymbol{(}\AgdaInductiveConstructor{Four} \AgdaBound{b} \AgdaBound{c} \AgdaBound{d} \AgdaBound{e}\AgdaSymbol{)} \AgdaBound{ft} \AgdaBound{sf}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaKeyword{rewrite} \AgdaFunction{assoc-lemma2} \AgdaBound{a} \AgdaBound{b} \AgdaBound{c} \AgdaBound{d} \AgdaBound{e} \AgdaSymbol{(}\AgdaFunction{measure-tree} \AgdaBound{ft}\AgdaSymbol{)} \AgdaSymbol{(}\AgdaFunction{measure-digit} \AgdaBound{sf}\AgdaSymbol{)}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaSymbol{=} \AgdaInductiveConstructor{Deep} \AgdaSymbol{(}\AgdaInductiveConstructor{Two} \AgdaBound{a} \AgdaBound{b}\AgdaSymbol{)} \AgdaSymbol{((}\AgdaFunction{node3} \AgdaBound{c} \AgdaBound{d} \AgdaBound{e}\AgdaSymbol{)} \AgdaFunction{◁} \AgdaBound{ft}\AgdaSymbol{)} \AgdaBound{sf}\<% \\ \end{code} The Finger Tree operations are symmetric on the middle, [so -> (do not use as intensifier)] the construction of the snoc operator is exactly dual.

diss-easter.tex:1277: [It's -> = "it is" or "its"?] implementation is provided in the source code.

diss-easter.tex:1279: List}} We will need to prove properties of the finger trees [with respect to -> about] the elements [they -> (do not use as substitute for "each, each one, everybody, every one, anybody, any one, somebody, some one")] contain and their relative position.

diss-easter.tex:1281: Therefore, it is handy to [be able to -> (weak definition)] transform them to lists, as [they -> (do not use as substitute for "each, each one, everybody, every one, anybody, any one, somebody, some one")] encode these properties simply.

diss-easter.tex:1284: This is the conversion [between -> (choose "between" 2 options and "among" 3 or more)] a finger tree and a list\footnote{ toList-dig is a straightforward conversion.}\footnote{flatten-list transforms a list of Nodes into a list of As.} \begin{code} \\ \>\AgdaFunction{toList-ft} \AgdaSymbol{:} \AgdaSymbol{∀} \AgdaSymbol{\{}\AgdaBound{a}\AgdaSymbol{\}\{}\AgdaBound{A} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaBound{a}\AgdaSymbol{\}\{}\AgdaBound{V} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaBound{a} \AgdaSymbol{\}}\<% \\ \>[0]\AgdaIndent{10}{}\<[10]% \>[10]\AgdaSymbol{⦃} \AgdaBound{mo} \AgdaSymbol{:} \AgdaRecord{Monoid} \AgdaBound{V} \AgdaSymbol{⦄}\<% \\ \>[0]\AgdaIndent{10}{}\<[10]% \>[10]\AgdaSymbol{⦃} \AgdaBound{m} \AgdaSymbol{:} \AgdaRecord{Measured} \AgdaBound{A} \AgdaBound{V} \AgdaSymbol{⦄} \AgdaSymbol{\{}\AgdaBound{s} \AgdaSymbol{:} \AgdaBound{V}\AgdaSymbol{\}}\<% \\ \>[0]\AgdaIndent{10}{}\<[10]% \>[10]\AgdaSymbol{→} \AgdaDatatype{FingerTree} \AgdaBound{A} \AgdaBound{V} \AgdaSymbol{\{}\AgdaBound{s}\AgdaSymbol{\}}\<% \\ \>[0]\AgdaIndent{10}{}\<[10]% \>[10]\AgdaSymbol{→} \AgdaDatatype{List} \AgdaBound{A}\<% \\ \>\AgdaFunction{toList-ft} \AgdaInductiveConstructor{Empty} \AgdaSymbol{=} \AgdaInductiveConstructor{[]}\<% \\ \>\AgdaFunction{toList-ft} \AgdaSymbol{(}\AgdaInductiveConstructor{Single} \AgdaBound{x}\AgdaSymbol{)} \AgdaSymbol{=} \AgdaBound{x} \AgdaInductiveConstructor{∷} \AgdaInductiveConstructor{[]}\<% \\ \end{code} \subsection{Proving correctness of the \textit{cons} operator} Assuming that the implementation of list is correct, we [can -> (do not confuse with "may")] define the correctness of the cons operator as follows\footnote{An example term of this [type -> (do not use as synonym for "kind of")] is in the appendix} \begin{code} \\ \>\AgdaFunction{cons-correct} \AgdaSymbol{:} \AgdaSymbol{∀} \AgdaSymbol{\{}\AgdaBound{a}\AgdaSymbol{\}\{}\AgdaBound{A} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaBound{a}\AgdaSymbol{\}\{}\AgdaBound{V} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaBound{a} \AgdaSymbol{\}}\<% \\ \>[6]\AgdaIndent{8}{}\<[8]% \>[8]\AgdaSymbol{⦃} \AgdaBound{mo} \AgdaSymbol{:} \AgdaRecord{Monoid} \AgdaBound{V} \AgdaSymbol{⦄}\<% \\ \>[6]\AgdaIndent{8}{}\<[8]% \>[8]\AgdaSymbol{⦃} \AgdaBound{m} \AgdaSymbol{:} \AgdaRecord{Measured} \AgdaBound{A} \AgdaBound{V} \AgdaSymbol{⦄}\<% \\ \>[6]\AgdaIndent{8}{}\<[8]% \>[8]\AgdaSymbol{\{}\AgdaBound{v} \AgdaSymbol{:} \AgdaBound{V}\AgdaSymbol{\}} \AgdaSymbol{→}\<% \\ \>[6]\AgdaIndent{8}{}\<[8]% \>[8]\AgdaSymbol{(}\AgdaBound{x} \AgdaSymbol{:} \AgdaBound{A}\AgdaSymbol{)} \AgdaSymbol{→}\<% \\ \>[6]\AgdaIndent{8}{}\<[8]% \>[8]\AgdaSymbol{(}\AgdaBound{ft} \AgdaSymbol{:} \AgdaDatatype{FingerTree} \AgdaBound{A} \AgdaBound{V} \AgdaSymbol{\{}\AgdaBound{v}\AgdaSymbol{\})} \AgdaSymbol{→}\<% \\ \>[6]\AgdaIndent{8}{}\<[8]% \>[8]\AgdaFunction{toList-ft} \AgdaSymbol{(}\AgdaBound{x} \AgdaFunction{◁} \AgdaBound{ft}\AgdaSymbol{)} \AgdaDatatype{≡} \AgdaSymbol{(}\AgdaBound{x} \AgdaInductiveConstructor{∷} \AgdaInductiveConstructor{[]}\AgdaSymbol{)} \AgdaFunction{++} \AgdaSymbol{(}\AgdaFunction{toList-ft} \AgdaBound{ft}\AgdaSymbol{)}\<% \\ \end{code} \subsection{View from the Left/Right} As suggested in the original paper, the structure of the finger tree is complicated and users [can -> (do not confuse with "may")] benefit from a higher level representation.

diss-easter.tex:1341: In this [case -> Avoid if used to describe the instance of a situation.], we will 'view' each finger tree as the product [between -> (choose "between" 2 options and "among" 3 or more)] an element and the remaining finger tree.

diss-easter.tex:1346: AgdaKeyword{data} \AgdaDatatype{ViewL} \AgdaSymbol{\{}\AgdaBound{a}\AgdaSymbol{\}(}\AgdaBound{A} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaBound{a}\AgdaSymbol{)(}\AgdaBound{V} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaBound{a}\AgdaSymbol{)}\<% \\ \>[8]\AgdaIndent{10}{}\<[10]% \>[10]\AgdaSymbol{⦃} \AgdaBound{mo} \AgdaSymbol{:} \AgdaRecord{Monoid} \AgdaBound{V} \AgdaSymbol{⦄}\<% \\ \>[8]\AgdaIndent{10}{}\<[10]% \>[10]\AgdaSymbol{⦃} \AgdaBound{m} \AgdaSymbol{:} \AgdaRecord{Measured} \AgdaBound{A} \AgdaBound{V} \AgdaSymbol{⦄} \AgdaSymbol{:}\<% \\ \>[8]\AgdaIndent{10}{}\<[10]% \>[10]\AgdaSymbol{\{}\AgdaBound{s} \AgdaSymbol{:} \AgdaBound{V}\AgdaSymbol{\}} \AgdaSymbol{→} \AgdaPrimitiveType{Set} \AgdaBound{a} \AgdaKeyword{where}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaInductiveConstructor{NilL} \AgdaSymbol{:} \<[10]% \>[10]\AgdaDatatype{ViewL} \AgdaBound{A} \AgdaBound{V} \AgdaSymbol{\{}\AgdaField{ε}\AgdaSymbol{\}}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaInductiveConstructor{ConsL} \AgdaSymbol{:} \AgdaSymbol{∀} \AgdaSymbol{\{}\AgdaBound{z}\AgdaSymbol{\}}\<% \\ \>[2]\AgdaIndent{10}{}\<[10]% \>[10]\AgdaSymbol{(}\AgdaBound{x} \AgdaSymbol{:} \AgdaBound{A}\AgdaSymbol{)}\<% \\ \>[2]\AgdaIndent{10}{}\<[10]% \>[10]\AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{xs} \AgdaSymbol{:} \AgdaDatatype{FingerTree} \AgdaBound{A} \AgdaBound{V} \AgdaSymbol{\{}\AgdaBound{z}\AgdaSymbol{\})}\<% \\ \>[2]\AgdaIndent{10}{}\<[10]% \>[10]\AgdaSymbol{→} \AgdaDatatype{ViewL} \AgdaBound{A} \AgdaBound{V} \AgdaSymbol{\{}\AgdaField{∥} \AgdaBound{x} \AgdaField{∥} \AgdaField{∙} \AgdaBound{z}\AgdaSymbol{\}}\<% \\ \end{code} This data [type -> (do not use as synonym for "kind of")] also enforces the correctness of the measurement, being indexed in the same way as the finger tree.

diss-easter.tex:1377: We need to implement a procedure that transforms [between -> (choose "between" 2 options and "among" 3 or more)] the two.

diss-easter.tex:1379: As it is the [case -> Avoid if used to describe the instance of a situation.] of the Cons operator, [most -> Do not use as substitute for "almost."] cases are superfluous.

diss-easter.tex:1379: The complicated [case -> Avoid if used to describe the instance of a situation.] arises when the leftmost digit contains a single entry.

diss-easter.tex:1384: Before ViewL] { \begin{tikzpicture} [scale = 0.7,level 1/.style = {sibling distance = 2cm, level distance = 1.5cm}, level 2/.style = {sibling distance = 4cm, level distance = 1.5cm}, level 3/.style = {sibling distance = 1cm, level distance = 1.5cm}] \node [deep] {} child{node [digit] {1} } child{node [deep] {} child{node [node] {} child{node [leaf] {2}} child{node [leaf] {3}} child{node [leaf] {4}} } child{node [node] {} child{node [leaf] {5}} child{node [leaf] {6}} child{node [leaf] {7}} } } child{node [digit] {8} }; \end{tikzpicture} } \qquad \subfloat[After ViewL] { \begin{tikzpicture} [scale = 0.7,level 1/.style = {sibling distance = 2cm, level distance = 1.5cm}, level 2/.style = {sibling distance = 2cm, level distance = 1.5cm}, level 3/.style = {sibling distance = 2cm, level distance = 1.5cm}] \node [deep] {} child{node [digit] {2, 3, 4} } child{node [node] {} child {node [leaf] {5}} child {node [leaf] {6}} child {node [leaf] {7}} } child{node [digit] {8} }; \end{tikzpicture} } \caption{ViewL operation ([only -> Put "only" right before the word it modifies.] included the tails)} \label{fig:ftex4} \end{figure} As you [can -> (do not confuse with "may")] see, the composition of cons and viewL is not a no-op, but [they -> (do not use as substitute for "each, each one, everybody, every one, anybody, any one, somebody, some one")] both preserve the order of the elements.

diss-easter.tex:1507: AgdaIndent{2}{}\<[2]% \>[2]\AgdaFunction{deepL} \AgdaSymbol{(}\AgdaInductiveConstructor{just} \AgdaBound{x}\AgdaSymbol{)} \AgdaBound{ft} \AgdaBound{sf} \AgdaSymbol{=} \AgdaInductiveConstructor{Deep} \AgdaBound{x} \AgdaBound{ft} \AgdaBound{sf}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaFunction{deepL} \AgdaInductiveConstructor{nothing} \AgdaBound{ft} \AgdaBound{sf} \AgdaKeyword{with} \AgdaFunction{viewL} \AgdaBound{ft}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaFunction{deepL} \AgdaSymbol{⦃} \AgdaBound{mo} \AgdaSymbol{⦄} \AgdaSymbol{⦃} \AgdaBound{m} \AgdaSymbol{⦄} \AgdaInductiveConstructor{nothing} \AgdaBound{ft} \AgdaBound{sf} \AgdaSymbol{|} \AgdaInductiveConstructor{NilL}\<% \\ \>[2]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaKeyword{rewrite} \AgdaSymbol{(}\AgdaField{Monoid.ε-left} \AgdaBound{mo}\AgdaSymbol{)} \AgdaSymbol{(}\AgdaField{ε} \AgdaField{∙} \AgdaFunction{measure-digit} \AgdaBound{sf}\AgdaSymbol{)}\<% \\ \>[4]\AgdaIndent{10}{}\<[10]% \>[10]\AgdaSymbol{|} \AgdaSymbol{(}\AgdaField{Monoid.ε-left} \AgdaBound{mo}\AgdaSymbol{)} \AgdaSymbol{(}\AgdaFunction{measure-digit} \AgdaBound{sf}\AgdaSymbol{)}\<% \\ \>[0]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaSymbol{=} \AgdaFunction{toTree-dig} \AgdaBound{sf}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaFunction{deepL} \AgdaInductiveConstructor{nothing} \AgdaBound{ft} \AgdaBound{sf} \AgdaSymbol{|} \AgdaInductiveConstructor{ConsL} \AgdaSymbol{(}\AgdaInductiveConstructor{Node2} \AgdaBound{x} \AgdaBound{x₁} \AgdaBound{x₂} \AgdaBound{r}\AgdaSymbol{)} \AgdaBound{x₃}\<% \\ \>[2]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaKeyword{rewrite} \AgdaBound{r}\<% \\ \>[4]\AgdaIndent{10}{}\<[10]% \>[10]\AgdaSymbol{|} \AgdaFunction{assoc-lemma3} \AgdaBound{x₁} \AgdaBound{x₂} \AgdaSymbol{(}\AgdaFunction{measure-tree} \AgdaBound{x₃}\AgdaSymbol{)} \AgdaBound{sf}\<% \\ \>[0]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaSymbol{=} \AgdaInductiveConstructor{Deep} \AgdaSymbol{(}\AgdaInductiveConstructor{Two} \AgdaBound{x₁} \AgdaBound{x₂}\AgdaSymbol{)} \AgdaBound{x₃} \AgdaBound{sf} \AgdaComment{-- Deep (Two x₁ x₂) x₃ sf}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaFunction{deepL} \AgdaInductiveConstructor{nothing} \AgdaBound{ft} \AgdaBound{sf} \AgdaSymbol{|} \AgdaInductiveConstructor{ConsL} \AgdaSymbol{(}\AgdaInductiveConstructor{Node3} \AgdaBound{x} \AgdaBound{x₁} \AgdaBound{x₂} \AgdaBound{x₃} \AgdaBound{r}\AgdaSymbol{)} \AgdaBound{x₄}\<% \\ \>[2]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaKeyword{rewrite} \AgdaBound{r}\<% \\ \>[4]\AgdaIndent{10}{}\<[10]% \>[10]\AgdaSymbol{|} \AgdaFunction{assoc-lemma4} \AgdaBound{x₁} \AgdaBound{x₂} \AgdaBound{x₃} \AgdaSymbol{(}\AgdaFunction{measure-tree} \AgdaBound{x₄}\AgdaSymbol{)} \AgdaBound{sf}\<% \\ \>[0]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaSymbol{=} \AgdaInductiveConstructor{Deep} \AgdaSymbol{(}\AgdaInductiveConstructor{Three} \AgdaBound{x₁} \AgdaBound{x₂} \AgdaBound{x₃}\AgdaSymbol{)} \AgdaBound{x₄} \AgdaBound{sf} \AgdaComment{-- Deep (Three x₁ x₂ x₃) x₄ sf}\<% \\ \end{code} \subsection{Proving Correctness of \textit{viewL}} We [can -> (do not confuse with "may")] proceed in an analogous way to the correctness of cons, by constructing an appropriate to-list conversion for views, and then proving that the list representations coincide.

diss-easter.tex:1555: SaveRestoreHook %\column{B}{@{}>{\hspre}l<{\hspost}@{}}% %\column{15}{@{}>{\hspre}l<{\hspost}@{}}% %\column{E}{@{}>{\hspre}l<{\hspost}@{}}% %\>[B]{}\Varid{viewL}\mathbin{-}\Varid{correct}\mathbin{:}\mathbin{∀}\{\mskip1.5mu \Varid{a}\mskip1.5mu\}\;\{\mskip1.5mu \Conid{A}\mathbin{:}\Conid{Set}\;\Varid{a}\mskip1.5mu\}\;\{\mskip1.5mu \Conid{V}\mathbin{:}\Conid{Set}\;\Varid{a}\mskip1.5mu\}{}\<[E]% %\\ %\>[B]{}\hsindent{15}{}\<[15]% %\>[15]{}\mathbin{⦃}\Varid{mo}\mathbin{:}\Conid{Monoid}\;\Conid{V}\mathbin{⦄}{}\<[E]% %\\ %\>[B]{}\hsindent{15}{}\<[15]% %\>[15]{}\mathbin{⦃}\Varid{m}\mathbin{:}\Conid{Measured}\;\Conid{A}\;\Conid{V}\mathbin{⦄}{}\<[E]% %\\ %\>[B]{}\hsindent{15}{}\<[15]% %\>[15]{}\mathbin{→}\{\mskip1.5mu \Varid{v}\mathbin{:}\Conid{V}\mskip1.5mu\}{}\<[E]% %\\ %\>[B]{}\hsindent{15}{}\<[15]% %\>[15]{}\mathbin{→}(\Varid{ft}\mathbin{:}\Conid{FingerTree}\;\Conid{A}\;\Conid{V}\;\{\mskip1.5mu \Varid{v}\mskip1.5mu\}){}\<[E]% %\\ %\>[B]{}\hsindent{15}{}\<[15]% %\>[15]{}\mathbin{→}(\Varid{toList}\mathbin{-}\Varid{view}\;(\Varid{viewL}\;\Varid{ft})\mathbin{≡}\Varid{toList}\mathbin{-}\Varid{ft}\;\Varid{ft}){}\<[E]% %\ColumnHook %\end{hscode}\resethooks [However -> Means "in whatever way, to whatever extent" inside a sentence and "nevertheless" at the beginning of a sentence.], we stumble upon simple property that is unnecessarily hard to prove.

diss-easter.tex:1580: That is, we [would -> (use "should" if used as conditional statement in the first person or for "shall" in indirect quotation after a verb in past tense.  Consider omitting it for repeated actions)] [like -> Substitute by "as" before phrases or clauses: Our love was beautiful, as love was meant to be.] to prove that $viewL(ft)\equiv NilL \iff ft \equiv Empty$.

diss-easter.tex:1580: This [fact -> Restrict use to matters that can be verified.] is obvious given the associated definitions.

diss-easter.tex:1580: Unfortunately, \textit{Propositional Equality} cannot allow a term of this form, since for an arbitrary $\sigma \in V$, \textit{FingerTree A V} \{$\sigma$\} does not have the same [type -> (do not use as synonym for "kind of")] as Empty.

diss-easter.tex:1582: [However -> Means "in whatever way, to whatever extent" inside a sentence and "nevertheless" at the beginning of a sentence.], the typechecker will get stuck in trying to pattern match on ft.

diss-easter.tex:1584: Indeed, if we try to prove this statement on a simpler version of \textit{FingerTree} that is indexed by Size \footnote{[so -> (do not use as intensifier)] that Empty [can -> (do not confuse with "may")] assume any size [as long as -> when, if] it is smaller [than -> (examine sentences containing "than" to insure that they are not missing words: I love my father more than my mother. I love my father more than my mother loves my father. I love my father more than I love my mother)] [its -> = "it is" or "its"?] FingerTree derivatives (such as Deep sf Empty pr)}, it is a straightforward exercise:

diss-easter.tex:1588: AgdaFunction{view-lemma3} \AgdaSymbol{:} \AgdaSymbol{∀} \AgdaSymbol{\{}\AgdaBound{a}\AgdaSymbol{\}\{}\AgdaBound{A} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaBound{a}\AgdaSymbol{\}} \AgdaSymbol{\{}\AgdaBound{V} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaBound{a} \AgdaSymbol{\}}\<% \\ \>[2]\AgdaIndent{14}{}\<[14]% \>[14]\AgdaSymbol{⦃} \AgdaBound{mo} \AgdaSymbol{:} \AgdaRecord{Monoid} \AgdaBound{V} \AgdaSymbol{⦄}\<% \\ \>[2]\AgdaIndent{14}{}\<[14]% \>[14]\AgdaSymbol{⦃} \AgdaBound{m} \AgdaSymbol{:} \AgdaRecord{Measured} \AgdaBound{A} \AgdaBound{V} \AgdaSymbol{⦄}\<% \\ \>[2]\AgdaIndent{14}{}\<[14]% \>[14]\AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{ft} \AgdaSymbol{:} \AgdaDatatype{FingerTree} \AgdaBound{A} \AgdaBound{V}\AgdaSymbol{)}\<% \\ \>[2]\AgdaIndent{14}{}\<[14]% \>[14]\AgdaSymbol{→} \AgdaSymbol{(}\AgdaFunction{viewL} \AgdaBound{ft} \AgdaDatatype{≡} \AgdaInductiveConstructor{NilL}\AgdaSymbol{)}\<% \\ \>[2]\AgdaIndent{14}{}\<[14]% \>[14]\AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{ft} \AgdaDatatype{≡} \AgdaInductiveConstructor{Empty}\AgdaSymbol{)}\<% \\ \>\AgdaFunction{view-lemma3} \AgdaInductiveConstructor{Empty} \AgdaBound{p} \AgdaSymbol{=} \AgdaInductiveConstructor{refl}\<% \\ \>\AgdaFunction{view-lemma3} \AgdaSymbol{(}\AgdaInductiveConstructor{Single} \AgdaBound{x}\AgdaSymbol{)} \AgdaSymbol{()}\<% \\ \>\AgdaFunction{view-lemma3} \AgdaSymbol{(}\AgdaInductiveConstructor{Deep} \AgdaBound{x} \AgdaBound{x₁} \AgdaBound{ft} \AgdaBound{x₂}\AgdaSymbol{)} \AgdaSymbol{()}\<% \\ \end{code} A solution to this issue was suggested by McKinna\cite{hetero}, using an [alternate -> Alternative refers to choosing the other of two possibilities. Alternate refers to another element of a set, without connoting choice.] implemenation of equality -- \textit{Heterogeneous Equality}, [which -> (use "that" if clause is restrictive)] works across types.

diss-easter.tex:1615: Using heterogeneous equality, we [can -> (do not confuse with "may")] now write the [type -> (do not use as synonym for "kind of")] of the original statement in Agda, as well as pattern-match on the finger tree.

diss-easter.tex:1615: [However -> Means "in whatever way, to whatever extent" inside a sentence and "nevertheless" at the beginning of a sentence.], some problems [related -> (do not use as an intransitive verb: "I get along well with my advisor" instead of "I relate well to my advisor")] to the \textit{with} construct resurface.

diss-easter.tex:1621: Their use [could -> (do not confuse with "may")] not be avoided in the implementation of operators that act on indexed data types.

diss-easter.tex:1621: As part of the [type -> (do not use as synonym for "kind of")] checking, Agda has to unify the [expected -> Use "expect" for simple predictions and "anticipate" for more complex actions in advance of an event.] [type -> (do not use as synonym for "kind of")] of the result and the actual [type -> (do not use as synonym for "kind of")] of the result.

diss-easter.tex:1623: Example.} [Consider -> Not followed by "as" when it means "believe to be".] the implementation of append on Vectors, but with a slight difference [in terms of -> in, for, about (or avoid)] the index of the result.

diss-easter.tex:1623: The [type -> (do not use as synonym for "kind of")]-checker cannot prove that $+$ commutes, since it is not superfluous.

diss-easter.tex:1623: This does not [type -> (do not use as synonym for "kind of")]-check.

diss-easter.tex:1627: AgdaFunction{append} \AgdaSymbol{:} \AgdaSymbol{∀} \AgdaSymbol{\{}\AgdaBound{a} \AgdaBound{n} \AgdaBound{m}\AgdaSymbol{\}} \AgdaSymbol{→} \AgdaSymbol{\{}\AgdaBound{A} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaBound{a}\AgdaSymbol{\}}\<% \\ \>[4]\AgdaIndent{6}{}\<[6]% \>[6]\AgdaSymbol{→} \AgdaDatatype{Vec} \AgdaBound{A} \AgdaBound{n}\<% \\ \>[4]\AgdaIndent{6}{}\<[6]% \>[6]\AgdaSymbol{→} \AgdaDatatype{Vec} \AgdaBound{A} \AgdaBound{m}\<% \\ \>[4]\AgdaIndent{6}{}\<[6]% \>[6]\AgdaSymbol{→} \AgdaDatatype{Vec} \AgdaBound{A} \AgdaSymbol{(}\AgdaBound{m} \AgdaPrimitive{+} \AgdaBound{n}\AgdaSymbol{)}\<% \\ \>\AgdaFunction{append} \AgdaInductiveConstructor{[]} \AgdaBound{ys} \AgdaSymbol{=} \AgdaBound{ys}\<% \\ \>\AgdaFunction{append} \AgdaSymbol{(}\AgdaBound{x} \AgdaInductiveConstructor{∷} \AgdaBound{xs}\AgdaSymbol{)} \AgdaBound{ys} \AgdaSymbol{=} \AgdaBound{x} \AgdaInductiveConstructor{∷} \AgdaFunction{append} \AgdaBound{xs} \AgdaBound{ys}\<% \\ \end{code} The same [situation -> (rewrite)] arises in the proofs about correctness of the measure semantics.

diss-easter.tex:1644: [Due to -> Synonym for "attributable to", often confused with "through, because of, owing to."] the nature of the \textit{Builtin.Equality} relation, I [could -> (do not confuse with "may")] not find a way to expand the functions appropriately, as suggested in the documentation \footnote{http://agda.readthedocs.io/en/latest/language/with-abstraction.html} \subparagraph{Discussion about \textit{with}.}[There is -> (a dead phrase; rewrite the sentence and it will probably improve)] [a number of -> many, several] issues [related -> (do not use as an intransitive verb: "I get along well with my advisor" instead of "I relate well to my advisor")] to the \textit{with} statement that I have stumbled upon.

diss-easter.tex:1650: In the \textit{FingerTree} [case -> Avoid if used to describe the instance of a situation.], this occurs because of the \textit{rewrite} statements present throughout the implementation of \textit{cons}, \textit{viewL}, \textit{deepL} [etc -> "Etc" should be avoided in formal writing.].

diss-easter.tex:1650: This causes a mild inconvenience by having to reiterate the same \textit{rewrite}s whenever [one -> When used as a pronoun, it  must be used consistently: One must manage one's money carefully.] writes proofs about those definitions.

diss-easter.tex:1652: Whenever an argument of a function is hidden by a \textit{with abstraction}, the definition of that function cannot use [further -> "Farther" denotes distance, "further" denotes time or quantity.] with statement containing the abstracted expression of the argument.

diss-easter.tex:1655: The [type -> (do not use as synonym for "kind of")] of terms hidden by \textit{with abstraction} is not available, as the feature of [type -> (do not use as synonym for "kind of")] checking in this conditions has not been implemented.

diss-easter.tex:1657: [There are -> (a dead phrase; rewrite the sentence and it will probably improve)] cases in which the [termination -> end]-checker is confused in the presence of \textit{with} [Consider -> Not followed by "as" when it means "believe to be".] this example, where we try to append an element at the end of a list.

diss-easter.tex:1663: AgdaFunction{snoc} \AgdaSymbol{:} \AgdaSymbol{∀} \AgdaSymbol{\{}\AgdaBound{A}\AgdaSymbol{\}} \AgdaSymbol{→} \AgdaBound{A} \AgdaSymbol{→} \AgdaDatatype{List} \AgdaBound{A} \AgdaSymbol{→} \AgdaDatatype{List} \AgdaBound{A}\<% \\ \>\AgdaFunction{snoc} \AgdaBound{x} \AgdaBound{xs} \AgdaKeyword{with} \AgdaBound{xs}\<% \\ \>\AgdaFunction{snoc} \AgdaBound{x} \AgdaBound{xs} \AgdaSymbol{|} \AgdaInductiveConstructor{[]} \AgdaSymbol{=} \AgdaBound{x} \AgdaInductiveConstructor{∷} \AgdaInductiveConstructor{[]}\<% \\ \>\AgdaFunction{snoc} \AgdaBound{x} \AgdaBound{xs} \AgdaSymbol{|} \AgdaBound{y} \AgdaInductiveConstructor{∷} \AgdaBound{ys} \AgdaSymbol{=} \AgdaBound{y} \AgdaInductiveConstructor{∷} \AgdaSymbol{(}\AgdaFunction{snoc} \AgdaBound{x} \AgdaBound{ys}\AgdaSymbol{)}\<% \\ \end{code} \end{item[ize -> (words ending in -ize tend suggest usage of American spelling)]} Taking this issues into account, I have tried to come up with solutions to some of them.

diss-easter.tex:1677: I should note here that the proofs that I am making are still providing a [powerful -> Overused, especially in computer industry press releases.] verification, since \begin{item[ize -> (words ending in -ize tend suggest usage of American spelling)]} \item The FingerTree maintains all invariants \item The measurement semantics are preserved an used sanely.

diss-easter.tex:1683: Folding} We [can -> (do not confuse with "may")] [further -> "Farther" denotes distance, "further" denotes time or quantity.] implement the fold operation and show [its -> = "it is" or "its"?] correctness.

diss-easter.tex:1685: I will [only -> Put "only" right before the word it modifies.] present, as an example the fold-left implementation.

diss-easter.tex:1687: We [can -> (do not confuse with "may")] extend this to FingerTrees.

diss-easter.tex:1687: Defining folds on \textbf{Node} and \textbf{Digit} is trivial, since [they -> (do not use as substitute for "each, each one, everybody, every one, anybody, any one, somebody, some one")] are just length constrained lists.

diss-easter.tex:1693: AgdaFunction{flatten-list} \AgdaSymbol{:} \AgdaSymbol{∀} \AgdaSymbol{\{}\AgdaBound{a}\AgdaSymbol{\}\{}\AgdaBound{A} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaBound{a}\AgdaSymbol{\}\{}\AgdaBound{V} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaBound{a} \AgdaSymbol{\}}\<% \\ \>[6]\AgdaIndent{14}{}\<[14]% \>[14]\AgdaSymbol{⦃} \AgdaBound{mo} \AgdaSymbol{:} \AgdaRecord{Monoid} \AgdaBound{V} \AgdaSymbol{⦄}\<% \\ \>[6]\AgdaIndent{14}{}\<[14]% \>[14]\AgdaSymbol{⦃} \AgdaBound{m} \AgdaSymbol{:} \AgdaRecord{Measured} \AgdaBound{A} \AgdaBound{V} \AgdaSymbol{⦄}\<% \\ \>[6]\AgdaIndent{14}{}\<[14]% \>[14]\AgdaSymbol{→} \AgdaDatatype{List} \AgdaSymbol{(}\AgdaDatatype{Node} \AgdaBound{A} \AgdaBound{V}\AgdaSymbol{)}\<% \\ \>[6]\AgdaIndent{14}{}\<[14]% \>[14]\AgdaSymbol{→} \AgdaDatatype{List} \AgdaBound{A}\<% \\ \>\AgdaFunction{flatten-list} \AgdaInductiveConstructor{[]} \AgdaSymbol{=} \AgdaInductiveConstructor{[]}\<% \\ \>\AgdaFunction{flatten-list} \AgdaSymbol{(}\AgdaBound{x} \AgdaInductiveConstructor{∷} \AgdaBound{xs}\AgdaSymbol{)} \AgdaSymbol{=} \AgdaSymbol{(}\AgdaFunction{toList-node} \AgdaBound{x}\AgdaSymbol{)} \AgdaFunction{++} \AgdaSymbol{(}\AgdaFunction{flatten-list} \AgdaBound{xs}\AgdaSymbol{)}\<% \\ \end{code} We [can -> (do not confuse with "may")] then implement the foldl on finger trees as:

diss-easter.tex:1717: AgdaFunction{foldl} \AgdaSymbol{:} \AgdaSymbol{∀} \AgdaSymbol{\{}\AgdaBound{a}\AgdaSymbol{\}} \AgdaSymbol{\{}\AgdaBound{A} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaBound{a}\AgdaSymbol{\}} \AgdaSymbol{\{}\AgdaBound{V} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaBound{a}\AgdaSymbol{\}}\<% \\ \>[2]\AgdaIndent{8}{}\<[8]% \>[8]\AgdaSymbol{\{}\AgdaBound{W} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaBound{a}\AgdaSymbol{\}}\<% \\ \>[2]\AgdaIndent{8}{}\<[8]% \>[8]\AgdaSymbol{⦃} \AgdaBound{mo} \AgdaSymbol{:} \AgdaRecord{Monoid} \AgdaBound{V} \AgdaSymbol{⦄}\<% \\ \>[2]\AgdaIndent{8}{}\<[8]% \>[8]\AgdaSymbol{⦃} \AgdaBound{m} \AgdaSymbol{:} \AgdaRecord{Measured} \AgdaBound{A} \AgdaBound{V} \AgdaSymbol{⦄}\<% \\ \>[2]\AgdaIndent{8}{}\<[8]% \>[8]\AgdaSymbol{\{}\AgdaBound{s} \AgdaSymbol{:} \AgdaBound{V}\AgdaSymbol{\}}\<% \\ \>[2]\AgdaIndent{8}{}\<[8]% \>[8]\AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{W} \AgdaSymbol{→} \AgdaBound{A} \AgdaSymbol{→} \AgdaBound{W}\AgdaSymbol{)}\<% \\ \>[2]\AgdaIndent{8}{}\<[8]% \>[8]\AgdaSymbol{→} \AgdaBound{W}\<% \\ \>[2]\AgdaIndent{8}{}\<[8]% \>[8]\AgdaSymbol{→} \AgdaDatatype{FingerTree} \AgdaBound{A} \AgdaBound{V} \AgdaSymbol{\{}\AgdaBound{s}\AgdaSymbol{\}}\<% \\ \>[2]\AgdaIndent{8}{}\<[8]% \>[8]\AgdaSymbol{→} \AgdaBound{W}\<% \\ \>\AgdaFunction{foldl} \AgdaBound{f} \AgdaBound{i} \AgdaInductiveConstructor{Empty} \AgdaSymbol{=} \AgdaBound{i}\<% \\ \>\AgdaFunction{foldl} \AgdaBound{f} \AgdaBound{i} \AgdaSymbol{(}\AgdaInductiveConstructor{Single} \AgdaBound{e}\AgdaSymbol{)} \AgdaSymbol{=} \AgdaBound{f} \AgdaBound{i} \AgdaBound{e}\<% \\ \>\AgdaFunction{foldl} \AgdaSymbol{\{}\AgdaArgument{W} \AgdaSymbol{=} \AgdaBound{W}\AgdaSymbol{\}} \AgdaBound{f} \AgdaBound{i} \AgdaSymbol{(}\AgdaInductiveConstructor{Deep} \AgdaBound{pr} \AgdaBound{ft} \AgdaBound{sf}\AgdaSymbol{)} \AgdaSymbol{=}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaFunction{foldl-dig} \AgdaBound{f} \AgdaSymbol{(}\AgdaFunction{foldl} \AgdaSymbol{(}\AgdaFunction{foldl-node} \AgdaBound{f}\AgdaSymbol{)} \AgdaSymbol{(}\AgdaFunction{foldl-dig} \AgdaBound{f} \AgdaBound{i} \AgdaBound{pr}\AgdaSymbol{)} \AgdaBound{ft}\AgdaSymbol{)} \AgdaBound{sf}\<% \\ \end{code} \subsection{Proving correctness of Fold Left} Next, we will show that the previous implementation is sane, by seeing [whether -> (avoid using "or not" after "whether," unless you mean "regardless of whether")] folding over a finger tree is equivalent to folding over [its -> = "it is" or "its"?] list representation.

diss-easter.tex:1760: AgdaFunction{foldl-correct} \AgdaSymbol{:} \AgdaSymbol{∀} \AgdaSymbol{\{}\AgdaBound{a}\AgdaSymbol{\}} \AgdaSymbol{\{}\AgdaBound{A} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaBound{a}\AgdaSymbol{\}\{}\AgdaBound{V} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaBound{a}\AgdaSymbol{\}}\<% \\ \>[2]\AgdaIndent{14}{}\<[14]% \>[14]\AgdaSymbol{\{}\AgdaBound{W} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaBound{a}\AgdaSymbol{\}}\<% \\ \>[2]\AgdaIndent{14}{}\<[14]% \>[14]\AgdaSymbol{⦃} \AgdaBound{mo} \AgdaSymbol{:} \AgdaRecord{Monoid} \AgdaBound{V} \AgdaSymbol{⦄}\<% \\ \>[2]\AgdaIndent{14}{}\<[14]% \>[14]\AgdaSymbol{⦃} \AgdaBound{m} \AgdaSymbol{:} \AgdaRecord{Measured} \AgdaBound{A} \AgdaBound{V} \AgdaSymbol{⦄}\<% \\ \>[2]\AgdaIndent{14}{}\<[14]% \>[14]\AgdaSymbol{→} \AgdaSymbol{\{}\AgdaBound{s} \AgdaSymbol{:} \AgdaBound{V}\AgdaSymbol{\}}\<% \\ \>[2]\AgdaIndent{14}{}\<[14]% \>[14]\AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{f} \AgdaSymbol{:} \AgdaBound{W} \AgdaSymbol{→} \AgdaBound{A} \AgdaSymbol{→} \AgdaBound{W}\AgdaSymbol{)}\<% \\ \>[2]\AgdaIndent{14}{}\<[14]% \>[14]\AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{σ} \AgdaSymbol{:} \AgdaBound{W}\AgdaSymbol{)}\<% \\ \>[2]\AgdaIndent{14}{}\<[14]% \>[14]\AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{ft} \AgdaSymbol{:} \AgdaDatatype{FingerTree} \AgdaBound{A} \AgdaBound{V} \AgdaSymbol{\{}\AgdaBound{s}\AgdaSymbol{\})}\<% \\ \>[2]\AgdaIndent{14}{}\<[14]% \>[14]\AgdaSymbol{→} \AgdaSymbol{(}\AgdaFunction{foldl} \AgdaBound{f} \AgdaBound{σ} \AgdaBound{ft} \AgdaDatatype{≡} \AgdaFunction{Data.List.foldl} \AgdaBound{f} \AgdaBound{σ} \AgdaSymbol{(}\AgdaFunction{toList-ft} \AgdaBound{ft}\AgdaSymbol{))}\<% \\ \end{code} Furthermore, fold-left has some [interesting -> Avoid using "interesting" when introducing something. Simply introduce it.] properties when it comes to [its -> = "it is" or "its"?] relation to the measurement.

diss-easter.tex:1789: We [can -> (do not confuse with "may")] prove that if we fold over the finger tree using the \textbf{Monoid} and the \textbf{Measure}\footnote{foldfun v x = v ∙ ∥ x ∥} over which it is instantiated, we obtain the same result as the measure.

diss-easter.tex:1817: It consists of a left side, a middle element, and a right side.\footnote{the sides are correct FingerTrees} The same issues occur, as it was the [case -> Avoid if used to describe the instance of a situation.] of viewL.

diss-easter.tex:1819: This turned out to be a [very -> (use sparingly; try to use words that are strong in themselves for emphasis)] difficult task, [so -> (do not use as intensifier)] correctness of this method [can -> (do not confuse with "may")] [only -> Put "only" right before the word it modifies.] be provided [in terms of -> in, for, about (or avoid)] [its -> = "it is" or "its"?] measure, [which -> (use "that" if clause is restrictive)] is being taken care of by the indexing.

diss-easter.tex:1824: As with ViewL, we create an additional data-[type -> (do not use as synonym for "kind of")] that will represent the result.

diss-easter.tex:1824: It is indexed by the measurement, [ensuring -> (use "assure" with people, "ensure" with things, and "insure" when talking about money)] correctness.

diss-easter.tex:1828: AgdaKeyword{data} \AgdaDatatype{Split-d} \AgdaSymbol{\{}\AgdaBound{a}\AgdaSymbol{\}} \AgdaSymbol{(}\AgdaBound{A} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaBound{a}\AgdaSymbol{)} \AgdaSymbol{(}\AgdaBound{V} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaBound{a}\AgdaSymbol{)}\<% \\ \>[2]\AgdaIndent{12}{}\<[12]% \>[12]\AgdaSymbol{⦃} \AgdaBound{mo} \AgdaSymbol{:} \AgdaRecord{Monoid} \AgdaBound{V} \AgdaSymbol{⦄}\<% \\ \>[2]\AgdaIndent{12}{}\<[12]% \>[12]\AgdaSymbol{⦃} \AgdaBound{m} \AgdaSymbol{:} \AgdaRecord{Measured} \AgdaBound{A} \AgdaBound{V} \AgdaSymbol{⦄} \AgdaSymbol{:}\<% \\ \>[2]\AgdaIndent{12}{}\<[12]% \>[12]\AgdaSymbol{\{}\AgdaBound{μ} \AgdaSymbol{:} \AgdaBound{V}\AgdaSymbol{\}} \AgdaSymbol{→} \AgdaPrimitiveType{Set} \AgdaBound{a} \AgdaKeyword{where}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaInductiveConstructor{split-d} \AgdaSymbol{:} \AgdaSymbol{∀} \AgdaSymbol{\{}\AgdaBound{μ₁} \AgdaSymbol{:} \AgdaBound{V}\AgdaSymbol{\}} \AgdaSymbol{\{}\AgdaBound{μ₂} \AgdaSymbol{:} \AgdaBound{V}\AgdaSymbol{\}}\<% \\ \>[2]\AgdaIndent{10}{}\<[10]% \>[10]\AgdaSymbol{→} \AgdaSymbol{(}\AgdaDatatype{FingerTree} \AgdaBound{A} \AgdaBound{V} \AgdaSymbol{\{}\AgdaBound{μ₁}\AgdaSymbol{\})} \<[35]% \>[35]\AgdaComment{-- left side}\<% \\ \>[2]\AgdaIndent{10}{}\<[10]% \>[10]\AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{x} \AgdaSymbol{:} \AgdaBound{A}\AgdaSymbol{)} \<[35]% \>[35]\AgdaComment{-- middle}\<% \\ \>[2]\AgdaIndent{10}{}\<[10]% \>[10]\AgdaSymbol{→} \AgdaSymbol{(}\AgdaDatatype{FingerTree} \AgdaBound{A} \AgdaBound{V} \AgdaSymbol{\{}\AgdaBound{μ₂}\AgdaSymbol{\})} \<[35]% \>[35]\AgdaComment{-- right side}\<% \\ \>[2]\AgdaIndent{10}{}\<[10]% \>[10]\AgdaSymbol{→} \AgdaDatatype{Split-d} \AgdaBound{A} \AgdaBound{V} \AgdaSymbol{\{}\AgdaBound{μ₁} \AgdaField{∙} \AgdaField{∥} \AgdaBound{x} \AgdaField{∥} \AgdaField{∙} \AgdaBound{μ₂}\AgdaSymbol{\}}\<% \\ \end{code} Since this implementation is long a full of necessary proofs about the types, I will [only -> Put "only" right before the word it modifies.] provide the [most -> Do not use as substitute for "almost."] important snippets.

diss-easter.tex:1861: Wrapping things in the Maybe monad [can -> (do not confuse with "may")] confuse the [type -> (do not use as synonym for "kind of")]-checker at times.

diss-easter.tex:1867: AgdaIndent{2}{}\<[2]% \>[2]\AgdaFunction{split-Tree} \AgdaSymbol{:} \AgdaSymbol{∀} \AgdaSymbol{\{}\AgdaBound{a}\AgdaSymbol{\}} \AgdaSymbol{\{}\AgdaBound{A} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaBound{a}\AgdaSymbol{\}} \AgdaSymbol{\{}\AgdaBound{V} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaBound{a}\AgdaSymbol{\}}\<% \\ \>[2]\AgdaIndent{14}{}\<[14]% \>[14]\AgdaSymbol{⦃} \AgdaBound{mo} \AgdaSymbol{:} \AgdaRecord{Monoid} \AgdaBound{V} \AgdaSymbol{⦄}\<% \\ \>[2]\AgdaIndent{14}{}\<[14]% \>[14]\AgdaSymbol{⦃} \AgdaBound{m} \AgdaSymbol{:} \AgdaRecord{Measured} \AgdaBound{A} \AgdaBound{V} \AgdaSymbol{⦄}\<% \\ \>[2]\AgdaIndent{14}{}\<[14]% \>[14]\AgdaSymbol{\{}\AgdaBound{μ} \AgdaSymbol{:} \AgdaBound{V}\AgdaSymbol{\}} \AgdaComment{-- [type -> (do not use as synonym for "kind of")] class information}\<% \\ \>[2]\AgdaIndent{14}{}\<[14]% \>[14]\AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{p} \AgdaSymbol{:} \AgdaBound{V} \AgdaSymbol{→} \AgdaDatatype{Bool}\AgdaSymbol{)} \AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{i} \AgdaSymbol{:} \AgdaBound{V}\AgdaSymbol{)} \AgdaComment{-- predicate and initial value}\<% \\ \>[2]\AgdaIndent{14}{}\<[14]% \>[14]\AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{ft} \AgdaSymbol{:} \AgdaDatatype{FingerTree} \AgdaBound{A} \AgdaBound{V} \AgdaSymbol{\{}\AgdaBound{μ}\AgdaSymbol{\})} \AgdaComment{-- argument}\<% \\ \>[2]\AgdaIndent{14}{}\<[14]% \>[14]\AgdaSymbol{→} \AgdaDatatype{Maybe} \AgdaSymbol{(}\AgdaDatatype{Split-d} \AgdaBound{A} \AgdaBound{V} \AgdaSymbol{\{}\AgdaBound{μ}\AgdaSymbol{\})}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaFunction{split-Tree} \AgdaBound{p} \AgdaBound{i} \AgdaInductiveConstructor{Empty}\<% \\ \>[2]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaSymbol{=} \AgdaInductiveConstructor{nothing} \<[15]% \>[15]\AgdaComment{-- cannot split an empty tree}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaFunction{split-Tree} \AgdaBound{p} \AgdaBound{i} \AgdaSymbol{(}\AgdaInductiveConstructor{Single} \AgdaBound{e}\AgdaSymbol{)}\<% \\ \>[2]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaSymbol{=} \AgdaInductiveConstructor{just} \AgdaSymbol{(}\AgdaFunction{split-Tree-single} \AgdaBound{p} \AgdaBound{i} \AgdaBound{e}\AgdaSymbol{)} \AgdaComment{-- superfluous [case -> Avoid if used to describe the instance of a situation.]}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaFunction{split-Tree} \AgdaBound{p} \AgdaBound{i} \AgdaSymbol{(}\AgdaInductiveConstructor{Deep} \AgdaBound{pr} \AgdaBound{ft} \AgdaBound{sf}\AgdaSymbol{)}\<% \\ \>[2]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaSymbol{=} \AgdaInductiveConstructor{just} \AgdaSymbol{(}\AgdaFunction{split-Tree-if} \AgdaBound{p} \AgdaBound{i} \AgdaBound{pr} \AgdaBound{ft} \AgdaBound{sf} \AgdaFunction{vpr} \AgdaInductiveConstructor{refl} \AgdaFunction{vft} \AgdaInductiveConstructor{refl}\AgdaSymbol{)} \AgdaComment{-- recursive [case -> Avoid if used to describe the instance of a situation.]}\<% \\ \>[2]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaKeyword{where}\<% \\ \>[4]\AgdaIndent{6}{}\<[6]% \>[6]\AgdaFunction{vpr} \AgdaSymbol{=} \AgdaBound{p} \AgdaSymbol{(}\AgdaBound{i} \AgdaField{∙} \AgdaSymbol{(}\AgdaFunction{measure-digit} \AgdaBound{pr}\AgdaSymbol{))}\<% \\ \>[4]\AgdaIndent{6}{}\<[6]% \>[6]\AgdaFunction{vft} \AgdaSymbol{=} \AgdaBound{p} \AgdaSymbol{((}\AgdaBound{i} \AgdaField{∙} \AgdaFunction{measure-digit} \AgdaBound{pr}\AgdaSymbol{)} \AgdaField{∙} \AgdaFunction{measure-tree} \AgdaBound{ft}\AgdaSymbol{)}\<% \\ % \end{code} The \textbf{split-Tree-if} function splits the computation in three cases, depending where the predicate changes to \textit{True}.

diss-easter.tex:1920: This [could -> (do not confuse with "may")] happen after the during the prefix \textbf{pr}, during the nested finger tree \textbf{ft} or during the suffix \textbf{sf} \begin{code} \\ \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaFunction{split-Tree-if} \AgdaSymbol{:} \AgdaSymbol{∀} \AgdaSymbol{\{}\AgdaBound{a}\AgdaSymbol{\}} \AgdaSymbol{\{}\AgdaBound{A} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaBound{a}\AgdaSymbol{\}} \AgdaSymbol{\{}\AgdaBound{V} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaBound{a}\AgdaSymbol{\}}\<% \\ \>[2]\AgdaIndent{16}{}\<[16]% \>[16]\AgdaSymbol{⦃} \AgdaBound{mo} \AgdaSymbol{:} \AgdaRecord{Monoid} \AgdaBound{V} \AgdaSymbol{⦄}\<% \\ \>[2]\AgdaIndent{16}{}\<[16]% \>[16]\AgdaSymbol{⦃} \AgdaBound{m} \AgdaSymbol{:} \AgdaRecord{Measured} \AgdaBound{A} \AgdaBound{V} \AgdaSymbol{⦄}\<% \\ \>[2]\AgdaIndent{16}{}\<[16]% \>[16]\AgdaSymbol{\{}\AgdaBound{μ} \AgdaSymbol{:} \AgdaBound{V}\AgdaSymbol{\}}\<% \\ \>[2]\AgdaIndent{16}{}\<[16]% \>[16]\AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{p} \AgdaSymbol{:} \AgdaBound{V} \AgdaSymbol{→} \AgdaDatatype{Bool}\AgdaSymbol{)} \AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{i} \AgdaSymbol{:} \AgdaBound{V}\AgdaSymbol{)} \<[44]% \>[44]\AgdaComment{-- predicate and initial value}\<% \\ \>[2]\AgdaIndent{16}{}\<[16]% \>[16]\AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{pr} \AgdaSymbol{:} \AgdaDatatype{Digit} \AgdaBound{A}\AgdaSymbol{)} \<[45]% \>[45]\AgdaComment{-- prefix}\<% \\ \>[2]\AgdaIndent{16}{}\<[16]% \>[16]\AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{ft} \AgdaSymbol{:} \AgdaDatatype{FingerTree} \AgdaSymbol{(}\AgdaDatatype{Node} \AgdaBound{A} \AgdaBound{V}\AgdaSymbol{)} \AgdaBound{V} \AgdaSymbol{\{}\AgdaBound{μ}\AgdaSymbol{\})} \AgdaComment{-- nested tree}\<% \\ \>[2]\AgdaIndent{16}{}\<[16]% \>[16]\AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{sf} \AgdaSymbol{:} \AgdaDatatype{Digit} \AgdaBound{A}\AgdaSymbol{)} \<[43]% \>[43]\AgdaComment{-- suffix}\<% \\ \>[2]\AgdaIndent{16}{}\<[16]% \>[16]\AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{vpr} \AgdaSymbol{:} \AgdaDatatype{Bool}\AgdaSymbol{)} \<[43]% \>[43]\AgdaComment{-- value of predicate after prefix}\<% \\ \>[2]\AgdaIndent{16}{}\<[16]% \>[16]\AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{vpr} \AgdaDatatype{≡} \AgdaBound{p} \AgdaSymbol{(}\AgdaBound{i} \AgdaField{∙} \AgdaFunction{measure-digit} \AgdaBound{pr}\AgdaSymbol{))} \AgdaComment{-- correctness check}\<% \\ \>[2]\AgdaIndent{16}{}\<[16]% \>[16]\AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{vft} \AgdaSymbol{:} \AgdaDatatype{Bool}\AgdaSymbol{)} \<[43]% \>[43]\AgdaComment{-- value of predicate after tree}\<% \\ \>[2]\AgdaIndent{16}{}\<[16]% \>[16]\AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{vft} \AgdaDatatype{≡} \AgdaBound{p} \AgdaSymbol{((}\AgdaBound{i} \AgdaField{∙} \AgdaFunction{measure-digit} \AgdaBound{pr}\AgdaSymbol{)} \AgdaField{∙} \AgdaSymbol{(}\AgdaFunction{measure-tree} \AgdaBound{ft}\AgdaSymbol{)))} \AgdaComment{-- check}\<% \\ \>[2]\AgdaIndent{16}{}\<[16]% \>[16]\AgdaSymbol{→} \AgdaDatatype{Split-d} \AgdaBound{A} \AgdaBound{V} \AgdaSymbol{\{(}\AgdaFunction{measure-digit} \AgdaBound{pr}\AgdaSymbol{)} \AgdaField{∙} \AgdaBound{μ} \AgdaField{∙} \AgdaSymbol{(}\AgdaFunction{measure-digit} \AgdaBound{sf}\AgdaSymbol{)\}}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaFunction{split-Tree-if} \AgdaBound{p} \AgdaBound{i} \AgdaBound{pr} \AgdaBound{ft} \AgdaBound{sf} \AgdaInductiveConstructor{false} \AgdaBound{pr1} \AgdaInductiveConstructor{false} \AgdaBound{pr2}\<% \\ \>[2]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaSymbol{=} \AgdaFunction{split-Tree2} \AgdaBound{p} \AgdaSymbol{((}\AgdaBound{i} \AgdaField{∙} \AgdaFunction{measure-digit} \AgdaBound{pr}\AgdaSymbol{)} \AgdaField{∙} \AgdaSymbol{(}\AgdaFunction{measure-tree} \AgdaBound{ft}\AgdaSymbol{))} \AgdaBound{pr} \AgdaBound{ft} \AgdaBound{sf}\<% \\ \>[2]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaComment{-- [case -> Avoid if used to describe the instance of a situation.]2 

diss-easter.tex:1978: AgdaIndent{2}{}\<[2]% \>[2]\AgdaFunction{split-Tree-if} \AgdaBound{p} \AgdaBound{i} \AgdaBound{pr} \AgdaBound{ft} \AgdaBound{sf} \AgdaInductiveConstructor{false} \AgdaBound{pr1} \AgdaInductiveConstructor{true} \AgdaBound{pr2}\<% \\ \>[2]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaSymbol{=} \AgdaFunction{split-Tree3} \AgdaBound{p} \AgdaBound{i} \AgdaBound{pr} \AgdaBound{ft} \AgdaBound{sf} \AgdaSymbol{(}\AgdaFunction{sym} \AgdaBound{pr1}\AgdaSymbol{)} \AgdaSymbol{(}\AgdaFunction{sym} \AgdaBound{pr2}\AgdaSymbol{)}\<% \\ \>[2]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaComment{-- [case -> Avoid if used to describe the instance of a situation.]3 

diss-easter.tex:1987: AgdaIndent{2}{}\<[2]% \>[2]\AgdaFunction{split-Tree-if} \AgdaBound{p} \AgdaBound{i} \AgdaBound{pr} \AgdaBound{ft} \AgdaBound{sf} \AgdaInductiveConstructor{true} \AgdaBound{pr1} \AgdaBound{vft} \AgdaBound{pr2}\<% \\ \>[2]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaSymbol{=} \AgdaFunction{split-Tree1} \AgdaBound{p} \AgdaBound{i} \AgdaBound{pr} \AgdaBound{ft} \AgdaBound{sf}\<% \\ \>[2]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaComment{-- [case -> Avoid if used to describe the instance of a situation.]1 

diss-easter.tex:2000: Other recursive definitions} The difficulties of writing a recursive function that outputs a value of a [type -> (do not use as synonym for "kind of")] dependent on [one -> When used as a pronoun, it  must be used consistently: One must manage one's money carefully.] of the arguments become apparent with the example of reversing.

diss-easter.tex:2004: The implementation of reverse is straight-[forward -> send (if used as verb)] [in terms of -> in, for, about (or avoid)] folding.

diss-easter.tex:2004: We [could -> (do not confuse with "may")], ideally, reverse a FingerTree simply by \begin{center} \textit{reverse ft = foldl \_▷\_ Empty ft} \end{center} [However -> Means "in whatever way, to whatever extent" inside a sentence and "nevertheless" at the beginning of a sentence.], declaring this in this form is impossible because of two resons:

diss-easter.tex:2015: Doing [so -> (do not use as intensifier)] will [however -> Means "in whatever way, to whatever extent" inside a sentence and "nevertheless" at the beginning of a sentence.] yield a specific solution to the reverse function of the FingerTree.

diss-easter.tex:2018: The index of the output FingerTree depends on the argument as well, yielding in this [case -> Avoid if used to describe the instance of a situation.] \begin{center} measure-ft (reverse ft) = foldl foldfun $\epsilon$ (List.reverse (toList-ft ft)) \end{center} \end{item[ize -> (words ending in -ize tend suggest usage of American spelling)]} In this example, the cost of dependent types becomes [very -> (use sparingly; try to use words that are strong in themselves for emphasis)] clear, and [can -> (do not confuse with "may")] be avoided by providing a non-dependent interface.

diss-easter.tex:2053: The [only -> Put "only" right before the word it modifies.] verified property of this is that the result will itself be a correctly constructed FingerTree.

diss-easter.tex:2055: Random Access Sequences} By proper instantiation of the measurement function and monoid, we [can -> (do not confuse with "may")] special[ize -> (words ending in -ize tend suggest usage of American spelling)] the Finger Tree to various data structures.

diss-easter.tex:2061: SizeW and Entry} The \textit{SizeW} is simply a wrapper around \textit{Nat}\footnote{for compatibility with the rest of the implementation, I had to assign an arbitrary universe level \textit{a}} \begin{code} \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaKeyword{data} \AgdaDatatype{SizeW} \AgdaSymbol{\{}\AgdaBound{a}\AgdaSymbol{\}} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaBound{a} \<[26]% \>[26]\AgdaKeyword{where}\<% \\ \>[2]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaInductiveConstructor{size} \AgdaSymbol{:} \AgdaSymbol{∀} \AgdaSymbol{(}\AgdaBound{n} \AgdaSymbol{:} \AgdaDatatype{ℕ}\AgdaSymbol{)} \AgdaSymbol{→} \AgdaDatatype{SizeW} \AgdaSymbol{\{}\AgdaBound{a}\AgdaSymbol{\}}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaFunction{ε} \AgdaSymbol{:} \AgdaSymbol{∀} \AgdaSymbol{\{}\AgdaBound{a} \AgdaSymbol{:} \AgdaPostulate{Level}\AgdaSymbol{\}} \AgdaSymbol{→} \AgdaDatatype{SizeW} \AgdaSymbol{\{}\AgdaBound{a}\AgdaSymbol{\}}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaFunction{ε} \AgdaSymbol{=} \AgdaInductiveConstructor{size} \AgdaNumber{0}\<% \\ % \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaFunction{\_∙\_} \AgdaSymbol{:} \<[9]% \>[9]\AgdaSymbol{∀} \AgdaSymbol{\{}\AgdaBound{a}\AgdaSymbol{\}} \AgdaSymbol{→} \AgdaDatatype{SizeW} \AgdaSymbol{\{}\AgdaBound{a}\AgdaSymbol{\}} \AgdaSymbol{→} \AgdaDatatype{SizeW} \AgdaSymbol{\{}\AgdaBound{a}\AgdaSymbol{\}} \AgdaSymbol{→} \AgdaDatatype{SizeW} \AgdaSymbol{\{}\AgdaBound{a}\AgdaSymbol{\}}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaInductiveConstructor{size} \AgdaBound{n} \AgdaFunction{∙} \AgdaInductiveConstructor{size} \AgdaBound{m} \AgdaSymbol{=} \AgdaInductiveConstructor{size} \AgdaSymbol{(}\AgdaBound{n} \AgdaPrimitive{+} \AgdaBound{m}\AgdaSymbol{)}\<% \\ \end{code} The properties of the \textit{Nat} carries directly to\textit{SizeW}, [so -> (do not use as intensifier)] that we [can -> (do not confuse with "may")] populate a \textit{Monoid SizeW} \begin{code} \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaKeyword{instance} \AgdaFunction{size-monoid} \AgdaSymbol{:} \AgdaSymbol{∀} \AgdaSymbol{\{}\AgdaBound{a}\AgdaSymbol{\}} \AgdaSymbol{→} \AgdaRecord{Monoid} \AgdaSymbol{(}\AgdaDatatype{SizeW} \AgdaSymbol{\{}\AgdaBound{a}\AgdaSymbol{\})}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaFunction{size-monoid} \AgdaSymbol{=} \AgdaInductiveConstructor{monoid} \AgdaFunction{ε} \AgdaFunction{\_∙\_} \AgdaFunction{ε∙} \AgdaFunction{∙ε} \AgdaFunction{∙-assoc} \AgdaDatatype{\_<ᵗ\_}\<% \\ \end{code} \textit{Entry A} is a wrapper around elements of [type -> (do not use as synonym for "kind of")] A, given by the constructor \textit{entry}.

diss-easter.tex:2130: AgdaIndent{4}{}\<[4]% \>[4]\AgdaFunction{Seq} \AgdaSymbol{:} \AgdaSymbol{∀} \AgdaSymbol{\{}\AgdaBound{a}\AgdaSymbol{\}(}\AgdaBound{A} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaBound{a}\AgdaSymbol{)} \AgdaBound{SizeW} \AgdaSymbol{→} \AgdaPrimitiveType{Set} \AgdaBound{a}\<% \\ \>[0]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaFunction{Seq} \AgdaSymbol{\{}\AgdaBound{a}\AgdaSymbol{\}} \AgdaBound{A} \AgdaBound{s} \AgdaSymbol{=} \AgdaDatatype{FingerTree} \AgdaSymbol{(}\AgdaDatatype{Entry} \AgdaBound{A}\AgdaSymbol{)} \AgdaSymbol{(}\AgdaDatatype{SizeW} \AgdaSymbol{\{}\AgdaBound{a}\AgdaSymbol{\})} \AgdaSymbol{\{}\AgdaBound{s}\AgdaSymbol{\}}\<% \\ \end{code} \paragraph{Retrieving the nth element} \mbox{} \\ The naive implementation [would -> (use "should" if used as conditional statement in the first person or for "shall" in indirect quotation after a verb in past tense.  Consider omitting it for repeated actions)] simply call the \textit{viewL} n times, yielding an amort[ized -> (words ending in -ized tend suggest usage of American spelling)] linear cost.

diss-easter.tex:2141: [However -> Means "in whatever way, to whatever extent" inside a sentence and "nevertheless" at the beginning of a sentence.], we [can -> (do not confuse with "may")] find an $\mathcal{O}(log(n))$ implementation, by using \textit{split}.

diss-easter.tex:2141: The predicate checks [whether -> (avoid using "or not" after "whether," unless you mean "regardless of whether")] the current value is smaller [than -> (examine sentences containing "than" to insure that they are not missing words: I love my father more than my mother. I love my father more than my mother loves my father. I love my father more than I love my mother)] n, and we will start iterating from 0.

diss-easter.tex:2160: Setting an element} \mbox{} \\ This also suggests a possible implementation for setting an element, [which -> (use "that" if clause is restrictive)] is rather inefficient, but provided for completeness, using Finger Tree concatenation.

diss-easter.tex:2165: AgdaIndent{4}{}\<[4]% \>[4]\AgdaFunction{set} \AgdaSymbol{:} \AgdaSymbol{∀} \AgdaSymbol{\{}\AgdaBound{a}\AgdaSymbol{\}\{}\AgdaBound{A} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaBound{a}\AgdaSymbol{\}\{}\AgdaBound{s} \AgdaSymbol{:} \AgdaDatatype{SizeW}\AgdaSymbol{\}} \AgdaSymbol{→} \AgdaFunction{Seq} \AgdaBound{A} \AgdaBound{s} \AgdaSymbol{→} \AgdaDatatype{ℕ} \AgdaSymbol{→} \AgdaBound{A} \AgdaSymbol{→} \AgdaFunction{Seq} \AgdaBound{A} \AgdaBound{s}\<% \\ \>[0]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaFunction{set} \AgdaBound{seq} \AgdaBound{n} \AgdaBound{y} \AgdaKeyword{with} \AgdaFunction{split-Tree} \AgdaSymbol{(λ} \AgdaBound{x} \AgdaSymbol{→} \AgdaInductiveConstructor{size} \AgdaBound{n} \AgdaFunction{SizeW.<ˢ} \AgdaBound{x}\AgdaSymbol{)} \AgdaFunction{SizeW.ε} \AgdaBound{seq}\<% \\ \>[0]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaFunction{set} \AgdaBound{seq} \AgdaBound{n} \AgdaBound{y} \AgdaSymbol{|} \AgdaInductiveConstructor{just} \AgdaSymbol{(}\AgdaInductiveConstructor{split-d} \AgdaBound{left} \AgdaBound{x} \AgdaBound{right}\AgdaSymbol{)}\<% \\ \>[4]\AgdaIndent{6}{}\<[6]% \>[6]\AgdaKeyword{rewrite} \AgdaField{∙-assoc} \AgdaSymbol{(}\AgdaFunction{measure-tree} \AgdaBound{left}\AgdaSymbol{)}\<% \\ \>[6]\AgdaIndent{22}{}\<[22]% \>[22]\AgdaSymbol{(}\AgdaInductiveConstructor{size} \AgdaNumber{1}\AgdaSymbol{)}\<% \\ \>[6]\AgdaIndent{22}{}\<[22]% \>[22]\AgdaSymbol{(}\AgdaFunction{measure-tree} \AgdaBound{right}\AgdaSymbol{)}\<% \\ \>[0]\AgdaIndent{6}{}\<[6]% \>[6]\AgdaSymbol{=} \AgdaFunction{concat} \AgdaSymbol{((}\AgdaInductiveConstructor{entry} \AgdaBound{y}\AgdaSymbol{)} \AgdaFunction{▷} \AgdaBound{left}\AgdaSymbol{)} \AgdaBound{right}\<% \\ \>[0]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaFunction{set} \AgdaBound{seq} \AgdaBound{n} \AgdaBound{y} \AgdaSymbol{|} \AgdaInductiveConstructor{nothing} \AgdaSymbol{=} \AgdaBound{seq}\<% \\ \end{code} \section{Writing recursive definitions} As mentioned in section whatever, the use of \textit{with} [can -> (do not confuse with "may")] sometimes confuse the [termination -> end] checker.

diss-easter.tex:2193: This, combined with the nature of the \textit{viewL}, makes it hard to make us of the abstraction brought by deconstructing FingerTrees as we [would -> (use "should" if used as conditional statement in the first person or for "shall" in indirect quotation after a verb in past tense.  Consider omitting it for repeated actions)] deconstruct [normal -> (weak definition)] Linked Lists.

diss-easter.tex:2195: In fact, Agda's [termination -> end] checker cannot prove that, for any finger tree \textit{ft}, viewL (x \textit{cons} ft) is structurally bigger [than -> (examine sentences containing "than" to insure that they are not missing words: I love my father more than my mother. I love my father more than my mother loves my father. I love my father more than I love my mother)] ft.

diss-easter.tex:2195: The reason is that the \textit{cons} operator has to be [performed -> done] before the call to viewL.

diss-easter.tex:2197: It has been suggested in Matthiew Souzeau's paper \cite{coq} that to overcome this problem, [one -> When used as a pronoun, it  must be used consistently: One must manage one's money carefully.] must find a suitable indexing that reflects the [number of -> many, several] elements in the Finger Tree.

diss-easter.tex:2199: Well founded induction} [In order to -> to] write a recursive definition against these constraints, we need to convert an arbitrary well founded relation to a structural [less -> Use "less" for quantities and "fewer" for numbers.]-[than -> (examine sentences containing "than" to insure that they are not missing words: I love my father more than my mother. I love my father more than my mother loves my father. I love my father more than I love my mother)] relation.

diss-easter.tex:2203: In this [case -> Avoid if used to describe the instance of a situation.], concerning \textit{SizeW}, the well founded relation comes free from the natural ordering of Nat.

diss-easter.tex:2207: By implementing the accessibility relation in Agda, we transform any given order into the structural order [which -> (use "that" if clause is restrictive)] Agda recogn[izes -> (words ending in -izes tend suggest usage of American spelling)].

diss-easter.tex:2209: Packing the Sequence} The ordering of the sizes naturally extends to an ordering of the Sequences, [so -> (do not use as intensifier)] that removing an element from a Sequence necessarily yields a smaller Sequence.

diss-easter.tex:2213: In this [case -> Avoid if used to describe the instance of a situation.], we [can -> (do not confuse with "may")] use Larry Paulson's results \footnote{also implemented in the standard library} to construct a Well-Founded relation on Sequences it is [sufficient -> enough] to have a Well-Founded relation on the Sizes.

diss-easter.tex:2217: AgdaIndent{6}{}\<[6]% \>[6]\AgdaComment{-- [comparing -> "Compare" to points out resemblances, "compare with" points out differences.] Seq-pairs is just [comparing -> "Compare" to points out resemblances, "compare with" points out differences.] the size component}\<% \\ \>[4]\AgdaIndent{6}{}\<[6]% \>[6]\AgdaFunction{\_⋖\_} \AgdaSymbol{:} \AgdaSymbol{∀} \AgdaSymbol{\{}\AgdaBound{a}\AgdaSymbol{\}} \AgdaSymbol{\{}\AgdaBound{A} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaBound{a}\AgdaSymbol{\}} \AgdaSymbol{→} \AgdaFunction{Seq-pair} \AgdaBound{A} \AgdaSymbol{→} \AgdaFunction{Seq-pair} \AgdaBound{A} \AgdaSymbol{→} \AgdaPrimitiveType{Set} \AgdaBound{a}\<% \\ \>[4]\AgdaIndent{6}{}\<[6]% \>[6]\AgdaFunction{\_⋖\_} \AgdaSymbol{=} \AgdaDatatype{\_<<\_} \AgdaFunction{on} \AgdaFunction{to-size}\<% \\ % \\ \>[4]\AgdaIndent{6}{}\<[6]% \>[6]\AgdaKeyword{open} \AgdaModule{Inverse-image}\<% \\ \>[6]\AgdaIndent{8}{}\<[8]% \>[8]\AgdaSymbol{\{}\AgdaArgument{A} \AgdaSymbol{=} \AgdaFunction{Seq-pair} \AgdaBound{A}\AgdaSymbol{\}}\<% \\ \>[6]\AgdaIndent{8}{}\<[8]% \>[8]\AgdaSymbol{\{}\AgdaArgument{\_<\_} \AgdaSymbol{=} \AgdaDatatype{\_<<\_}\AgdaSymbol{\}}\<% \\ \>[6]\AgdaIndent{8}{}\<[8]% \>[8]\AgdaFunction{to-size}\<% \\ \>[6]\AgdaIndent{8}{}\<[8]% \>[8]\AgdaKeyword{renaming} \AgdaSymbol{(}well-founded \AgdaSymbol{to} <<-<-wf\AgdaSymbol{)}\<% \\ \end{code} \begin{code} % \\ \>[0]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaComment{-- the comparison of the Seq-pair is well-founded}\<% \\ \>[4]\AgdaIndent{6}{}\<[6]% \>[6]\AgdaFunction{<-WF} \AgdaSymbol{=} \AgdaFunction{<<-<-wf} \AgdaFunction{<<-WF}\<% \\ \>[4]\AgdaIndent{6}{}\<[6]% \>[6]\AgdaKeyword{open} \AgdaModule{WF.}\AgdaModule{All} \AgdaSymbol{(}\AgdaFunction{<-WF}\AgdaSymbol{)} \AgdaKeyword{renaming} \AgdaSymbol{(}wfRec \AgdaSymbol{to} <rec\AgdaSymbol{)}\<% \\ % \\ \end{code} Having obtained a proof of the well-foundeness, we [can -> (do not confuse with "may")] proceed by creating a recursor object and writing a recursive definition.

diss-easter.tex:2271: AgdaIndent{6}{}\<[6]% \>[6]\AgdaFunction{rev} \AgdaSymbol{:} \AgdaFunction{Seq-pair} \AgdaBound{A} \AgdaSymbol{→} \AgdaFunction{Seq-pair} \AgdaBound{A}\<% \\ \>[0]\AgdaIndent{6}{}\<[6]% \>[6]\AgdaFunction{rev} \AgdaBound{π} \AgdaSymbol{=} \AgdaFunction{<rec} \AgdaBound{a} \AgdaSymbol{\_} \AgdaFunction{go} \AgdaBound{π}\<% \\ \>[6]\AgdaIndent{8}{}\<[8]% \>[8]\AgdaKeyword{module} \AgdaModule{Rev} \AgdaKeyword{where}\<% \\ \>[6]\AgdaIndent{8}{}\<[8]% \>[8]\AgdaFunction{go} \AgdaSymbol{:} \AgdaSymbol{∀} \AgdaBound{s} \AgdaSymbol{→} \AgdaSymbol{(∀} \AgdaBound{p} \AgdaSymbol{→} \AgdaBound{p} \AgdaFunction{⋖} \AgdaBound{s} \AgdaSymbol{→} \AgdaFunction{Seq-pair} \AgdaBound{A}\AgdaSymbol{)} \AgdaSymbol{→} \AgdaFunction{Seq-pair} \AgdaBound{A}\<% \\ \>[6]\AgdaIndent{8}{}\<[8]% \>[8]\AgdaFunction{go} \AgdaInductiveConstructor{⟨} \AgdaBound{fst} \AgdaInductiveConstructor{,} \AgdaBound{snd} \AgdaInductiveConstructor{⟩} \AgdaBound{rec} \AgdaKeyword{with} \AgdaFunction{viewL} \AgdaBound{snd}\<% \\ \>[6]\AgdaIndent{8}{}\<[8]% \>[8]\AgdaFunction{go} \AgdaInductiveConstructor{⟨} \AgdaSymbol{.(}\AgdaInductiveConstructor{size} \AgdaNumber{0}\AgdaSymbol{)} \AgdaInductiveConstructor{,} \AgdaBound{snd} \AgdaInductiveConstructor{⟩} \AgdaBound{rec} \AgdaSymbol{|} \AgdaInductiveConstructor{NilL} \AgdaSymbol{=} \AgdaFunction{pack} \AgdaInductiveConstructor{Empty}\<% \\ \>[6]\AgdaIndent{8}{}\<[8]% \>[8]\AgdaFunction{go} \AgdaInductiveConstructor{⟨} \AgdaSymbol{\_} \AgdaInductiveConstructor{,} \AgdaBound{snd} \AgdaInductiveConstructor{⟩} \AgdaBound{rec} \AgdaSymbol{|} \AgdaInductiveConstructor{ConsL} \AgdaBound{x} \AgdaBound{xs} \AgdaSymbol{=}\<% \\ \>[8]\AgdaIndent{12}{}\<[12]% \>[12]\AgdaBound{rec} \AgdaSymbol{(}\AgdaFunction{pack} \AgdaSymbol{(}\AgdaBound{xs}\AgdaSymbol{))} \AgdaSymbol{(}\AgdaFunction{[one -> When used as a pronoun, it  must be used consistently: One must manage one's money carefully.]-step-lemma} \AgdaSymbol{(}\AgdaFunction{measure-tree} \AgdaBound{xs}\AgdaSymbol{))} \AgdaFunction{▷'} \AgdaBound{x}\<% \\ \end{code} It is arguable [whether -> (avoid using "or not" after "whether," unless you mean "regardless of whether")] this is actually a solution to the abstraction problem.

diss-easter.tex:2297: [However -> Means "in whatever way, to whatever extent" inside a sentence and "nevertheless" at the beginning of a sentence.], the solution itself is probably [less -> Use "less" for quantities and "fewer" for numbers.] readable [than -> (examine sentences containing "than" to insure that they are not missing words: I love my father more than my mother. I love my father more than my mother loves my father. I love my father more than I love my mother)] a solution that reverses directly on the Finger Tree.

diss-easter.tex:2299: No correctness is enforced by the typing [system -> Frequently used without need.].

diss-easter.tex:2301: For simple properties,} it is [sufficient -> enough] to output a new dependent [type -> (do not use as synonym for "kind of")] that enforces those property.

diss-easter.tex:2303: At the time of implementation, I had not real[ized -> (words ending in -ized tend suggest usage of American spelling)] this trick yet.

diss-easter.tex:2303: It [would -> (use "should" if used as conditional statement in the first person or for "shall" in indirect quotation after a verb in past tense.  Consider omitting it for repeated actions)] be an [interesting -> Avoid using "interesting" when introducing something. Simply introduce it.] extension to change the mechanism employed by the \textit{rewrite} to use something [like -> Substitute by "as" before phrases or clauses: Our love was beautiful, as love was meant to be.] this, and allow using Equality-Reasoning for [type -> (do not use as synonym for "kind of")]-level equality} \begin{code} \\ \>[4]\AgdaIndent{6}{}\<[6]% \>[6]\AgdaKeyword{data} \AgdaDatatype{Same-Size-Seq} \AgdaSymbol{:} \AgdaSymbol{(}\AgdaBound{s} \AgdaSymbol{:} \AgdaDatatype{SizeW} \AgdaSymbol{\{}\AgdaBound{a}\AgdaSymbol{\})} \AgdaSymbol{→} \AgdaPrimitiveType{Set} \AgdaBound{a} \AgdaKeyword{where}\<% \\ \>[6]\AgdaIndent{8}{}\<[8]% \>[8]\AgdaInductiveConstructor{ssseq} \AgdaSymbol{:} \AgdaSymbol{∀} \AgdaSymbol{\{}\AgdaBound{s}\AgdaSymbol{\}} \AgdaSymbol{\{}\AgdaBound{z}\AgdaSymbol{\}} \AgdaSymbol{→} \AgdaSymbol{(}\AgdaFunction{Seq} \AgdaBound{A} \AgdaBound{s}\AgdaSymbol{)} \AgdaSymbol{→} \AgdaSymbol{(}\AgdaFunction{Seq} \AgdaBound{A} \AgdaBound{z}\AgdaSymbol{)} \AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{s} \AgdaDatatype{≡} \AgdaBound{z}\AgdaSymbol{)} \AgdaSymbol{→} \AgdaDatatype{Same-Size-Seq} \AgdaBound{s}\<% \\ % \end{code} Reimplementing the \textbf{rev} method with this output [type -> (do not use as synonym for "kind of")] is straight-[forward -> send (if used as verb)] and achieves the correctness goal.

diss-easter.tex:2318: For arbitrary properties,} a [powerful -> Overused, especially in computer industry press releases.] approach [would -> (use "should" if used as conditional statement in the first person or for "shall" in indirect quotation after a verb in past tense.  Consider omitting it for repeated actions)] be to make the induction process obvious \begin{code} \\ \>[0]\AgdaIndent{6}{}\<[6]% \>[6]\AgdaFunction{property} \AgdaSymbol{:} \AgdaFunction{Seq-pair} \AgdaBound{A} \AgdaSymbol{→} \AgdaPrimitiveType{Set} \AgdaBound{a}\<% \\ \end{code} The problem that remains is proving the inductive step.

diss-easter.tex:2365: Data-Sequence.html} \item It is based on the existence of a monad and a measurement function, whose assumptions provide [interesting -> Avoid using "interesting" when introducing something. Simply introduce it.] starting points for proofs.

diss-easter.tex:2369: It is a nested [type -> (do not use as synonym for "kind of")], therefore not widely supported in functional languages.

diss-easter.tex:2369: Isabelle, [which -> (use "that" if clause is restrictive)] is forced to redefine the data structure accordingly} \item It allowed a non-trivial index in the dependent implementation, namely the measure.

diss-easter.tex:2373: It is a good example to outline the limitations of languages [like -> Substitute by "as" before phrases or clauses: Our love was beautiful, as love was meant to be.] agda [with respect to -> about] the [termination -> end] checker.

diss-easter.tex:2378: I will therefore [compare -> "Compare" to points out resemblances, "compare with" points out differences.] two instances of the Random Access Sequence, [one -> When used as a pronoun, it  must be used consistently: One must manage one's money carefully.] using the implementation of the FingerTree as presented in the Implementation section, and the other [one -> When used as a pronoun, it  must be used consistently: One must manage one's money carefully.] using a version with a trivial index (Size), with no correctness enforced through dependent types.

diss-easter.tex:2380: Run-time} The first comparison that [could -> (do not confuse with "may")] be made is too see [whether -> (avoid using "or not" after "whether," unless you mean "regardless of whether")] the dependent typing incurs an additional cost on the programming.

diss-easter.tex:2386: I have [only -> Put "only" right before the word it modifies.] used my machine for these experiments, with specifications detailed in table.

diss-easter.tex:2386: To reduce the error in the results, I have limited the [related -> (do not use as an intransitive verb: "I get along well with my advisor" instead of "I relate well to my advisor")] processes' usage to a single core.

diss-easter.tex:2388: Furthermore, I have repeated each experiment [between -> (choose "between" 2 options and "among" 3 or more)] 10 and 1000 times (limiting each measurement to approx 10 minutes) and [only -> Put "only" right before the word it modifies.] reported the smallest value, [which -> (use "that" if clause is restrictive)] [could -> (do not confuse with "may")] be read as a lower bound of the runtime.

diss-easter.tex:2394: Component & Setting \\ \hline Operating [System -> Frequently used without need.] & Ubuntu 16.04.1 LTS 64-bit \\ Kernel & Linux v4.4.0-72-generic \\ CPU & Intel® Core™ i7-4702HQ, 2.20 GHz \\ RAM & 16 GB \\ Agda version & 5.2.1.1 \\ \hline \end{tabular} \caption{Machine specifications} \end{table} \subsection{\textit{cons}} For the first experiment, I am evaluating the run-time of consing $2^n$ elements to a sequence.

diss-easter.tex:2410: For this purpose, I have implemented a simple recursive consing function, and forced\footnote{Agda has lazy evaluation} [its -> = "it is" or "its"?] evaluation by a \textit{tab} operation\footnote{Getting the first element is guaranteed to have a negligeable run-time, since it resides in the leftmost digit, requiring [only -> Put "only" right before the word it modifies.] three function calls}.

diss-easter.tex:2410: The output is done via the Haskell-[like -> Substitute by "as" before phrases or clauses: Our love was beautiful, as love was meant to be.] Monad way.

diss-easter.tex:2443: H] \caption{Consing experiment} \scalebox{0.8} { \begin{picture}(0,0) \includegraphics{consexp-inc} \end{picture}% \begin{picture}(576,433)(0,0) \fonts[ize -> (words ending in -ize tend suggest usage of American spelling)]{10}{0} \selectfont\put(74.88,43.5189){\makebox(0,0)[t]{\textcolor[rgb]{0,0,0}{{10}}}} \fonts[ize -> (words ending in -ize tend suggest usage of American spelling)]{10}{0} \selectfont\put(214.38,43.5189){\makebox(0,0)[t]{\textcolor[rgb]{0,0,0}{{15}}}} \fonts[ize -> (words ending in -ize tend suggest usage of American spelling)]{10}{0} \selectfont\put(353.88,43.5189){\makebox(0,0)[t]{\textcolor[rgb]{0,0,0}{{20}}}} \fonts[ize -> (words ending in -ize tend suggest usage of American spelling)]{10}{0} \selectfont\put(493.38,43.5189){\makebox(0,0)[t]{\textcolor[rgb]{0,0,0}{{25}}}} \fonts[ize -> (words ending in -ize tend suggest usage of American spelling)]{10}{0} \selectfont\put(69.8755,48.52){\makebox(0,0)[r]{\textcolor[rgb]{0,0,0}{{-10}}}} \fonts[ize -> (words ending in -ize tend suggest usage of American spelling)]{10}{0} \selectfont\put(69.8755,98.8172){\makebox(0,0)[r]{\textcolor[rgb]{0,0,0}{{-8}}}} \fonts[ize -> (words ending in -ize tend suggest usage of American spelling)]{10}{0} \selectfont\put(69.8755,149.114){\makebox(0,0)[r]{\textcolor[rgb]{0,0,0}{{-6}}}} \fonts[ize -> (words ending in -ize tend suggest usage of American spelling)]{10}{0} \selectfont\put(69.8755,199.411){\makebox(0,0)[r]{\textcolor[rgb]{0,0,0}{{-4}}}} \fonts[ize -> (words ending in -ize tend suggest usage of American spelling)]{10}{0} \selectfont\put(69.8755,249.709){\makebox(0,0)[r]{\textcolor[rgb]{0,0,0}{{-2}}}} \fonts[ize -> (words ending in -ize tend suggest usage of American spelling)]{10}{0} \selectfont\put(69.8755,300.006){\makebox(0,0)[r]{\textcolor[rgb]{0,0,0}{{0}}}} \fonts[ize -> (words ending in -ize tend suggest usage of American spelling)]{10}{0} \selectfont\put(69.8755,350.303){\makebox(0,0)[r]{\textcolor[rgb]{0,0,0}{{2}}}} \fonts[ize -> (words ending in -ize tend suggest usage of American spelling)]{10}{0} \selectfont\put(69.8755,400.6){\makebox(0,0)[r]{\textcolor[rgb]{0,0,0}{{4}}}} \fonts[ize -> (words ending in -ize tend suggest usage of American spelling)]{10}{0} \selectfont\put(298.08,32.5189){\makebox(0,0)[t]{\textcolor[rgb]{0,0,0}{{n}}}} \fonts[ize -> (words ending in -ize tend suggest usage of American spelling)]{10}{0} \selectfont\put(49.8755,224.56){\rotatebox{90}{\makebox(0,0)[b]{\textcolor[rgb]{0,0,0}{{logarithm of minimum runtime}}}}} \fonts[ize -> (words ending in -ize tend suggest usage of American spelling)]{10}{0} \selectfont\put(103.667,390.83){\makebox(0,0)[l]{\textcolor[rgb]{0,0,0}{{Dependent Version}}}} \fonts[ize -> (words ending in -ize tend suggest usage of American spelling)]{10}{0} \selectfont\put(103.667,376.775){\makebox(0,0)[l]{\textcolor[rgb]{0,0,0}{{NonDependent Version}}}} \fonts[ize -> (words ending in -ize tend suggest usage of American spelling)]{10}{0} \selectfont\put(298.08,410.6){\makebox(0,0)[b]{\textcolor[rgb]{0,0,0}{{Comparison of runtime for the cons experiment}}}} \end{picture} } \end{figure} \subsection{split} This experiment is an extension of the previous [one -> When used as a pronoun, it  must be used consistently: One must manage one's money carefully.].

diss-easter.tex:2492: Also, since we require creating a big-sequence to start with, I have subtracted the results from the previous experiment, [so -> (do not use as intensifier)] the values are the minimum time to extract the middle element from an increasingly long sequences.

diss-easter.tex:2494: H] \caption{Splitting Experiment} \scalebox{0.8} { \begin{picture}(0,0) \includegraphics{splitexp-inc} \end{picture}% \begin{picture}(576,433)(0,0) \fonts[ize -> (words ending in -ize tend suggest usage of American spelling)]{10}{0} \selectfont\put(72.8,53.3083){\makebox(0,0)[t]{\textcolor[rgb]{0,0,0}{{10}}}} \fonts[ize -> (words ending in -ize tend suggest usage of American spelling)]{10}{0} \selectfont\put(130.667,53.3083){\makebox(0,0)[t]{\textcolor[rgb]{0,0,0}{{12}}}} \fonts[ize -> (words ending in -ize tend suggest usage of American spelling)]{10}{0} \selectfont\put(188.533,53.3083){\makebox(0,0)[t]{\textcolor[rgb]{0,0,0}{{14}}}} \fonts[ize -> (words ending in -ize tend suggest usage of American spelling)]{10}{0} \selectfont\put(246.4,53.3083){\makebox(0,0)[t]{\textcolor[rgb]{0,0,0}{{16}}}} \fonts[ize -> (words ending in -ize tend suggest usage of American spelling)]{10}{0} \selectfont\put(304.267,53.3083){\makebox(0,0)[t]{\textcolor[rgb]{0,0,0}{{18}}}} \fonts[ize -> (words ending in -ize tend suggest usage of American spelling)]{10}{0} \selectfont\put(362.133,53.3083){\makebox(0,0)[t]{\textcolor[rgb]{0,0,0}{{20}}}} \fonts[ize -> (words ending in -ize tend suggest usage of American spelling)]{10}{0} \selectfont\put(420,53.3083){\makebox(0,0)[t]{\textcolor[rgb]{0,0,0}{{22}}}} \fonts[ize -> (words ending in -ize tend suggest usage of American spelling)]{10}{0} \selectfont\put(477.867,53.3083){\makebox(0,0)[t]{\textcolor[rgb]{0,0,0}{{24}}}} \fonts[ize -> (words ending in -ize tend suggest usage of American spelling)]{10}{0} \selectfont\put(67.8,58.31){\makebox(0,0)[r]{\textcolor[rgb]{0,0,0}{{-15}}}} \fonts[ize -> (words ending in -ize tend suggest usage of American spelling)]{10}{0} \selectfont\put(67.8,126.933){\makebox(0,0)[r]{\textcolor[rgb]{0,0,0}{{-10}}}} \fonts[ize -> (words ending in -ize tend suggest usage of American spelling)]{10}{0} \selectfont\put(67.8,195.556){\makebox(0,0)[r]{\textcolor[rgb]{0,0,0}{{-5}}}} \fonts[ize -> (words ending in -ize tend suggest usage of American spelling)]{10}{0} \selectfont\put(67.8,264.179){\makebox(0,0)[r]{\textcolor[rgb]{0,0,0}{{0}}}} \fonts[ize -> (words ending in -ize tend suggest usage of American spelling)]{10}{0} \selectfont\put(67.8,332.802){\makebox(0,0)[r]{\textcolor[rgb]{0,0,0}{{5}}}} \fonts[ize -> (words ending in -ize tend suggest usage of American spelling)]{10}{0} \selectfont\put(67.8,401.425){\makebox(0,0)[r]{\textcolor[rgb]{0,0,0}{{10}}}} \fonts[ize -> (words ending in -ize tend suggest usage of American spelling)]{10}{0} \selectfont\put(289.8,42.3083){\makebox(0,0)[t]{\textcolor[rgb]{0,0,0}{{n}}}} \fonts[ize -> (words ending in -ize tend suggest usage of American spelling)]{10}{0} \selectfont\put(47.8,229.867){\rotatebox{90}{\makebox(0,0)[b]{\textcolor[rgb]{0,0,0}{{logarithm of minimum runtime}}}}} \fonts[ize -> (words ending in -ize tend suggest usage of American spelling)]{10}{0} \selectfont\put(100.787,391.904){\makebox(0,0)[l]{\textcolor[rgb]{0,0,0}{{Dependent Version}}}} \fonts[ize -> (words ending in -ize tend suggest usage of American spelling)]{10}{0} \selectfont\put(100.787,378.206){\makebox(0,0)[l]{\textcolor[rgb]{0,0,0}{{NonDependent Version}}}} \fonts[ize -> (words ending in -ize tend suggest usage of American spelling)]{10}{0} \selectfont\put(289.8,411.425){\makebox(0,0)[b]{\textcolor[rgb]{0,0,0}{{Comparison of runtime for the split experiment}}}} \end{picture} } \end{figure} I is clear from both these experiments that the dependent versions incurs a higher computational cost.

diss-easter.tex:2543: Moreover, the ends show that the divergence [between -> (choose "between" 2 options and "among" 3 or more)] the two depends on the input size.

diss-easter.tex:2543: [However -> Means "in whatever way, to whatever extent" inside a sentence and "nevertheless" at the beginning of a sentence.], this is not a limitation of dependent types, but of the compiler and extracting tools.

diss-easter.tex:2543: All the [type -> (do not use as synonym for "kind of")] annotations [could -> (do not confuse with "may")] be removed without damaging correctness.

diss-easter.tex:2547: I have tried to [repeat the same -> repeat the] [type -> (do not use as synonym for "kind of")] of experiment, [comparing -> "Compare" to points out resemblances, "compare with" points out differences.] the run-time of the \textbf{reverse-ft} method, implemented using \textbf{foldl}, and the \textit{rev} method, [which -> (use "that" if clause is restrictive)] uses the \textbf{ViewL}.

diss-easter.tex:2551: Heuristics for Effort} [There is -> (a dead phrase; rewrite the sentence and it will probably improve)] no doubt that creating a dependent and verified version of a particular algorithm or data structure incurs an additional cost.

diss-easter.tex:2553: In this section, I will try to explore the effort ratio [between -> (choose "between" 2 options and "among" 3 or more)] the implementing a simplistic solution versus a formally verified [one -> When used as a pronoun, it  must be used consistently: One must manage one's money carefully.].

diss-easter.tex:2555: It is worth emphas[izing -> (words ending in -izing tend suggest usage of American spelling)] that, although computing or estimating efforts is in general an ill-defined task, some heuristics [could -> (do not confuse with "may")] help [compare -> "Compare" to points out resemblances, "compare with" points out differences.] the different versions of the same data structure and see if the figures carry on across data structures.

diss-easter.tex:2557: I have suggested using two heuristics, [one -> When used as a pronoun, it  must be used consistently: One must manage one's money carefully.] computing the explosion in SLOC\footnote{Source Lines of Code}, and the other [one -> When used as a pronoun, it  must be used consistently: One must manage one's money carefully.] quantifying the axiom and lemma content in the definitions.

diss-easter.tex:2559: Lines of code} I will present the ratio [between -> (choose "between" 2 options and "among" 3 or more)] the lengths of different versions, commenting on what [they -> (do not use as substitute for "each, each one, everybody, every one, anybody, any one, somebody, some one")] achieve.

diss-easter.tex:2561: Although arguably, counting lines of code is not always representative, in this [case -> Avoid if used to describe the instance of a situation.] it seems suitable since:

diss-easter.tex:2563: All the presented code has been written by a single programmer\footnote{it is arguable [whether -> (avoid using "or not" after "whether," unless you mean "regardless of whether")] the metrics will therefore show something about using dependent types or just about myself as a programmer} \item I have been consistent with jumping to new lines.

diss-easter.tex:2567: I will make a clear distinction [between -> (choose "between" 2 options and "among" 3 or more)] \textit{internal} verification and \textit{external} verification \cite{verifagda}.

diss-easter.tex:2567: By the former I mean properties that are made clear through the [type -> (do not use as synonym for "kind of")] of the definitions themselves (e.g.

diss-easter.tex:2569: For this metric, I have decided to discard all the \textit{external}ly verified properties, since [there is -> (a dead phrase; rewrite the sentence and it will probably improve)] no bound on their number.

diss-easter.tex:2573: Selection Sort} The selection sort procedure, presented in section whatever is an example of a fully formally verified procedure, as all that [can -> (do not confuse with "may")] be [expected -> Use "expect" for simple predictions and "anticipate" for more complex actions in advance of an event.] of a sorting function is encoded in the [type -> (do not use as synonym for "kind of")] [system -> Frequently used without need.].

diss-easter.tex:2575: This differs from the FingerTree implementation, [which -> (use "that" if clause is restrictive)] [only -> Put "only" right before the word it modifies.] enforces correctness of the measurement.

diss-easter.tex:2577: H] \caption{SLOC for Sorting} \center \begin{tabular}{c r r} \hline Content & Verified & Not Verified\\ \hline Implementation & 18 & 14 \\ [Type -> (do not use as synonym for "kind of")] annotations & 24 & 3 \\ Proofs & 124 & 0 \\ Other & 53 & 50 \\ Total & 219 & 67 \\ \hline \end{tabular} \end{table} The unverified example in this [case -> Avoid if used to describe the instance of a situation.] does not run in Agda.

diss-easter.tex:2593: It [would -> (use "should" if used as conditional statement in the first person or for "shall" in indirect quotation after a verb in past tense.  Consider omitting it for repeated actions)] require proofs of [termination -> end].

diss-easter.tex:2593: I have [only -> Put "only" right before the word it modifies.] presented this as a reference point for the Finger Tree example.

diss-easter.tex:2595: Finger Tree} \begin{table}[H] \caption{SLOC for Finger Tree} \center \begin{tabular}{c r r} \hline Content & Measured Version & Size Version \\ \hline Implementation & 185 & 162 \\ [Type -> (do not use as synonym for "kind of")] annotations & 144 & 68 \\ Data declarations & 51 & 32 \\ Proofs & 350 & 30 \\ Other & 30 & 22 \\ Total & 760 & 314 \\ \hline \end{tabular} \end{table} It is [interesting -> Avoid using "interesting" when introducing something. Simply introduce it.] to see the same ratios remaining consistent.

diss-easter.tex:2614: As a sanity check, the code [related -> (do not use as an intransitive verb: "I get along well with my advisor" instead of "I relate well to my advisor")] to implementation has stayed constant.

diss-easter.tex:2614: This depends of course on the [number of -> many, several] invariants we are trying to maintain.

diss-easter.tex:2614: A [further -> "Farther" denotes distance, "further" denotes time or quantity.] increase in the lines that express [type -> (do not use as synonym for "kind of")] signature [lead -> The past tense of the verb "lead" is "led".] to an overall 2.5 [factor -> "component", "ingredient" or "element" outside mathematical contexts] of explosion in the code.

diss-easter.tex:2616: As a side note, the effort as illustrated here is not directly [related -> (do not use as an intransitive verb: "I get along well with my advisor" instead of "I relate well to my advisor")] to difficulty, since the more expressive types in verified versions make the goals of implementation clearer.

diss-easter.tex:2629: I have [performed -> done] an analysis of what lemmas are being used by each declaration, followed by a flattening of the result to the base lemmas.

diss-easter.tex:2629: The final numbers [can -> (do not confuse with "may")] be seen as a metric of effort, but also such an analysis [could -> (do not confuse with "may")] potentially be helpful to refactoring.

diss-easter.tex:2649: [First of all -> first], [due to -> Synonym for "attributable to", often confused with "through, because of, owing to."] the declaration of the monoid operator as \textbf{infixl}, the operations that have a right-associative structure, tend to be easier to prove.

diss-easter.tex:2653: Although we rely [only -> Put "only" right before the word it modifies.] on the Curry Howard Isomorphism, it also incorporates the Boolean data [type -> (do not use as synonym for "kind of")] and [its -> = "it is" or "its"?] associated operations (and, or, negation).

diss-easter.tex:2669: AgdaIndent{2}{}\<[2]% \>[2]\AgdaFunction{pred-istrue} \AgdaSymbol{:} \AgdaSymbol{∀} \AgdaBound{a} \AgdaSymbol{→} \AgdaSymbol{(}\AgdaPostulate{predicate} \AgdaBound{a} \AgdaDatatype{≡} \AgdaInductiveConstructor{true}\AgdaSymbol{)}\<% \\ \>[0]\AgdaIndent{2}{}\<[2]% \>[2]\AgdaFunction{pred-isfalse} \AgdaSymbol{:} \AgdaSymbol{∀} \AgdaBound{a} \AgdaSymbol{→} \AgdaSymbol{(}\AgdaPostulate{predicate} \AgdaBound{a} \AgdaDatatype{≡} \AgdaInductiveConstructor{false}\AgdaSymbol{)}\<% \\ \end{code} This inconvenience became more noticeable when I tried to port the Isabelle implementation \cite{isabelle}, [which -> (use "that" if clause is restrictive)] is not based on dependent types.

diss-easter.tex:2677: Although [they -> (do not use as substitute for "each, each one, everybody, every one, anybody, any one, somebody, some one")] [can -> (do not confuse with "may")] be fully encoded, the proofs become unnecessarily long [due to -> Synonym for "attributable to", often confused with "through, because of, owing to."] the lack of [type -> (do not use as synonym for "kind of")] checking support.

diss-easter.tex:2677: This [would -> (use "should" if used as conditional statement in the first person or for "shall" in indirect quotation after a verb in past tense.  Consider omitting it for repeated actions)] perhaps be a start point for some future work.

diss-easter.tex:2679: Discussion} As part of the introduction, we proposed a question [related -> (do not use as an intransitive verb: "I get along well with my advisor" instead of "I relate well to my advisor")] to how far Agda's expressivity [can -> (do not confuse with "may")] take us in the implementation of a functional data structure.

diss-easter.tex:2683: [In relation to -> toward, to] Matthieu Souzeau's paper \cite{coq}, I have completed the implementations of all the operations he suggested.

diss-easter.tex:2683: Furthermore, I have presented an Agda way to deal with the [termination -> end] checking problem, discussed in his section 4.4.1 Dependence Hell.

diss-easter.tex:2684: It is [interesting -> Avoid using "interesting" when introducing something. Simply introduce it.] to note that this problem is not strictly [related -> (do not use as an intransitive verb: "I get along well with my advisor" instead of "I relate well to my advisor")] to Agda, but to a wider family of dependently typed languages.

diss-easter.tex:2686: In addition, I have also explicitly proven axioms that [relate -> (do not use as an intransitive verb: "I get along well with my advisor" instead of "I relate well to my advisor")] Finger Trees to their list representation.

diss-easter.tex:2706: This allows in lazy languages [like -> Substitute by "as" before phrases or clauses: Our love was beautiful, as love was meant to be.] Haskell, implementation of operations such as insertion and deletion in ammortised O(1) cost -- [which -> (use "that" if clause is restrictive)] represented a breakthrough in functional programming languages.

diss-easter.tex:2708: [Further -> "Farther" denotes distance, "further" denotes time or quantity.] example of the [termination -> end] checking limitation} \label{app:termcheck} In this section, I will present a data structure as implemented by Ralf Hinze\cite{nestedhinze} and show the issues that [could -> (do not confuse with "may")] arise because of the [termination -> end] checker in more detail.

diss-easter.tex:2712: [Consider -> Not followed by "as" when it means "believe to be".] the trivial implementation of a binary tree in a functional programming language:

diss-easter.tex:2716: AgdaIndent{4}{}\<[4]% \>[4]\AgdaKeyword{data} \AgdaDatatype{Bush} \AgdaSymbol{(}\AgdaBound{A} \AgdaSymbol{:} \AgdaPrimitiveType{Set}\AgdaSymbol{)} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaKeyword{where}\<% \\ \>[4]\AgdaIndent{6}{}\<[6]% \>[6]\AgdaInductiveConstructor{Leaf} \AgdaSymbol{:} \AgdaBound{A} \AgdaSymbol{→} \AgdaDatatype{Bush} \AgdaBound{A}\<% \\ \>[4]\AgdaIndent{6}{}\<[6]% \>[6]\AgdaInductiveConstructor{Fork} \AgdaSymbol{:} \AgdaDatatype{Bush} \AgdaBound{A} \AgdaSymbol{→} \AgdaDatatype{Bush} \AgdaBound{A} \AgdaSymbol{→} \AgdaDatatype{Bush} \AgdaBound{A}\<% \\ \end{code} [In order to -> to] stay consistent with the original implementation, the data structure above will be split in two different types that represent the constructors \cite{numerical}.

diss-easter.tex:2732: AgdaIndent{4}{}\<[4]% \>[4]\AgdaKeyword{data} \AgdaDatatype{Leaf} \AgdaSymbol{(}\AgdaBound{A} \AgdaSymbol{:} \AgdaPrimitiveType{Set}\AgdaSymbol{)} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaKeyword{where}\<% \\ \>[4]\AgdaIndent{6}{}\<[6]% \>[6]\AgdaInductiveConstructor{LEAF} \AgdaSymbol{:} \AgdaBound{A} \AgdaSymbol{→} \AgdaDatatype{Leaf} \AgdaBound{A}\<% \\ % \\ \>[0]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaKeyword{data} \AgdaDatatype{Fork} \AgdaSymbol{(}\AgdaBound{B} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaSymbol{→} \AgdaPrimitiveType{Set}\AgdaSymbol{)(}\AgdaBound{A} \AgdaSymbol{:} \AgdaPrimitiveType{Set}\AgdaSymbol{)} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaKeyword{where}\<% \\ \>[4]\AgdaIndent{6}{}\<[6]% \>[6]\AgdaInductiveConstructor{FORK} \AgdaSymbol{:} \AgdaSymbol{(}\AgdaBound{B} \AgdaBound{A}\AgdaSymbol{)} \AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{B} \AgdaBound{A}\AgdaSymbol{)} \AgdaSymbol{→} \AgdaDatatype{Fork} \AgdaBound{B} \AgdaBound{A}\<% \\ \end{code} We [can -> (do not confuse with "may")] now [refer -> (an allusion is an indirect reference, while a reference is a direct reference)] to the Random Access Sequence implementation.

diss-easter.tex:2750: [They -> (do not use as substitute for "each, each one, everybody, every one, anybody, any one, somebody, some one")] are a numerical representation based on base two of natural numbers, [however -> Means "in whatever way, to whatever extent" inside a sentence and "nevertheless" at the beginning of a sentence.], rather [than -> (examine sentences containing "than" to insure that they are not missing words: I love my father more than my mother. I love my father more than my mother loves my father. I love my father more than I love my mother)] the 0-1 [system -> Frequently used without need.], [the author -> I] prefers to use the 1-2 [system -> Frequently used without need.] for [a number of -> many, several] effiency reasons.

diss-easter.tex:2762: RAL \begin{code} \\ \>[0]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaKeyword{data} \AgdaDatatype{RandomAccessList} \AgdaSymbol{(}\AgdaBound{B} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaSymbol{→} \AgdaPrimitiveType{Set}\AgdaSymbol{)} \AgdaSymbol{(}\AgdaBound{A} \AgdaSymbol{:} \AgdaPrimitiveType{Set}\AgdaSymbol{)} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaKeyword{where}\<% \\ \>[4]\AgdaIndent{6}{}\<[6]% \>[6]\AgdaInductiveConstructor{Nil} \AgdaSymbol{:} \AgdaDatatype{RandomAccessList} \AgdaBound{B} \AgdaBound{A}\<% \\ \>[4]\AgdaIndent{6}{}\<[6]% \>[6]\AgdaInductiveConstructor{[One -> When used as a pronoun, it  must be used consistently: One must manage one's money carefully.]} \AgdaSymbol{:} \AgdaSymbol{(}\AgdaBound{B} \AgdaBound{A}\AgdaSymbol{)} \AgdaSymbol{→} \AgdaSymbol{(}\AgdaDatatype{RandomAccessList} \AgdaSymbol{(}\AgdaDatatype{Fork} \AgdaBound{B}\AgdaSymbol{)} \AgdaBound{A}\AgdaSymbol{)} \AgdaSymbol{→} \AgdaDatatype{RandomAccessList} \AgdaBound{B} \AgdaBound{A}\<% \\ \>[4]\AgdaIndent{6}{}\<[6]% \>[6]\AgdaInductiveConstructor{Two} \AgdaSymbol{:} \AgdaSymbol{(}\AgdaDatatype{Fork} \AgdaBound{B} \AgdaBound{A}\AgdaSymbol{)} \AgdaSymbol{→} \AgdaSymbol{(}\AgdaDatatype{RandomAccessList} \AgdaSymbol{(}\AgdaDatatype{Fork} \AgdaBound{B}\AgdaSymbol{)} \AgdaBound{A}\AgdaSymbol{)} \AgdaSymbol{→} \AgdaDatatype{RandomAccessList} \AgdaBound{B} \AgdaBound{A}\<% \\ \end{code} Now, by implementing the function $incr$, we [can -> (do not confuse with "may")] see the similarity [between -> (choose "between" 2 options and "among" 3 or more)] the adding an element to the left and the number representation \begin{code} \\ \>[0]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaFunction{incr} \AgdaSymbol{:} \AgdaSymbol{\{}\AgdaBound{B} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaSymbol{→} \AgdaPrimitiveType{Set}\AgdaSymbol{\}} \AgdaSymbol{\{}\AgdaBound{A} \AgdaSymbol{:} \AgdaPrimitiveType{Set}\AgdaSymbol{\}} \AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{B} \AgdaBound{A}\AgdaSymbol{)} \AgdaSymbol{→} \AgdaDatatype{RandomAccessList} \AgdaBound{B} \AgdaBound{A} \AgdaSymbol{→} \AgdaDatatype{RandomAccessList} \AgdaBound{B} \AgdaBound{A}\<% \\ \>[0]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaFunction{incr} \AgdaBound{b} \AgdaInductiveConstructor{Nil} \AgdaSymbol{=} \AgdaInductiveConstructor{[One -> When used as a pronoun, it  must be used consistently: One must manage one's money carefully.]} \AgdaBound{b} \AgdaInductiveConstructor{Nil}\<% \\ \>[0]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaFunction{incr} \AgdaBound{b} \AgdaSymbol{(}\AgdaInductiveConstructor{[One -> When used as a pronoun, it  must be used consistently: One must manage one's money carefully.]} \AgdaBound{b₂} \AgdaBound{ds}\AgdaSymbol{)} \AgdaSymbol{=} \AgdaInductiveConstructor{Two} \AgdaSymbol{(}\AgdaInductiveConstructor{FORK} \AgdaBound{b} \AgdaBound{b₂}\AgdaSymbol{)} \AgdaBound{ds}\<% \\ \>[0]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaFunction{incr} \AgdaBound{b} \AgdaSymbol{(}\AgdaInductiveConstructor{Two} \AgdaBound{b₂} \AgdaBound{ds}\AgdaSymbol{)} \AgdaSymbol{=} \AgdaInductiveConstructor{[One -> When used as a pronoun, it  must be used consistently: One must manage one's money carefully.]} \AgdaBound{b} \AgdaSymbol{(}\AgdaFunction{incr} \AgdaBound{b₂} \AgdaBound{ds}\AgdaSymbol{)}\<% \\ \end{code} We [can -> (do not confuse with "may")] finally declare a sequence, by using the definition of Leaf as a layer of abstraction.

diss-easter.tex:2800: AgdaIndent{4}{}\<[4]% \>[4]\AgdaFunction{IxSequence} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaSymbol{→} \AgdaPrimitiveType{Set}\<% \\ \>[0]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaFunction{IxSequence} \AgdaSymbol{=} \AgdaDatatype{RandomAccessList} \AgdaDatatype{Leaf}\<% \\ \\ \>[0]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaFunction{cons} \AgdaSymbol{:} \AgdaSymbol{\{}\AgdaBound{A} \AgdaSymbol{:} \AgdaPrimitiveType{Set}\AgdaSymbol{\}} \AgdaSymbol{→} \AgdaBound{A} \AgdaSymbol{→} \AgdaFunction{IxSequence} \AgdaBound{A} \AgdaSymbol{→} \AgdaFunction{IxSequence} \AgdaBound{A}\<% \\ \>[0]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaFunction{cons} \AgdaBound{a} \AgdaBound{s} \AgdaSymbol{=} \AgdaFunction{incr} \AgdaSymbol{(}\AgdaInductiveConstructor{LEAF} \AgdaBound{a}\AgdaSymbol{)} \AgdaBound{s}\<% \\ \end{code} \subsection{Defining a view} We [can -> (do not confuse with "may")] then implement the $front$ method, [which -> (use "that" if clause is restrictive)] returns a view of the list [in terms of -> in, for, about (or avoid)] the first element and a continutation.

diss-easter.tex:2817: Our goal is to abstract away the intricacy of the [type -> (do not use as synonym for "kind of")] declaration, [so -> (do not use as intensifier)] we [can -> (do not confuse with "may")] implement methods easily.

diss-easter.tex:2817: First, we need to declare the return [type -> (do not use as synonym for "kind of")], wrapped in a view data structure.

diss-easter.tex:2819: View %--front \begin{code} \\ \>[0]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaKeyword{data} \AgdaDatatype{View} \AgdaSymbol{(}\AgdaBound{A} \AgdaSymbol{:} \AgdaPrimitiveType{Set}\AgdaSymbol{)} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaKeyword{where}\<% \\ \>[4]\AgdaIndent{6}{}\<[6]% \>[6]\AgdaInductiveConstructor{Vnil} \AgdaSymbol{:} \AgdaDatatype{View} \AgdaBound{A}\<% \\ \>[4]\AgdaIndent{6}{}\<[6]% \>[6]\AgdaInductiveConstructor{VCns} \AgdaSymbol{:} \AgdaBound{A} \AgdaFunction{×} \AgdaFunction{IxSequence} \AgdaBound{A} \AgdaSymbol{→} \AgdaDatatype{View} \AgdaBound{A}\<% \\ % \\ \>[0]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaFunction{front} \AgdaSymbol{:} \AgdaSymbol{\{}\AgdaBound{A} \AgdaSymbol{:} \AgdaPrimitiveType{Set}\AgdaSymbol{\}} \AgdaSymbol{→} \AgdaFunction{IxSequence} \AgdaBound{A} \AgdaSymbol{→} \AgdaDatatype{View} \AgdaBound{A}\<% \\ \>[0]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaFunction{front} \AgdaInductiveConstructor{Nil} \AgdaSymbol{=} \AgdaInductiveConstructor{Vnil}\<% \\ \>[0]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaFunction{front} \AgdaSymbol{(}\AgdaInductiveConstructor{[One -> When used as a pronoun, it  must be used consistently: One must manage one's money carefully.]} \AgdaSymbol{(}\AgdaInductiveConstructor{LEAF} \AgdaBound{x}\AgdaSymbol{)} \AgdaBound{ds}\AgdaSymbol{)} \AgdaSymbol{=} \AgdaInductiveConstructor{VCns} \AgdaSymbol{(}\AgdaBound{x} \AgdaInductiveConstructor{,} \AgdaFunction{zero} \AgdaBound{ds}\AgdaSymbol{)}\<% \\ \>[0]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaFunction{front} \AgdaSymbol{(}\AgdaInductiveConstructor{Two} \AgdaSymbol{(}\AgdaInductiveConstructor{FORK} \AgdaSymbol{(}\AgdaInductiveConstructor{LEAF} \AgdaBound{a}\AgdaSymbol{)} \AgdaBound{b}\AgdaSymbol{)} \AgdaBound{ds}\AgdaSymbol{)} \AgdaSymbol{=} \AgdaInductiveConstructor{VCns} \AgdaSymbol{(}\AgdaBound{a} \AgdaInductiveConstructor{,} \AgdaInductiveConstructor{[One -> When used as a pronoun, it  must be used consistently: One must manage one's money carefully.]} \AgdaBound{b} \AgdaBound{ds}\AgdaSymbol{)}\<% \\ \end{code} The zero method is a restructuring method, as we will find in the Finger Tree implementation.

diss-easter.tex:2852: AgdaIndent{4}{}\<[4]% \>[4]\AgdaFunction{zero} \AgdaSymbol{:} \AgdaSymbol{\{}\AgdaBound{B} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaSymbol{→} \AgdaPrimitiveType{Set}\AgdaSymbol{\}} \AgdaSymbol{\{}\AgdaBound{A} \AgdaSymbol{:} \AgdaPrimitiveType{Set}\AgdaSymbol{\}} \AgdaSymbol{→}\<% \\ \>[4]\AgdaIndent{6}{}\<[6]% \>[6]\AgdaDatatype{RandomAccessList} \AgdaSymbol{(}\AgdaDatatype{Fork} \AgdaBound{B}\AgdaSymbol{)} \AgdaBound{A} \AgdaSymbol{→}\<% \\ \>[4]\AgdaIndent{6}{}\<[6]% \>[6]\AgdaDatatype{RandomAccessList} \AgdaBound{B} \AgdaBound{A}\<% \\ \>[0]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaFunction{zero} \AgdaInductiveConstructor{Nil} \AgdaSymbol{=} \AgdaInductiveConstructor{Nil}\<% \\ \>[0]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaFunction{zero} \AgdaSymbol{(}\AgdaInductiveConstructor{[One -> When used as a pronoun, it  must be used consistently: One must manage one's money carefully.]} \AgdaBound{b} \AgdaBound{ds}\AgdaSymbol{)} \AgdaSymbol{=} \AgdaInductiveConstructor{Two} \AgdaBound{b} \AgdaSymbol{(}\AgdaFunction{zero} \AgdaBound{ds}\AgdaSymbol{)}\<% \\ \>[0]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaFunction{zero} \AgdaSymbol{(}\AgdaInductiveConstructor{Two} \AgdaSymbol{(}\AgdaInductiveConstructor{FORK} \AgdaBound{b₁} \AgdaBound{b₂}\AgdaSymbol{)} \AgdaBound{ds}\AgdaSymbol{)} \AgdaSymbol{=} \AgdaInductiveConstructor{Two} \AgdaBound{b₁} \AgdaSymbol{(}\AgdaInductiveConstructor{[One -> When used as a pronoun, it  must be used consistently: One must manage one's money carefully.]} \AgdaBound{b₂} \AgdaBound{ds}\AgdaSymbol{)}\<% \\ \end{code} \subsection{Example [termination -> end] failure} Here, Agda [termination -> end] checker will fail.

diss-easter.tex:2874: We will try to implement an append function, [which -> (use "that" if clause is restrictive)] is a straightforward process given the methods previously declared:

diss-easter.tex:2894: [However -> Means "in whatever way, to whatever extent" inside a sentence and "nevertheless" at the beginning of a sentence.], trying to come up with an implementation that [type -> (do not use as synonym for "kind of")] checks, even in this relatively simple [case -> Avoid if used to describe the instance of a situation.] seems to be [very -> (use sparingly; try to use words that are strong in themselves for emphasis)] difficult.

diss-easter.tex:2894: The intuition in this [case -> Avoid if used to describe the instance of a situation.] is that we need to convince agda that FORK a b is bigger [than -> (examine sentences containing "than" to insure that they are not missing words: I love my father more than my mother. I love my father more than my mother loves my father. I love my father more than I love my mother)] any individual a b in the context of the RAL constructors.

diss-easter.tex:2894: [However -> Means "in whatever way, to whatever extent" inside a sentence and "nevertheless" at the beginning of a sentence.], sized types are [only -> Put "only" right before the word it modifies.] relative, not on an absolute scale.

diss-easter.tex:2898: AgdaIndent{4}{}\<[4]% \>[4]\AgdaKeyword{data} \AgdaDatatype{RandomAccessList} \AgdaSymbol{(}\AgdaBound{B} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaSymbol{→} \AgdaPrimitiveType{Set}\AgdaSymbol{)(}\AgdaBound{A} \AgdaSymbol{:} \AgdaPrimitiveType{Set}\AgdaSymbol{)} \AgdaSymbol{:} \AgdaSymbol{\{}\AgdaBound{i} \AgdaSymbol{:} \AgdaPostulate{Size}\AgdaSymbol{\}} \AgdaSymbol{→} \AgdaPrimitiveType{Set} \AgdaKeyword{where}\<% \\ \>[4]\AgdaIndent{6}{}\<[6]% \>[6]\AgdaInductiveConstructor{Nil} \AgdaSymbol{:} \AgdaSymbol{∀} \AgdaSymbol{\{}\AgdaBound{i}\AgdaSymbol{\}} \AgdaSymbol{→} \AgdaDatatype{RandomAccessList} \AgdaBound{B} \AgdaBound{A} \AgdaSymbol{\{}\AgdaBound{i}\AgdaSymbol{\}}\<% \\ \>[4]\AgdaIndent{6}{}\<[6]% \>[6]\AgdaInductiveConstructor{[One -> When used as a pronoun, it  must be used consistently: One must manage one's money carefully.]} \AgdaSymbol{:} \AgdaSymbol{∀} \AgdaSymbol{\{}\AgdaBound{i}\AgdaSymbol{\}} \AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{B} \AgdaBound{A}\AgdaSymbol{)} \AgdaSymbol{→} \AgdaSymbol{(}\AgdaDatatype{RandomAccessList} \AgdaSymbol{(}\AgdaDatatype{Fork} \AgdaBound{B}\AgdaSymbol{)} \AgdaBound{A} \AgdaSymbol{\{}\AgdaBound{i}\AgdaSymbol{\})} \AgdaSymbol{→} \AgdaDatatype{RandomAccessList} \AgdaBound{B} \AgdaBound{A} \AgdaSymbol{\{}\AgdaPostulate{↑} \AgdaBound{i}\AgdaSymbol{\}}\<% \\ \>[4]\AgdaIndent{6}{}\<[6]% \>[6]\AgdaInductiveConstructor{Two} \AgdaSymbol{:} \AgdaSymbol{∀} \AgdaSymbol{\{}\AgdaBound{i}\AgdaSymbol{\}} \AgdaSymbol{→} \AgdaSymbol{(}\AgdaDatatype{Fork} \AgdaBound{B} \AgdaBound{A}\AgdaSymbol{)} \AgdaSymbol{→} \AgdaSymbol{(}\AgdaDatatype{RandomAccessList} \AgdaSymbol{(}\AgdaDatatype{Fork} \AgdaBound{B}\AgdaSymbol{)} \AgdaBound{A} \AgdaSymbol{\{}\AgdaBound{i}\AgdaSymbol{\})} \AgdaSymbol{→} \AgdaDatatype{RandomAccessList} \AgdaBound{B} \AgdaBound{A} \AgdaSymbol{\{}\AgdaPostulate{↑} \AgdaPostulate{↑} \AgdaBound{i}\AgdaSymbol{\}}\<% \\ \\ \>[0]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaFunction{incr} \AgdaSymbol{:} \AgdaSymbol{\{}\AgdaBound{B} \AgdaSymbol{:} \AgdaPrimitiveType{Set} \AgdaSymbol{→} \AgdaPrimitiveType{Set}\AgdaSymbol{\}} \AgdaSymbol{\{}\AgdaBound{A} \AgdaSymbol{:} \AgdaPrimitiveType{Set}\AgdaSymbol{\}} \AgdaSymbol{\{}\AgdaBound{i} \AgdaSymbol{:} \AgdaPostulate{Size}\AgdaSymbol{\}} \AgdaSymbol{→} \AgdaSymbol{(}\AgdaBound{B} \AgdaBound{A}\AgdaSymbol{)} \AgdaSymbol{→} \AgdaDatatype{RandomAccessList} \AgdaBound{B} \AgdaBound{A} \AgdaSymbol{\{}\AgdaBound{i}\AgdaSymbol{\}} \AgdaSymbol{→} \AgdaDatatype{RandomAccessList} \AgdaBound{B} \AgdaBound{A} \AgdaSymbol{\{}\AgdaPostulate{↑} \AgdaBound{i}\AgdaSymbol{\}}\<% \\ \>[0]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaFunction{incr} \AgdaBound{b} \AgdaInductiveConstructor{Nil} \AgdaSymbol{=} \AgdaInductiveConstructor{[One -> When used as a pronoun, it  must be used consistently: One must manage one's money carefully.]} \AgdaBound{b} \AgdaInductiveConstructor{Nil}\<% \\ \>[0]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaFunction{incr} \AgdaBound{b} \AgdaSymbol{(}\AgdaInductiveConstructor{[One -> When used as a pronoun, it  must be used consistently: One must manage one's money carefully.]} \AgdaBound{b₂} \AgdaBound{ds}\AgdaSymbol{)} \AgdaSymbol{=} \AgdaInductiveConstructor{Two} \AgdaSymbol{(}\AgdaInductiveConstructor{FORK} \AgdaBound{b} \AgdaBound{b₂}\AgdaSymbol{)} \AgdaBound{ds}\<% \\ \>[0]\AgdaIndent{4}{}\<[4]% \>[4]\AgdaFunction{incr} \AgdaBound{b} \AgdaSymbol{(}\AgdaInductiveConstructor{Two} \AgdaBound{b₂} \AgdaBound{ds}\AgdaSymbol{)} \AgdaSymbol{=} \AgdaSymbol{\{!

diss-easter.tex:2922: AgdaComment{-- [One -> When used as a pronoun, it  must be used consistently: One must manage one's money carefully.] b (incr b₂ ds)}\<% \\ \end{code} [Consider -> Not followed by "as" when it means "believe to be".] the implementation of \textit{incr}.

diss-easter.tex:2927: This [is where -> Only use to denote place; do not use in definitions.] the complication of nested types arose in the first place.

diss-easter.tex:2929: B' = FORK B$ \\ $ A' = A $ \\ \end{center} Now, it is obvious that inserting an element of [type -> (do not use as synonym for "kind of")] Fork B A should increase the size of the container by more [than -> (examine sentences containing "than" to insure that they are not missing words: I love my father more than my mother. I love my father more than my mother loves my father. I love my father more than I love my mother)] inserting an element of [type -> (do not use as synonym for "kind of")] A [would -> (use "should" if used as conditional statement in the first person or for "shall" in indirect quotation after a verb in past tense.  Consider omitting it for repeated actions)].

diss-easter.tex:2932: Under this polymorphism [however -> Means "in whatever way, to whatever extent" inside a sentence and "nevertheless" at the beginning of a sentence.], the two operations are equivalent.

diss-easter.tex:2933: The solution to this problem [would -> (use "should" if used as conditional statement in the first person or for "shall" in indirect quotation after a verb in past tense.  Consider omitting it for repeated actions)] require a size scaled on the [type -> (do not use as synonym for "kind of")], [so -> (do not use as intensifier)] that\textit{ size(Fork B A) > size(A)}.

diss-easter.tex:2933: [However -> Means "in whatever way, to whatever extent" inside a sentence and "nevertheless" at the beginning of a sentence.], this needs to be hardcoded for specific [type -> (do not use as synonym for "kind of")], as Agda has no way of differentiating [between -> (choose "between" 2 options and "among" 3 or more)] different types of [type -> (do not use as synonym for "kind of")] Set, [so -> (do not use as intensifier)] no general method is available.

diss-easter.tex:2935: Other Agda Syntax and Terminology} \subsection{Agda's interactive help} Before writing the implementation of a function, as you stumble upon the equals(=) sign, you [can -> (do not confuse with "may")] tell agda to place a hole ({!

diss-easter.tex:2940: Here, you [can -> (do not confuse with "may")] [perform -> do] [a number of -> many, several] operations:

diss-easter.tex:2943: See the types and values of variables in the scope} \item{[Case -> Avoid if used to describe the instance of a situation.]-split} \\ For example, [consider -> Not followed by "as" when it means "believe to be".] the addition of natural numbers.

diss-easter.tex:2948: AgdaFunction{\_+\_} \AgdaSymbol{:} \AgdaDatatype{ℕ} \AgdaSymbol{→} \AgdaDatatype{ℕ} \AgdaSymbol{→} \AgdaDatatype{ℕ}\<% \\ \>\AgdaBound{m} \AgdaFunction{+} \AgdaBound{n} \AgdaSymbol{=} \AgdaSymbol{?}\<% \end{code} Performing a [case -> Avoid if used to describe the instance of a situation.]-split on the variable n shows me all the possible ways in which a natural number [can -> (do not confuse with "may")] be constructed.

diss-easter.tex:2962: Essentially, Agda looks throughout the environment to find an inhabitant (a variable) that has the [type -> (do not use as synonym for "kind of")] of the hole.

diss-easter.tex:2964: [They -> (do not use as substitute for "each, each one, everybody, every one, anybody, any one, somebody, some one")] are definitely not as powerfull as any functionality given by Coq of Isabelle, but it [can -> (do not confuse with "may")] save some typing.

diss-easter.tex:2968: Implicit Arguments} Agda introduces some syntax for various types of arguments you [can -> (do not confuse with "may")] provide to functions.

diss-easter.tex:2969: As you probably saw, [there is -> (a dead phrase; rewrite the sentence and it will probably improve)] a difference in handling the polymorphic types (in the [case -> Avoid if used to describe the instance of a situation.] of List) and the values given as arguments to [type -> (do not use as synonym for "kind of")] constructors (in the [case -> Avoid if used to describe the instance of a situation.] of Vec).

diss-easter.tex:2987: Set) is the [type -> (do not use as synonym for "kind of")] argument for instantiating a polymorphic [type -> (do not use as synonym for "kind of")], before the :, [while -> (if used as substitute for "and, but" then replace by semicolon, do not use as substitute for "although" as it leads to ambiguity or absurdity, best use it only in the sense of "during the time that")] the ℕ is the [type -> (do not use as synonym for "kind of")] of the value argument for the dependently typed instantiation.

diss-easter.tex:2991: If [there are -> (a dead phrase; rewrite the sentence and it will probably improve)] more possibilities, it will take a guess.

diss-easter.tex:2996: In Haskell, you [would -> (use "should" if used as conditional statement in the first person or for "shall" in indirect quotation after a verb in past tense.  Consider omitting it for repeated actions)] [accomplish -> do ] that with the use of [type -> (do not use as synonym for "kind of")] classes \cite{typeclasses} \\ [In order to -> to] mimic this behaviour we will use instance arguments.

diss-easter.tex:2997: [They -> (do not use as substitute for "each, each one, everybody, every one, anybody, any one, somebody, some one")] are declared by using double square brackets, \{\{ \}\} or the unicode equivalent.

diss-easter.tex:2999: What Agda does in this [case -> Avoid if used to describe the instance of a situation.], it looks for a possible instantiation of that [type -> (do not use as synonym for "kind of")] in the current scope, following some predefined rules.

diss-easter.tex:3000: It is important [there is -> (a dead phrase; rewrite the sentence and it will probably improve)] [only -> Put "only" right before the word it modifies.] [one -> When used as a pronoun, it  must be used consistently: One must manage one's money carefully.] available possibility, otherwise it will fail to [type -> (do not use as synonym for "kind of")] check.

633 phrases in 487 sentences found.
