%% ODER: format ==         = "\mathrel{==}"
%% ODER: format /=         = "\neq "
%
%
\makeatletter
\@ifundefined{lhs2tex.lhs2tex.sty.read}%
  {\@namedef{lhs2tex.lhs2tex.sty.read}{}%
   \newcommand\SkipToFmtEnd{}%
   \newcommand\EndFmtInput{}%
   \long\def\SkipToFmtEnd#1\EndFmtInput{}%
  }\SkipToFmtEnd

\newcommand\ReadOnlyOnce[1]{\@ifundefined{#1}{\@namedef{#1}{}}\SkipToFmtEnd}
\usepackage{amstext}
\usepackage{amssymb}
\usepackage{stmaryrd}
\DeclareFontFamily{OT1}{cmtex}{}
\DeclareFontShape{OT1}{cmtex}{m}{n}
  {<5><6><7><8>cmtex8
   <9>cmtex9
   <10><10.95><12><14.4><17.28><20.74><24.88>cmtex10}{}
\DeclareFontShape{OT1}{cmtex}{m}{it}
  {<-> ssub * cmtt/m/it}{}
\newcommand{\texfamily}{\fontfamily{cmtex}\selectfont}
\DeclareFontShape{OT1}{cmtt}{bx}{n}
  {<5><6><7><8>cmtt8
   <9>cmbtt9
   <10><10.95><12><14.4><17.28><20.74><24.88>cmbtt10}{}
\DeclareFontShape{OT1}{cmtex}{bx}{n}
  {<-> ssub * cmtt/bx/n}{}
\newcommand{\tex}[1]{\text{\texfamily#1}}	% NEU

\newcommand{\Sp}{\hskip.33334em\relax}


\newcommand{\Conid}[1]{\mathit{#1}}
\newcommand{\Varid}[1]{\mathit{#1}}
\newcommand{\anonymous}{\kern0.06em \vbox{\hrule\@width.5em}}
\newcommand{\plus}{\mathbin{+\!\!\!+}}
\newcommand{\bind}{\mathbin{>\!\!\!>\mkern-6.7mu=}}
\newcommand{\rbind}{\mathbin{=\mkern-6.7mu<\!\!\!<}}% suggested by Neil Mitchell
\newcommand{\sequ}{\mathbin{>\!\!\!>}}
\renewcommand{\leq}{\leqslant}
\renewcommand{\geq}{\geqslant}
\usepackage{polytable}

%mathindent has to be defined
\@ifundefined{mathindent}%
  {\newdimen\mathindent\mathindent\leftmargini}%
  {}%

\def\resethooks{%
  \global\let\SaveRestoreHook\empty
  \global\let\ColumnHook\empty}
\newcommand*{\savecolumns}[1][default]%
  {\g@addto@macro\SaveRestoreHook{\savecolumns[#1]}}
\newcommand*{\restorecolumns}[1][default]%
  {\g@addto@macro\SaveRestoreHook{\restorecolumns[#1]}}
\newcommand*{\aligncolumn}[2]%
  {\g@addto@macro\ColumnHook{\column{#1}{#2}}}

\resethooks

\newcommand{\onelinecommentchars}{\quad-{}- }
\newcommand{\commentbeginchars}{\enskip\{-}
\newcommand{\commentendchars}{-\}\enskip}

\newcommand{\visiblecomments}{%
  \let\onelinecomment=\onelinecommentchars
  \let\commentbegin=\commentbeginchars
  \let\commentend=\commentendchars}

\newcommand{\invisiblecomments}{%
  \let\onelinecomment=\empty
  \let\commentbegin=\empty
  \let\commentend=\empty}

\visiblecomments

\newlength{\blanklineskip}
\setlength{\blanklineskip}{0.66084ex}

\newcommand{\hsindent}[1]{\quad}% default is fixed indentation
\let\hspre\empty
\let\hspost\empty
\newcommand{\NB}{\textbf{NB}}
\newcommand{\Todo}[1]{$\langle$\textbf{To do:}~#1$\rangle$}

\EndFmtInput
\makeatother
%
%
%
%
%
%
% This package provides two environments suitable to take the place
% of hscode, called "plainhscode" and "arrayhscode". 
%
% The plain environment surrounds each code block by vertical space,
% and it uses \abovedisplayskip and \belowdisplayskip to get spacing
% similar to formulas. Note that if these dimensions are changed,
% the spacing around displayed math formulas changes as well.
% All code is indented using \leftskip.
%
% Changed 19.08.2004 to reflect changes in colorcode. Should work with
% CodeGroup.sty.
%
\ReadOnlyOnce{polycode.fmt}%
\makeatletter

\newcommand{\hsnewpar}[1]%
  {{\parskip=0pt\parindent=0pt\par\vskip #1\noindent}}

% can be used, for instance, to redefine the code size, by setting the
% command to \small or something alike
\newcommand{\hscodestyle}{}

% The command \sethscode can be used to switch the code formatting
% behaviour by mapping the hscode environment in the subst directive
% to a new LaTeX environment.

\newcommand{\sethscode}[1]%
  {\expandafter\let\expandafter\hscode\csname #1\endcsname
   \expandafter\let\expandafter\endhscode\csname end#1\endcsname}

% "compatibility" mode restores the non-polycode.fmt layout.

\newenvironment{compathscode}%
  {\par\noindent
   \advance\leftskip\mathindent
   \hscodestyle
   \let\\=\@normalcr
   \let\hspre\(\let\hspost\)%
   \pboxed}%
  {\endpboxed\)%
   \par\noindent
   \ignorespacesafterend}

\newcommand{\compaths}{\sethscode{compathscode}}

% "plain" mode is the proposed default.
% It should now work with \centering.
% This required some changes. The old version
% is still available for reference as oldplainhscode.

\newenvironment{plainhscode}%
  {\hsnewpar\abovedisplayskip
   \advance\leftskip\mathindent
   \hscodestyle
   \let\hspre\(\let\hspost\)%
   \pboxed}%
  {\endpboxed%
   \hsnewpar\belowdisplayskip
   \ignorespacesafterend}

\newenvironment{oldplainhscode}%
  {\hsnewpar\abovedisplayskip
   \advance\leftskip\mathindent
   \hscodestyle
   \let\\=\@normalcr
   \(\pboxed}%
  {\endpboxed\)%
   \hsnewpar\belowdisplayskip
   \ignorespacesafterend}

% Here, we make plainhscode the default environment.

\newcommand{\plainhs}{\sethscode{plainhscode}}
\newcommand{\oldplainhs}{\sethscode{oldplainhscode}}
\plainhs

% The arrayhscode is like plain, but makes use of polytable's
% parray environment which disallows page breaks in code blocks.

\newenvironment{arrayhscode}%
  {\hsnewpar\abovedisplayskip
   \advance\leftskip\mathindent
   \hscodestyle
   \let\\=\@normalcr
   \(\parray}%
  {\endparray\)%
   \hsnewpar\belowdisplayskip
   \ignorespacesafterend}

\newcommand{\arrayhs}{\sethscode{arrayhscode}}

% The mathhscode environment also makes use of polytable's parray 
% environment. It is supposed to be used only inside math mode 
% (I used it to typeset the type rules in my thesis).

\newenvironment{mathhscode}%
  {\parray}{\endparray}

\newcommand{\mathhs}{\sethscode{mathhscode}}

% texths is similar to mathhs, but works in text mode.

\newenvironment{texthscode}%
  {\(\parray}{\endparray\)}

\newcommand{\texths}{\sethscode{texthscode}}

% The framed environment places code in a framed box.

\def\codeframewidth{\arrayrulewidth}
\RequirePackage{calc}

\newenvironment{framedhscode}%
  {\parskip=\abovedisplayskip\par\noindent
   \hscodestyle
   \arrayrulewidth=\codeframewidth
   \tabular{@{}|p{\linewidth-2\arraycolsep-2\arrayrulewidth-2pt}|@{}}%
   \hline\framedhslinecorrect\\{-1.5ex}%
   \let\endoflinesave=\\
   \let\\=\@normalcr
   \(\pboxed}%
  {\endpboxed\)%
   \framedhslinecorrect\endoflinesave{.5ex}\hline
   \endtabular
   \parskip=\belowdisplayskip\par\noindent
   \ignorespacesafterend}

\newcommand{\framedhslinecorrect}[2]%
  {#1[#2]}

\newcommand{\framedhs}{\sethscode{framedhscode}}

% The inlinehscode environment is an experimental environment
% that can be used to typeset displayed code inline.

\newenvironment{inlinehscode}%
  {\(\def\column##1##2{}%
   \let\>\undefined\let\<\undefined\let\\\undefined
   \newcommand\>[1][]{}\newcommand\<[1][]{}\newcommand\\[1][]{}%
   \def\fromto##1##2##3{##3}%
   \def\nextline{}}{\) }%

\newcommand{\inlinehs}{\sethscode{inlinehscode}}

% The joincode environment is a separate environment that
% can be used to surround and thereby connect multiple code
% blocks.

\newenvironment{joincode}%
  {\let\orighscode=\hscode
   \let\origendhscode=\endhscode
   \def\endhscode{\def\hscode{\endgroup\def\@currenvir{hscode}\\}\begingroup}
   %\let\SaveRestoreHook=\empty
   %\let\ColumnHook=\empty
   %\let\resethooks=\empty
   \orighscode\def\hscode{\endgroup\def\@currenvir{hscode}}}%
  {\origendhscode
   \global\let\hscode=\orighscode
   \global\let\endhscode=\origendhscode}%

\makeatother
\EndFmtInput
%
\begin{hscode}\SaveRestoreHook
\column{B}{@{}>{\hspre}l<{\hspost}@{}}%
\column{E}{@{}>{\hspre}l<{\hspost}@{}}%
\>[B]{}\Varid{open}\;\mathbf{import}\;\Conid{Level}\;\Varid{using}\;(\Conid{Level}){}\<[E]%
\\
\>[B]{}\Varid{open}\;\mathbf{import}\;\Conid{\Conid{Data}.Product}\;\Varid{using}\;(\anonymous \mathbin{×\char95 };\anonymous ,\anonymous ){}\<[E]%
\\
\>[B]{}\Varid{open}\;\mathbf{import}\;\Conid{\Conid{Data}.Nat}{}\<[E]%
\\
\>[B]{}\Varid{open}\;\mathbf{import}\;\Conid{\Conid{Data}.List}{}\<[E]%
\ColumnHook
\end{hscode}\resethooks

\begin{hscode}\SaveRestoreHook
\column{B}{@{}>{\hspre}l<{\hspost}@{}}%
\column{3}{@{}>{\hspre}l<{\hspost}@{}}%
\column{9}{@{}>{\hspre}l<{\hspost}@{}}%
\column{E}{@{}>{\hspre}l<{\hspost}@{}}%
\>[B]{}\mathbf{data}\;\Conid{Nest}\;\{\mskip1.5mu \Varid{a}\mathbin{:}\Conid{Level}\mskip1.5mu\}\;(\Conid{A}\mathbin{:}\Conid{Set}\;\Varid{a})\mathbin{:}\Conid{Set}\;\Varid{a}\;\mathbf{where}{}\<[E]%
\\
\>[B]{}\hsindent{3}{}\<[3]%
\>[3]{}\Varid{nilN}{}\<[9]%
\>[9]{}\mathbin{:}\Conid{Nest}\;\Conid{A}{}\<[E]%
\\
\>[B]{}\hsindent{3}{}\<[3]%
\>[3]{}\Varid{consN}\mathbin{:}(\Conid{A}\mathbin{×}\Conid{A})\mathbin{→}\Conid{Nest}\;(\Conid{A}\mathbin{×}\Conid{A})\mathbin{→}\Conid{Nest}\;\Conid{A}{}\<[E]%
\ColumnHook
\end{hscode}\resethooks

\begin{hscode}\SaveRestoreHook
\column{B}{@{}>{\hspre}l<{\hspost}@{}}%
\column{3}{@{}>{\hspre}l<{\hspost}@{}}%
\column{E}{@{}>{\hspre}l<{\hspost}@{}}%
\>[B]{}\mathbf{data}\;\Conid{View}\;\{\mskip1.5mu \Varid{a}\mathbin{:}\Conid{Level}\mskip1.5mu\}\;(\Conid{A}\mathbin{:}\Conid{Set}\;\Varid{a})\mathbin{:}\Conid{Set}\;\Varid{a}\;\mathbf{where}{}\<[E]%
\\
\>[B]{}\hsindent{3}{}\<[3]%
\>[3]{}\Varid{nilL}\mathbin{:}\Conid{View}\;\Conid{A}{}\<[E]%
\\
\>[B]{}\hsindent{3}{}\<[3]%
\>[3]{}\Varid{consL}\mathbin{:}\Conid{A}\mathbin{→}\Conid{Nest}\;\Conid{A}\mathbin{→}\Conid{View}\;\Conid{A}{}\<[E]%
\ColumnHook
\end{hscode}\resethooks

\begin{hscode}\SaveRestoreHook
\column{B}{@{}>{\hspre}l<{\hspost}@{}}%
\column{E}{@{}>{\hspre}l<{\hspost}@{}}%
\>[B]{}\Varid{lift}\mathbin{-}\Varid{op}\mathbin{:}\mathbin{∀}\{\mskip1.5mu \Varid{a}\mathbin{:}\Conid{Level}\mskip1.5mu\}\;\{\mskip1.5mu \Conid{A}\mathbin{:}\Conid{Set}\;\Varid{a}\mskip1.5mu\}\mathbin{→}(\Conid{A}\mathbin{×}\Conid{A}\mathbin{→}\Conid{A})\mathbin{→}((\Conid{A}\mathbin{×}\Conid{A})\mathbin{×}(\Conid{A}\mathbin{×}\Conid{A}))\mathbin{→}(\Conid{A}\mathbin{×}\Conid{A}){}\<[E]%
\\
\>[B]{}\Varid{lift}\mathbin{-}\Varid{op}\;\Varid{op}\;(\Varid{proj₁},\Varid{proj₂})\mathrel{=}(\Varid{op}\;\Varid{proj₁},\Varid{op}\;\Varid{proj₂}){}\<[E]%
\ColumnHook
\end{hscode}\resethooks

\begin{hscode}\SaveRestoreHook
\column{B}{@{}>{\hspre}l<{\hspost}@{}}%
\column{E}{@{}>{\hspre}l<{\hspost}@{}}%
\>[B]{}\Varid{compact}\mathbin{:}\mathbin{∀}\{\mskip1.5mu \Varid{a}\mathbin{:}\Conid{Level}\mskip1.5mu\}\;\{\mskip1.5mu \Conid{A}\mathbin{:}\Conid{Set}\;\Varid{a}\mskip1.5mu\}\mathbin{→}\Conid{Nest}\;(\Conid{A}\mathbin{×}\Conid{A})\mathbin{→}(\Conid{A}\mathbin{×}\Conid{A}\mathbin{→}\Conid{A})\mathbin{→}\Conid{Nest}\;\Conid{A}{}\<[E]%
\\
\>[B]{}\Varid{compact}\;\Varid{nilN}\;\Varid{op}\mathrel{=}\Varid{nilN}{}\<[E]%
\\
\>[B]{}\Varid{compact}\;(\Varid{consN}\;\Varid{p}\;\Varid{ns})\;\Varid{op}\mathrel{=}\Varid{consN}\;(\Varid{lift}\mathbin{-}\Varid{op}\;\Varid{op}\;\Varid{p})\;(\Varid{compact}\;\Varid{ns}\;(\Varid{lift}\mathbin{-}\Varid{op}\;\Varid{op})){}\<[E]%
\ColumnHook
\end{hscode}\resethooks

\begin{hscode}\SaveRestoreHook
\column{B}{@{}>{\hspre}l<{\hspost}@{}}%
\column{E}{@{}>{\hspre}l<{\hspost}@{}}%
\>[B]{}\Varid{view}\mathbin{:}\mathbin{∀}\{\mskip1.5mu \Varid{a}\mathbin{:}\Conid{Level}\mskip1.5mu\}\;\{\mskip1.5mu \Conid{A}\mathbin{:}\Conid{Set}\;\Varid{a}\mskip1.5mu\}\mathbin{→}(\Conid{A}\mathbin{×}\Conid{A}\mathbin{→}\Conid{A})\mathbin{→}\Conid{Nest}\;\Conid{A}\mathbin{→}\Conid{View}\;\Conid{A}{}\<[E]%
\\
\>[B]{}\Varid{view}\;\Varid{op}\;\Varid{nilN}\mathrel{=}\Varid{nilL}{}\<[E]%
\\
\>[B]{}\Varid{view}\;\Varid{op}\;(\Varid{consN}\;\Varid{x}\;\Varid{ns})\mathrel{=}\Varid{consL}\;(\Varid{op}\;\Varid{x})\;(\Varid{compact}\;\Varid{ns}\;\Varid{op}){}\<[E]%
\ColumnHook
\end{hscode}\resethooks
--
-- toList-nest : ∀ {a : Level} {A : Set a} → (A × A → A) → Nest A → List A
-- toList-nest op ns with view op ns
-- toList-nest op ns \ensuremath{\Varid{nilL}\mathrel{=}[\mskip1.5mu \mskip1.5mu]\mbox{\onelinecomment  toList-nest op ns }} consL x x₁ = x ∷ (toList-nest op x₁)

-- I have tried to overcome the termination problem by making the types dependent, so Agda
-- can see that terms actually become smaller as was suggested in the work of Ross Patterson et al.

-- I also changed the semantics of the operations a bit to comply with the typing scheme,
-- but it shouldn't cause any difference.

\begin{hscode}\SaveRestoreHook
\column{B}{@{}>{\hspre}l<{\hspost}@{}}%
\column{3}{@{}>{\hspre}l<{\hspost}@{}}%
\column{E}{@{}>{\hspre}l<{\hspost}@{}}%
\>[B]{}\mathbf{data}\;\Varid{dNest}\;\{\mskip1.5mu \Varid{a}\mathbin{:}\Conid{Level}\mskip1.5mu\}\;(\Conid{A}\mathbin{:}\Conid{Set}\;\Varid{a})\mathbin{:}\Conid{ℕ}\mathbin{→}\Conid{Set}\;\Varid{a}\;\mathbf{where}{}\<[E]%
\\
\>[B]{}\hsindent{3}{}\<[3]%
\>[3]{}\Varid{dnilN}\mathbin{:}\Varid{dNest}\;\Conid{A}\;\Varid{zero}{}\<[E]%
\\
\>[B]{}\hsindent{3}{}\<[3]%
\>[3]{}\Varid{dconsN}\mathbin{:}\mathbin{∀}\{\mskip1.5mu \Varid{n}\mathbin{:}\Conid{ℕ}\mskip1.5mu\}\mathbin{→}(\Conid{A}\mathbin{×}\Conid{A})\mathbin{→}\Varid{dNest}\;(\Conid{A}\mathbin{×}\Conid{A})\;\Varid{n}\mathbin{→}\Varid{dNest}\;\Conid{A}\;(\Varid{suc}\;\Varid{n}){}\<[E]%
\\[\blanklineskip]%
\>[B]{}\mathbf{data}\;\Varid{dView}\;\{\mskip1.5mu \Varid{a}\mathbin{:}\Conid{Level}\mskip1.5mu\}\;(\Conid{A}\mathbin{:}\Conid{Set}\;\Varid{a})\mathbin{:}\Conid{ℕ}\mathbin{→}\Conid{Set}\;\Varid{a}\;\mathbf{where}{}\<[E]%
\\
\>[B]{}\hsindent{3}{}\<[3]%
\>[3]{}\Varid{dnilV}\mathbin{:}\Varid{dView}\;\Conid{A}\;\Varid{zero}{}\<[E]%
\\
\>[B]{}\hsindent{3}{}\<[3]%
\>[3]{}\Varid{dconsV}\mathbin{:}\mathbin{∀}\{\mskip1.5mu \Varid{n}\mathbin{:}\Conid{ℕ}\mskip1.5mu\}\mathbin{→}\Conid{A}\mathbin{→}\Varid{dNest}\;\Conid{A}\;\Varid{n}\mathbin{→}\Varid{dView}\;\Conid{A}\;(\Varid{suc}\;\Varid{n}){}\<[E]%
\\[\blanklineskip]%
\>[B]{}\Varid{dcompact}\mathbin{:}\mathbin{∀}\{\mskip1.5mu \Varid{a}\mathbin{:}\Conid{Level}\mskip1.5mu\}\;\{\mskip1.5mu \Conid{A}\mathbin{:}\Conid{Set}\;\Varid{a}\mskip1.5mu\}\;\{\mskip1.5mu \Varid{n}\mathbin{:}\Conid{ℕ}\mskip1.5mu\}\mathbin{→}\Varid{dNest}\;(\Conid{A}\mathbin{×}\Conid{A})\;(\Varid{suc}\;\Varid{n})\mathbin{→}(\Varid{op}\mathbin{:}\Conid{A}\mathbin{×}\Conid{A}\mathbin{→}\Conid{A})\mathbin{→}\Varid{dNest}\;\Conid{A}\;\Varid{n}{}\<[E]%
\\
\>[B]{}\Varid{dcompact}\;\{\mskip1.5mu \Varid{n}\mathrel{=}\Varid{zero}\mskip1.5mu\}\;(\Varid{dconsN}\;\Varid{x}\;\Varid{ns})\;\Varid{op}\mathrel{=}\Varid{dnilN}{}\<[E]%
\\
\>[B]{}\Varid{dcompact}\;\{\mskip1.5mu \Varid{n}\mathrel{=}\Varid{suc}\;\Varid{n}\mskip1.5mu\}\;(\Varid{dconsN}\;\Varid{x}\;\Varid{ns})\;\Varid{op}\mathrel{=}\Varid{dconsN}\;(\Varid{lift}\mathbin{-}\Varid{op}\;\Varid{op}\;\Varid{x})\;(\Varid{dcompact}\;\Varid{ns}\;(\Varid{lift}\mathbin{-}\Varid{op}\;\Varid{op})){}\<[E]%
\\[\blanklineskip]%
\>[B]{}\Varid{dview}\mathbin{:}\mathbin{∀}\{\mskip1.5mu \Varid{a}\mathbin{:}\Conid{Level}\mskip1.5mu\}\;\{\mskip1.5mu \Conid{A}\mathbin{:}\Conid{Set}\;\Varid{a}\mskip1.5mu\}\;\{\mskip1.5mu \Varid{n}\mathbin{:}\Conid{ℕ}\mskip1.5mu\}\mathbin{→}(\Varid{op}\mathbin{:}\Conid{A}\mathbin{×}\Conid{A}\mathbin{→}\Conid{A})\mathbin{→}\Varid{dNest}\;\Conid{A}\;(\Varid{suc}\;\Varid{n})\mathbin{→}\Varid{dView}\;\Conid{A}\;\Varid{n}{}\<[E]%
\\
\>[B]{}\Varid{dview}\;\{\mskip1.5mu \Varid{n}\mathrel{=}\Varid{zero}\mskip1.5mu\}\;\Varid{op}\;\Varid{ns}\mathrel{=}\Varid{dnilV}{}\<[E]%
\\
\>[B]{}\Varid{dview}\;\{\mskip1.5mu \Varid{n}\mathrel{=}\Varid{suc}\;\Varid{zero}\mskip1.5mu\}\;\Varid{op}\;(\Varid{dconsN}\;\Varid{x}\;\Varid{ns})\mathrel{=}\Varid{dconsV}\;(\Varid{op}\;\Varid{x})\;\Varid{dnilN}{}\<[E]%
\\
\>[B]{}\Varid{dview}\;\{\mskip1.5mu \Varid{n}\mathrel{=}\Varid{suc}\;(\Varid{suc}\;\Varid{n})\mskip1.5mu\}\;\Varid{op}\;(\Varid{dconsN}\;\Varid{x}\;\Varid{ns})\mathrel{=}\Varid{dconsV}\;(\Varid{op}\;\Varid{x})\;(\Varid{dcompact}\;\Varid{ns}\;\Varid{op}){}\<[E]%
\ColumnHook
\end{hscode}\resethooks

open import DependentPair using (Σ'; _,_)
open import Induction.WellFounded

-- toList-dnest : ∀ {a : Level} {A : Set a}{n : ℕ} → (op : A × A → A) → dNest A n → List A
-- toList-dnest {n = zero} op ns = []
-- toList-dnest {n = suc n} op ns with dview op ns
-- toList-dnest {a} {A} {suc .0} op ns \ensuremath{\Varid{dnilV}\mathrel{=}[\mskip1.5mu \mskip1.5mu]\mbox{\onelinecomment  toList-dnest {a} {A} {suc _} op ns }} dconsV x x₁ = x ∷ (toList-dnest op ns)
-- here, I know the types become smaller and smaller, so it should terminate.
-- the fact is obvious from the deffinitions above.
-- How do I convice agda?

Nest-pair : ∀ {a} (A : Set a) → Set a
Nest-pair {a} A = Σ' {a = a} ℕ (dNest A)




\begin{hscode}\SaveRestoreHook
\column{B}{@{}>{\hspre}l<{\hspost}@{}}%
\column{E}{@{}>{\hspre}l<{\hspost}@{}}%
\>[B]{}\Varid{append}\mathbin{:}\mathbin{∀}\{\mskip1.5mu \Varid{a}\mskip1.5mu\}\;\{\mskip1.5mu \Conid{A}\mathbin{:}\Conid{Set}\;\Varid{a}\mskip1.5mu\}\mathbin{→}\Conid{A}\mathbin{→}\Conid{List}\;\Conid{A}\mathbin{→}\Conid{List}\;\Conid{A}{}\<[E]%
\\
\>[B]{}\Varid{append}\;\Varid{x}\;\Varid{xs}\;\Varid{with}\;\Varid{xs}{}\<[E]%
\\
\>[B]{}\Varid{append}\;\Varid{x}\;\Varid{xs}\mid [\mskip1.5mu \mskip1.5mu]\mathrel{=}\Conid{\Conid{Data}.List}\mathbin{\circ}[\mskip1.5mu \Varid{x}\mskip1.5mu]{}\<[E]%
\\
\>[B]{}\Varid{append}\;\Varid{x}\;\Varid{xs}\mid \Varid{y}\mathbin{∷}\Varid{ys}\mathrel{=}\Varid{y}\mathbin{∷}\Varid{append}\;\Varid{x}\;\Varid{ys}{}\<[E]%
\ColumnHook
\end{hscode}\resethooks
\begin{hscode}\SaveRestoreHook
\column{B}{@{}>{\hspre}l<{\hspost}@{}}%
\column{E}{@{}>{\hspre}l<{\hspost}@{}}%
\>[B]{}\Varid{open}\;\mathbf{import}\;\Conid{\Conid{Relation}.\Conid{Binary}.PropositionalEquality}{}\<[E]%
\\
\>[B]{}\Varid{append2}\mathbin{:}\mathbin{∀}\{\mskip1.5mu \Varid{a}\mskip1.5mu\}\;\{\mskip1.5mu \Conid{A}\mathbin{:}\Conid{Set}\;\Varid{a}\mskip1.5mu\}\mathbin{→}\Conid{A}\mathbin{→}\Conid{List}\;\Conid{A}\mathbin{→}\Conid{List}\;\Conid{A}{}\<[E]%
\\
\>[B]{}\Varid{append2}\;\Varid{x}\;\Varid{xs}\;\Varid{with}\;\Varid{xs}\mid \Varid{inspect}\;(\Varid{λ}\;\Varid{x}\mathbin{→}\Varid{x})\;\Varid{xs}{}\<[E]%
\\
\>[B]{}\Varid{append2}\;\Varid{x}\;\Varid{xs}\mid [\mskip1.5mu \mskip1.5mu]\mid [\mskip1.5mu \Varid{eq}\mskip1.5mu]\mathrel{=}\Conid{\Conid{Data}.List}\mathbin{\circ}[\mskip1.5mu \Varid{x}\mskip1.5mu]{}\<[E]%
\\
\>[B]{}\Varid{append2}\;\Varid{x}\;\Varid{xs}\mid \Varid{y}\mathbin{∷}\Varid{ys}\mid \Conid{Reveal\char95 }\mathbin{·\char95 }\Varid{is\char95 }\mathbin{\circ}[\mskip1.5mu \Varid{refl}\mskip1.5mu]\mathrel{=}\Varid{y}\mathbin{∷}(\Varid{append2}\;\Varid{x}\;\Varid{ys}){}\<[E]%
\ColumnHook
\end{hscode}\resethooks
\begin{hscode}\SaveRestoreHook
\column{B}{@{}>{\hspre}l<{\hspost}@{}}%
\column{E}{@{}>{\hspre}l<{\hspost}@{}}%
\>[B]{}\Varid{open}\;\mathbf{import}\;\Conid{\Conid{Data}.Vec}{}\<[E]%
\\
\>[B]{}\Varid{append3}\mathbin{:}\mathbin{∀}\{\mskip1.5mu \Varid{a}\mskip1.5mu\}\;\{\mskip1.5mu \Conid{A}\mathbin{:}\Conid{Set}\;\Varid{a}\mskip1.5mu\}\;\{\mskip1.5mu \Varid{n}\mathbin{:}\Conid{ℕ}\mskip1.5mu\}\mathbin{→}\Conid{A}\mathbin{→}\Conid{Vec}\;\Conid{A}\;\Varid{n}\mathbin{→}\Conid{Vec}\;\Conid{A}\;(\Varid{suc}\;\Varid{n}){}\<[E]%
\\
\>[B]{}\Varid{append3}\;\Varid{x}\;\Varid{xs}\;\Varid{with}\;\Varid{xs}{}\<[E]%
\\
\>[B]{}\Varid{append3}\;\Varid{x}\;\Varid{xs}\mid [\mskip1.5mu \mskip1.5mu]\mathrel{=}\Varid{x}\mathbin{∷}[\mskip1.5mu \mskip1.5mu]{}\<[E]%
\\
\>[B]{}\Varid{append3}\;\Varid{x}\;\Varid{xs}\mid \Varid{y}\mathbin{∷}\Varid{ys}\mathrel{=}\Varid{y}\mathbin{∷}(\Varid{append3}\;\Varid{x}\;\Varid{ys}){}\<[E]%
\ColumnHook
\end{hscode}\resethooks
